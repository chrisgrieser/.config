# - DOCS https://starship.rs/config/
# - Ansi color codes: https://i.stack.imgur.com/KTSQa.png
# - INFO some nerd font requires a space after them to be properly sized
#───────────────────────────────────────────────────────────────────────────────

format = """[\
${custom.location_indicator}$directory${custom.folder_number}\
${custom.main_branch}$git_branch\
$git_status$git_metrics$git_commit$git_state\
$sudo$status\
](bg:black)\
$character\
"""

right_format = """\
$cmd_duration\
${custom.alfred}$python$nodejs\
"""

add_newline = false

#───────────────────────────────────────────────────────────────────────────────

[character]
success_symbol = "[▓▒░](fg:black)"
error_symbol = "[▓▒░](fg:red)"
vimcmd_symbol = "[▓▒░](fg:blue)"

[status] # exit code
disabled = false
format = "[ $status $symbol]($style)"
style = "fg:bold 255 bg:red"          # 255 as ansi enforces white regardless of terminal theme
symbol = ""

[sudo]
disabled = false
style = 'fg:yellow bg:black'
symbol = "  "
format = "[$symbol]($style)"

[custom.location_indicator]
description = "Indicate if in my local repo folder"
command = '[[ "$PWD" =~ "$HOME/local-repos" ]] && echo "󰔽"'
# conditional, so no output does not leave the extra space from `format`. And the
# space from format is needed, as the output from `command` is trimmed.
when = '[[ "$PWD" =~ "$HOME/local-repos" ]]'
format = '[ $output  ]($style)'              # extra space for proper nerdfont sizing
style = "fg:cyan bg:black bold"

[directory]
truncation_length = 2
truncation_symbol = "/"
truncate_to_repo = true
read_only = "󰌾  "
read_only_style = "fg:red bg:black"
style = "fg:cyan bg:black bold"
format = "[$path]($style) [$read_only]($read_only_style)"

[directory.substitutions]
".config" = " "
"main-vault" = "󱉽 "
"~/Library/Mobile Documents/com~apple~CloudDocs/File Hub" = "/󰀶 "
"~/Library/Mobile Documents/com~apple~CloudDocs" = "/ "

[custom.folder_number]
description = "Number of files (and folders) in the current working directory"
command = "find . -mindepth 1 -maxdepth 1 -not -name '.git' -not -name '.DS_Store' -not -name 'Icon?' | wc -l"
when = "true"                                                                                                  # always show
symbol = " "
format = '[$symbol$output]($style) '
style = "fg:yellow bg:black bold"

#───────────────────────────────────────────────────────────────────────────────
# GIT

# conflicts or rebasing
[git_state]
style = 'fg:yellow bold bg:black'

# checkout
[git_commit]
style = "fg:purple bg:black"
only_detached = true
format = "[󰘬 $hash]($style) "

# branch
[git_branch]
only_attached = true
symbol = "󰘬 "                        # 
style = "fg:purple bg:black bold"
format = "[$symbol$branch]($style) "
ignore_branches = ["main"]

# since "ignore_branches" fully hides the git_branch component, still showing the symbol
[custom.main_branch]
when = "[[ $(git branch --show-current) == 'main' ]]"
format = '[󰘬 ](fg:purple bg:black bold)'

# files
[git_status]
stashed = '[󰜦  $count ](fg:cyan bg:black)'
untracked = '[+$count ](fg:green bg:black)'
deleted = '[-$count ](fg:red bg:black)'                                                            # SIC unstaged as well as stage deletion
modified = '[~$count ](fg:208 bg:black)'
renamed = '[󰑕  $count ](fg:blue bg:black)'
staged = '[  $count ](fg:green bg:black)'
conflicted = '[ $count ](fg:red bg:black)'
diverged = '[󰃻 $count ](fg:red bg:black)'
ahead = '[󰶣 $count ](fg:cyan bg:black)'
behind = '[󰶡 $count ](fg:yellow bg:black)'
style = 'bg:black'
format = '[( $ahead_behind$conflicted$stashed$staged$untracked$renamed$modified$deleted)]($style)'
# INFO putting a variable into a bracket ensures that the bracket content is
# only shown when the variable is set.
# the

# lines
[git_metrics]
disabled = false
added_style = "fg:green bg:black"
deleted_style = "fg:red bg:black"
format = '(\([+$added]($added_style)/[-$deleted]($deleted_style)\)) '

#───────────────────────────────────────────────────────────────────────────────
# RIGHT SIDE

[cmd_duration]
min_time = 2000
format = "[󰔟  $duration](bold cyan)"

[custom.alfred]
description = "Version number of Alfred Workflow"
when = "[[ -f info.plist ]] || [[ -f ../info.plist ]]"
command = "if [[ -f ../info.plist ]] ; then ; plist=$(plutil -extract version xml1 -o - ../info.plist) ; else ; plist=$(plutil -extract version xml1 -o - info.plist) ; fi ; echo \"$plist\" | sed -n 4p | cut -d'>' -f2 | cut -d'<' -f1"
os = "macos"
format = '  [󰮤  $output]($style)'
style = "bold purple"

[python]
style = "bold yellow"
format = '  [${symbol}${pyenv_prefix}($version)( 󱥒  $virtualenv)]($style)'
version_format = "$major.$minor"
symbol = "  "

[nodejs]
style = "bold red"
format = '  [${symbol} $version]($style)'
version_format = "$major.$minor"
not_capable_style = "ft:white bg:red" # "engines property in package.json does not match the Node.js version"
detect_extensions = [
] # detect only via `package.json` or `node_modules` to avoid false positives
