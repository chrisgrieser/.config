# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: "App-specific-Bindings"
rules:
  - description: "(Apps) Zoom"
    manipulators:
      # Toggle Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: h, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^us\.zoom\.xos$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Microsoft Office"
    manipulators:
      # export
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: s, modifiers: [command, shift] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.microsoft\.Word$
              - ^com\.microsoft\.Excel$
              - ^com\.microsoft\.Powerpoint$
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Microsoft Word"
                    set frontmost to true
                    click menu item "Comment" of menu "Insert" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # Toggle Sidebar MS Word
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  set frontmost to true
                  click menu item "Thumbnail" of menu of menu item "Sidebar" of menu "View" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Finder"
    manipulators:
      # sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [control, command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+shift+d -> downloads instead of desktop (which I do not use)
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: l, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) ReadKit: Sidebar"
    manipulators:
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [control, command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [app\.readkit\.universal] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Highlights"
    manipulators:
      # cmd+l = Show in Finder
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          # 1% assuming hidden menubar, otherwise 3-4%
          - software_function: { set_mouse_cursor_position: { x: 60%, y: 1%, screen: 0 } }
          - pointing_button: button2
          - software_function: { set_mouse_cursor_position: { x: 10%, y: 1%, screen: 0 } } # prevent hover selection
          - key_code: down_arrow # assuming hidden menubar, otherwise only 1x arrow down
          - key_code: down_arrow
          - key_code: return_or_enter
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Back & Forward
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Back" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Forward" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Right Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: "2"
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to: [{ key_code: t, modifiers: [command, option] }]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Image Tool
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [command] } }
        to:
          - { key_code: i, modifiers: [command, control] }
          - { key_code: "7", modifiers: [command, control] } # purple borders
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Image \U0001F5BC️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Red Underline Tool
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: u
            modifiers: [command, control]
          - key_code: "1"
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Underline \U0001F58D️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Comment Tool
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - key_code: n
            modifiers: [command, control]
          - key_code: "3" # yellow
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Comment \U0001F5E3️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Yellow Highlight Tool
      - type: basic
        from: { key_code: z, modifiers: { mandatory: [command] } } # z and y switched on German keyboard
        to:
          - { key_code: h, modifiers: [command, control] }
          - { key_code: "3", modifiers: [command, control] }
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Yellow Highlight \U0001F7E8\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Rename
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell (first process where it is frontmost)
                  click menu item "Show Toolbar" of menu "View" of menu bar 1
                  click menu item "Rename…" of menu "File" of menu bar 1
                end tell'
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^net\.highlightsapp\.universal$
              - ^com\.apple\.Preview$
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) GoodTask"
    manipulators:
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: l, modifiers: [command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.hahainteractive\.GoodTask3Mac$] }
      # FIX wrong keybinding for inserting line break
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: return_or_enter, modifiers: [control] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.hahainteractive\.GoodTask3Mac$] }
  #─────────────────────────────────────────────────────────────────────
  - description: "(Apps) Neovide"
    manipulators:
      # "Neovide: ⇪R to restart, ⌘Q to Quit"
      # INFO explicitly remapping cmd+q ensures that cursor position and changes are saved.
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH
              if ! nvim --server "/tmp/nvim_server.pipe" --remote-send "<cmd>try|wqall|catch|qall|endtry<CR>" ; then
                osascript -e 'display notification "" with title "⚔️ Force killing nvim…"'
                killall -9 nvim neovide
              fi
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Brave"
    manipulators:
      # Toggle Vertical Tab Sidebar
      # Require custom shortcuts set via brave://settings/system/shortcuts?search=vertical
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "1", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      - type: basic
        from: { key_code: "2", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "2", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # Toggle Right Sidebar (Leo)
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "0", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # Remove bookmark
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: d, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - key_code: spacebar
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # shift+cmd+,: extension settings
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'chrome://extensions/'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # FIX cmd+q on PWAs should not quit Brave itself
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com.brave.Browser.app.*] # PWAs
        to:
          - { key_code: w, modifiers: [command] }
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: c, modifiers: [option, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Obsidian"
    manipulators:
      # Dev Tools & Element Picker
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [option, command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: c, modifiers: [shift, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^md\.obsidian$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Slack"
    # https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts
    manipulators:
      # go to next unread message
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: down_arrow
            modifiers: [option, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # back in history
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - key_code: semicolon
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # forward in history
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - key_code: quote
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # next channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # prev channel
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Alfred"
    manipulators:
      # select with tab
      # REQUIRES compatibility mode to recognize Alfred as frontmost app
      - type: basic
        from: { key_code: tab }
        to:
          - { key_code: down_arrow }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.runningwithcrayons\.Alfred$] }]
      - type: basic
        from: { key_code: tab, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: up_arrow }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.runningwithcrayons\.Alfred$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Discord"
    manipulators:
      # goto next/prev unread channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - { key_code: down_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go to next [u]nread
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [command, shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # [r]eply to msg above
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command] } }
        to:
          # saving text in the clipboard required, since tab->up->r only works
          # with empty text input field. need to preserve previous clipboard then
          - shell_command: pbpaste | pbcopy -pboard ruler
          - { key_code: a, modifiers: [command] }
          - { key_code: x, modifiers: [command] }
          # reply
          - { key_code: vk_none, hold_down_milliseconds: 30 }
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: r
          # restore previous text & previous clipboard
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - shell_command: pbpaste -pboard ruler | pbcopy
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # emoji reaction to msg above
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 70 }
          - key_code: close_bracket
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go 3 up [t]
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: v
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # scroll to bottom (mnenonic: vim's G)
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 30
          - key_code: escape
          - key_code: escape
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
  #───────────────────────────────────────────────────────────────────────
  - description: "(Apps) Script Editor"
    manipulators:
      # Quit without saving
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
      # toggle syntax (Javascript <-> Applescript)
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [option] } }
        to:
          - shell_command: |
              osascript -l JavaScript -e '
                const se = Application("Script Editor");
                const currentDoc = se.documents()[0]
                const currentLang = currentDoc.language().name();
                const otherLang = currentLang === "AppleScript" ? "JavaScript" : "AppleScript";
                const otherLangObj = se.languages.byName(otherLang);
                currentDoc.language = otherLangObj;
                currentDoc.checkSyntax();
              '
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) BusyCal"
    manipulators:
      # Sidebars
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      # Quick event creation with Time-Parsing instead of normal event
      - type: basic
        from: { key_code: "n", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "n", modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Mimestream"
    manipulators:
      # Toggle toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # Open in Gmail
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - { key_code: g, modifiers: [command, control] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Cleanshot"
    manipulators:
      # INFO https://cleanshot.com/docs/api
      # ⌘⇧4 (screenshot button): tap to screenshot, hold for OCR
      - type: basic
        from: { key_code: "4", modifiers: { mandatory: [shift, command] } }
        to_if_alone:
          - shell_command: open -g "cleanshot://capture-area"
        to_if_held_down:
          - shell_command: |
              osascript -e 'display notification "" with title "OCR Screenshot"'
              open -g "cleanshot://capture-text"
  # INFO using Shottr at mother device, since no 3rd license for CleanShot
  # make hotkeys consistent with CleanShot though (cmd+s -> cmd+shift+c)
  - description: "(Apps) Shottr"
    manipulators:
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^cc\.ffitch\.shottr$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Pixelmator/Preview: Export"
    manipulators:
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell (first process where it is frontmost)
                  click menu item "Export…" of menu "File" of menu bar 1
                end tell'
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.pixelmatorteam\.pixelmator\.x$
              - ^com\.apple\.Preview$
