# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: "App-specific bindings"
rules:
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Microsoft Office"
    manipulators:
      # export as PDF
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  click menu item "Save As..." of menu "File" of menu bar 1
                  click pop up button 2 of sheet 1 of window 1
                  click menu item "PDF" of menu 1 of pop up button 2 of sheet 1 of window 1
                end tell'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                    click menu item "Comment" of menu "Insert" of menu bar 1
                end tell'
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # toggle tracked changes
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                    click menu item "Markup" of menu "View" of menu bar 1
                end tell'
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # Toggle Sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  click menu item "Thumbnail" of menu of menu item "Sidebar" of menu "View" of menu bar 1
                end tell'
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # cmd+l = Show in Finder
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          # 1% height assuming hidden menubar, otherwise 3-4%
          # 60% assuming my usual window size of pseudo-maximized
          - software_function: { set_mouse_cursor_position: { x: 60%, y: 1%, screen: 0 } }
          - pointing_button: button2
          - key_code: down_arrow
          - key_code: return_or_enter
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Pixelmator/Preview: Export"
    manipulators:
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell (first process where it is frontmost)
                  click menu item "Export…" of menu "File" of menu bar 1
                end tell'
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.pixelmatorteam\.pixelmator\.x$, ^com\.apple\.Preview$]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Zoom"
    manipulators:
      # Toggle Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: h, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^us\.zoom\.xos$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Finder"
    manipulators:
      # cmd+1 -> right left sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [control, command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+0 -> toggle right sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: p, modifiers: [shift, command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+q -> close all windows
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - shell_command: osascript -e 'tell application "Finder" to close every window'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+shift+d -> goto [D]ownloads
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: l, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+enter -> goto Desktop/dotfiles
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                set theDesktop to POSIX path of (path to desktop folder as string)
                set dotfiles to (POSIX path of (path to home folder as string) & ".config/")
                
                tell application "Finder"
                  -- `Finder window` instead of win ensures regular window, not QuickLook or prompt
                  if not (front Finder window exists) then return

                  set currentPath to POSIX path of (target of front Finder window as alias)
                  set toGoto to theDesktop
                  if (currentPath is theDesktop) then set toGoto to dotfiles
                  set target of front Finder window to (toGoto as POSIX file)
                end tell 
              '
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
      # cmd+shift+v -> goto [V]aults
      - type: basic
        from: { key_code: v, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  set vaultFolder to (path to home folder as string) & "Vaults"
                  set target of front Finder window to vaultFolder
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Highlights"
    manipulators:
      # cmd+l = Show in Finder
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          # 1% height assuming hidden menubar, otherwise 3-4%
          # 60% assuming my usual window size of pseudo-maximized
          - software_function: { set_mouse_cursor_position: { x: 60%, y: 1%, screen: 0 } }
          - pointing_button: button2
          - key_code: down_arrow
          - key_code: return_or_enter
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$]
      # Right Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: "2"
            modifiers: [command]
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$]
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$]
      # Rename
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell (first process where it is frontmost)
                  click menu item "Show Toolbar" of menu "View" of menu bar 1
                  click menu item "Rename…" of menu "File" of menu bar 1
                end tell'
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$, ^com\.apple\.Preview$]
      # Image Tool
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [command] } }
        to:
          - { key_code: i, modifiers: [command, control] }
          - { key_code: "7", modifiers: [command, control] } # purple borders
          - shell_command: |
              "$HOME/.config/karabiner/assets/notificators/highlights-notificator" \
                  --title "Highlights" --message "Image 🖼️"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$]
  #─────────────────────────────────────────────────────────────────────
  - description: "(Apps) Neovide"
    manipulators:
      # cmd+q -> ZZ: quit with saving, PENDING https://github.com/neovide/neovide/issues/2558
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: "y", modifiers: [shift] } # German keyboard: y & z swapped
          - { key_code: "y", modifiers: [shift] }
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
      # cmd+h -> cmd+ö for the heading incrementor
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [command] } }
        to:
          - { key_code: semicolon, modifiers: [command] } # = ö in German keyboard
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Brave"
    manipulators:
      # Toggle Vertical Tab Sidebar
      # REQUIRED custom shortcuts set via brave://settings/system/shortcuts?search=vertical
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "1", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      - type: basic
        from: { key_code: "2", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "2", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # Toggle Right Sidebar (Leo)
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "0", modifiers: [option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # Remove bookmark
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: d, modifiers: [command] }
          - key_code: tab
          - key_code: tab
          - key_code: spacebar
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # shift+cmd+,: extension settings
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'chrome://extensions/'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # dev tools -> element picker
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: c, modifiers: [option, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Obsidian"
    manipulators:
      # Dev Tools & Element Picker
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [option, command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: c, modifiers: [shift, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^md\.obsidian$] }
  #─────────────────────────────────────────────────────────────────────────────
  # DOCS https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts
  - description: "(Apps) Slack"
    manipulators:
      # go to next unread message
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: down_arrow
            modifiers: [option, shift]
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # back in history
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - key_code: semicolon
            modifiers: [command]
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # forward in history
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - key_code: quote
            modifiers: [command]
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # next channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [option]
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # prev channel
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
  #─────────────────────────────────────────────────────────────────────────────
  # REQUIRED compatibility mode to recognize Alfred as frontmost app
  - description: "(Apps) Alfred: Select with <Tab>"
    manipulators:
      - type: basic
        from: { key_code: tab }
        to:
          - { key_code: down_arrow }
        conditions:
          [
            {
              type: frontmost_application_if,
              bundle_identifiers: [^com\.runningwithcrayons\.Alfred$],
            },
          ]
      - type: basic
        from: { key_code: tab, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: up_arrow }
        conditions:
          [
            {
              type: frontmost_application_if,
              bundle_identifiers: [^com\.runningwithcrayons\.Alfred$],
            },
          ]
      # Open Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "9", modifiers: [command] }
        conditions:
          [
            {
              type: frontmost_application_if,
              bundle_identifiers: [^com\.runningwithcrayons\.Alfred-Preferences$],
            },
          ]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Discord"
    manipulators:
      # HACK Due to a Discord bug where back/forth in navigation history is not
      # assignable, assigning my preferred bindings to mouse4 and mouse5,
      # since these work 💀
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - pointing_button: "button4"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - pointing_button: "button5"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # toggle member list (right sidebar)
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: u, modifiers: [command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # cycle through server
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # goto next/prev unread channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - { key_code: down_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go to next [u]nread notification
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [command, shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # [r]eply to msg above
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command] } }
        to:
          # saving text in the clipboard required, since tab->up->r only works
          # with empty text input field. need to preserve previous clipboard then
          - shell_command: pbpaste | pbcopy -pboard ruler
          - { key_code: a, modifiers: [command] }
          - { key_code: x, modifiers: [command] }
          # reply
          - { key_code: vk_none, hold_down_milliseconds: 30 }
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: r
          # restore previous text & previous clipboard
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - shell_command: pbpaste -pboard ruler | pbcopy
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # scroll to bottom (mnemonic: vim's G)
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 40 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 30 }
          - key_code: escape
          - key_code: escape
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
  #───────────────────────────────────────────────────────────────────────
  - description: "(Apps) Script Editor"
    manipulators:
      # Quit without saving
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
      # toggle syntax (Javascript <-> Applescript)
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [option] } }
        to:
          - shell_command: |
              osascript -l JavaScript -e '
                const currentDoc = Application("Script Editor").documents()[0]
                const currentLang = currentDoc.language().name();
                const otherLang = currentLang === "AppleScript" ? "JavaScript" : "AppleScript";
                const otherLangObj = Application("Script Editor").languages.byName(otherLang);
                currentDoc.language = otherLangObj;
                currentDoc.checkSyntax();
              '
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Calendar"
    manipulators:
      # Toggle sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          # needs UI element, since name of the menu items changes
          # howto inspect UI-elements https://www.sudoade.com/gui-scripting-with-applescript/
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Calendar"
                  click radio button 1 of radio group 1 of group 1 of toolbar 1 of window 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.iCal$] }]
  - description: "(Apps) Reminder"
    manipulators:
      # Toggle sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [command, option] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.reminders$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Mimestream"
    manipulators:
      # toggle side bar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [command, control] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # toggle search bar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # Open in Gmail
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - { key_code: g, modifiers: [command, control] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Catch"
    manipulators:
      # fix closing preferences window
      - type: basic
        from: { key_code: w, modifiers: { mandatory: [command] } }
        to:
          - { key_code: return_or_enter }
        conditions:
          [
            {
              type: frontmost_application_if,
              bundle_identifiers: [^org\.giorgiocalderolla\.Catch$],
            },
          ]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) CleanShot X"
    manipulators:
      # INFO https://cleanshot.com/docs/api
      # ⌘⇧4 (screenshot button): tap to screenshot, hold to annotate last screenshot
      - type: basic
        from: { key_code: "4", modifiers: { mandatory: [shift, command] } }
        to_if_alone:
          - shell_command: |
              # without CleanShot, fallback to macOS' builtin screenshot app
              if mdfind "kMDItemKind == 'Application'" | grep -q "CleanShot X" ; then
                open -g "cleanshot://capture-area"
              else
                screencapture -ic # capture area to clipboard
              fi
        to_if_held_down:
          - shell_command: open -g "cleanshot://record-screen"
