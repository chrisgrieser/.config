# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: App-specific bindings
rules:
  #─────────────────────────────────────────────────────────────────────────────
  # replaces "hide cursor" chrome extension https://chromewebstore.google.com/detail/hide-mouse-pointer/lbbedlldjinglbnfghakndfbagkolfdf
  - description: "j (Browser): also hides cursor for vimium plugin"
    manipulators:
      - type: basic
        from: { key_code: j }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.brave.Browser] }
          - { type: variable_unless, name: LEADER_ACTIVE, value: true }
        to:
          - key_code: j
        to_after_key_up: # only on key-up to allow repeating `j`
          - software_function: { set_mouse_cursor_position: { x: 0%, "y": 90%, screen: 0 } }
  #─────────────────────────────────────────────────────────────────────────────
  - description: (Apps) Microsoft Office
    manipulators:
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                    click menu item "Comment" of menu "Insert" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com.microsoft.Word] }]
      # toggle tracked changes
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                    click menu item "Markup" of menu "View" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com.microsoft.Word] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: (Apps) Finder
    manipulators:
      # cmd+q -> close all windows
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - shell_command: osascript -e 'tell application "Finder" to close every window'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com.apple.finder] }]
      # cmd+enter -> goto Desktop/dotfiles
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                set theDesktop to POSIX path of (path to desktop folder as string)
                set dotfiles to (POSIX path of (path to home folder as string) & ".config/")

                tell application "Finder"
                  -- `Finder window` instead of win ensures regular window, not QuickLook or prompt
                  if not (front Finder window exists) then return

                  set currentPath to POSIX path of (target of front Finder window as alias)
                  set toGoto to theDesktop
                  if (currentPath is theDesktop) then set toGoto to dotfiles
                  set target of front Finder window to (toGoto as POSIX file)
                end tell
              '
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com.apple.finder] }]
      # cmd+shift+v -> goto [V]aults
      - type: basic
        from: { key_code: v, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  set vaultFolder to (path to home folder as string) & "Vaults"
                  set target of front Finder window to vaultFolder
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com.apple.finder] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: (Apps) Highlights
    manipulators:
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [net.highlightsapp.universal] }
      # Image Tool
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [command] } }
        to:
          - { key_code: i, modifiers: [command, control] }
          - { key_code: "7", modifiers: [command, control] } # purple borders
          - shell_command: |
              "$HOME/.config/karabiner/assets/notificators/highlights-notificator" \
                  --title "Highlights" --message "Image 🖼️"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [net.highlightsapp.universal]
  #─────────────────────────────────────────────────────────────────────
  - description: (Apps) Neovide
    manipulators:
      # cmd+h -> cmd+5 for the heading incrementor
      # PENDING https://github.com/neovide/neovide/issues/3099
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [command] } }
        to:
          - { key_code: "5", modifiers: [command] }
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: (Apps) Brave
    manipulators:
      # Remove bookmark
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: d, modifiers: [command] }
          - key_code: tab
          - key_code: tab
          - key_code: spacebar
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.brave.Browser] }
      # shift+cmd+,: extension settings
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'chrome://extensions/'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.brave.Browser] }
      # ctrl+c: Copy last code block (for ChatGPT)
      - type: basic
        from: { key_code: c, modifiers: { mandatory: [control] } }
        to:
          - { key_code: comma, modifiers: [command, shift] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.brave.Browser] }
      # dev tools -> element picker
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: c, modifiers: [option, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.brave.Browser] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: (Apps) Obsidian
    manipulators:
      # Dev Tools & Element Picker
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [option, command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: c, modifiers: [shift, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [md.obsidian] }
  #─────────────────────────────────────────────────────────────────────────────
  # DOCS https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts
  - description: (Apps) Slack
    manipulators:
      # go to next unread message
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [option, shift] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.tinyspeck.slackmacgap] }]
      # back in history
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - { key_code: semicolon, modifiers: [command] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.tinyspeck.slackmacgap] }]
      # forward in history
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - { key_code: quote, modifiers: [command] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.tinyspeck.slackmacgap] }]
      # next channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - { key_code: down_arrow, modifiers: [option] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.tinyspeck.slackmacgap] }]
      # prev channel
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [option] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.tinyspeck.slackmacgap] }]
  #─────────────────────────────────────────────────────────────────────────────
  # REQUIRED compatibility mode to recognize Alfred as frontmost app
  - description: "(Apps) Alfred: Select with <Tab>"
    manipulators:
      - type: basic
        from: { key_code: tab }
        to:
          - { key_code: down_arrow }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.runningwithcrayons.Alfred] }]
      - type: basic
        from: { key_code: tab, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: up_arrow }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [com.runningwithcrayons.Alfred] }
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "9", modifiers: [command] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [com.runningwithcrayons.Alfred-Preferences]
  #───────────────────────────────────────────────────────────────────────
  - description: "(Apps) Script Editor"
    manipulators:
      # Quit without saving
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.apple.ScriptEditor] }]
      # toggle syntax (Javascript <-> Applescript)
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [option] } }
        to:
          - shell_command: |
              osascript -l JavaScript -e '
                const currentDoc = Application("Script Editor").documents()[0]
                const currentLang = currentDoc.language().name();
                const otherLang = currentLang === "AppleScript" ? "JavaScript" : "AppleScript";
                const otherLangObj = Application("Script Editor").languages.byName(otherLang);
                currentDoc.language = otherLangObj;
                currentDoc.checkSyntax();
              '
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.apple.ScriptEditor] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Mimestream"
    manipulators:
      # Open in Gmail
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - { key_code: g, modifiers: [command, control] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.mimestream.Mimestream] }]
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [com.mimestream.Mimestream] }]
