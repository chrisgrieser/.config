title: "App-specific-Bindings"
homepage: https://github.com/chrisgrieser/dotfiles/karabiner
rules:
  - description: "(Apps) Zoom"
    manipulators:
      # Toggle Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: h
            modifiers: [command, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^us\.zoom\.xos$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Microsoft & Google Office"
    manipulators:
      # export
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - key_code: s
            modifiers: [command, shift]
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.microsoft\.Word$
              - ^com\.microsoft\.Excel$
              - ^com\.microsoft\.Powerpoint$
      # Comment in MS Word
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Microsoft Word"
                    set frontmost to true
                    click menu item "Comment" of menu "Insert" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # Toggle Sidebar MS Word
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  set frontmost to true
                  click menu item "Thumbnail" of menu of menu item "Sidebar" of menu "View" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
        # Zoom in Word: cmd+plus / cmd+minus
      - type: basic
        from: { key_code: "close_bracket", modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  set frontmost to true
                  click menu item "Thumbnail" of menu of menu item "Sidebar" of menu "View" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # Comment in Google Docs
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - key_code: m
            modifiers: [command, option]
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com.brave.Browser.app.mpnpojknpmmopombnjdcgaaiekajbnjb
      # Footnote in Google Docs
      - type: basic
        from: { key_code: non_us_backslash, modifiers: { mandatory: [command] } }
        to:
          - key_code: f
            modifiers: [command, option]
        conditions:
          [
            {
              type: frontmost_application_if,
              bundle_identifiers: [^com.brave.Browser.app.mpnpojknpmmopombnjdcgaaiekajbnjb],
            },
          ]
  - description: "(Apps) Highlights"
    manipulators:
      # cmd+l = show in Explorer
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          # 1% assuming hidden menubar, otherwise 3-4%
          - software_function: { set_mouse_cursor_position: { x: 45%, y: 1%, screen: 0 } }
          - pointing_button: button2
          - key_code: down_arrow
          - key_code: down_arrow # assuming hidden menubar, otherwise only 1x arrow down
          - key_code: return_or_enter
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Back & Forward
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Back" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Forward" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Right Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: "2"
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to: [{ key_code: t, modifiers: [command, option] }]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Image Tool
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [command] } }
        to:
          - key_code: i
            modifiers: [command, control]
          - key_code: "7" # purple borders
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Image \U0001F5BC️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Red Underline Tool
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: u
            modifiers: [command, control]
          - key_code: "1"
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Underline \U0001F58D️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Comment Tool
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - key_code: n
            modifiers: [command, control]
          - key_code: "3" # yellow
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Comment \U0001F5E3️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Yellow Highlight Tool
      - type: basic
        from: { key_code: z, modifiers: { mandatory: [command] } } # z and y switched on German keyboard
        to:
          - key_code: h
            modifiers: [command, control]
          - key_code: "3"
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Yellow Highlight \U0001F7E8\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
  #───────────────────────────────────────────────────────────────────────
  - description: "(Apps) Browser"
    manipulators:
      # open vimium-c settings
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, option] } }
        to:
          - shell_command: open "chrome-extension://hfjbmagddngcpeloejdejnfgbamkjaeg/pages/options.html"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: 
              - ^com\.brave\.Browser
              - ^com\.vivaldi\.Vivaldi
      # open extensions
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open "chrome://settings"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: 
              - ^com\.brave\.Browser
      # open dev tools
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [command, option] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: c, modifiers: [command, shift] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.brave\.Browser] # no $ to also work in PWAs
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [command, option] }
          - { key_code: vk_none, hold_down_milliseconds: 1000 }
          - { key_code: c, modifiers: [command, shift] }
          - { key_code: vk_none, hold_down_milliseconds: 500 }
          - { key_code: tab, modifiers: [command] } # switch to other window, since Vivaldi dev tool is always detachedd
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.vivaldi\.Vivaldi] # no $ to also work in PWAs
  - description: "(Apps) YouTube/Browser: ⇧⌘+P → Picture-in-Picture Mode"
    manipulators:
      - type: basic
        from: { key_code: p, modifiers: { mandatory: [shift, command] } }
        to:
          - software_function: { set_mouse_cursor_position: { x: 50%, y: 50%, screen: 0 } }
          - pointing_button: button2
          - pointing_button: button2
          - { key_code: vk_none, hold_down_milliseconds: 200 }
          - key_code: p
          - key_code: return_or_enter
          - { key_code: vk_none, hold_down_milliseconds: 500 }
          - { key_code: h, modifiers: [command] }
        conditions:
          - type: frontmost_application_if
            file_paths: [YouTube, Brave Browser, Vivaldi]
  - description: "(Apps) Hammerspoon: ⌘Q → Close instead of Quit, ⌘K → Clear Console, ⌘⇧C → copy last command"
    manipulators:
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to: [{ key_code: w, modifiers: [command] }]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: open 'hammerspoon://clear-console'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
      - type: basic
        from: { key_code: c, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'hammerspoon://copy-last-command'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
  - description: "(App) Slack"
    # https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts
    # INFO: cmd+e for inline code is in the Discord-Section
    manipulators:
      # go to next unread message
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: down_arrow
            modifiers: [option, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # toggle sidebar
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - key_code: d
            modifiers: [command, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # back in history
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - key_code: semicolon
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # forward in history
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - key_code: quote
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # next channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # prev channel
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # react to top msg with emoji
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [command] } }
        to:
          - { key_code: tab, modifiers: [shift] }
          - {key_code: vk_none, hold_down_milliseconds: 20}
          - key_code: r
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(App) Alfred Preferences: cmd+0 as cmd+9"
    manipulators:
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "9", modifiers: [command] }
        conditions:
          [{ type: frontmost_application_if, bundle_identifiers: [^com.runningwithcrayons.Alfred-Preferences$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(App) Lire: sidebar + vim controls"
    manipulators:
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [command, control] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^maccatalyst\.com\.lireapp\.macOS$] }
      - type: basic
        from: { key_code: j }
        to:
          - key_code: "right_arrow"
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^maccatalyst\.com\.lireapp\.macOS$] }
      - type: basic
        from: { key_code: k }
        to:
          - key_code: "left_arrow"
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^maccatalyst\.com\.lireapp\.macOS$] }
      - type: basic # open in browser in background
        from: { key_code: l }
        to:
          - key_code: "v"
          - {key_code: vk_none, hold_down_milliseconds: 120}
          - {key_code: "tab", modifiers: [command]}
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^maccatalyst\.com\.lireapp\.macOS$] }
      - type: basic # full text
        from: { key_code: o }
        to:
          - key_code: "g"
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^maccatalyst\.com\.lireapp\.macOS$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(App) Discord"
    manipulators:
      # HACK ctrl-h & ctrl-l to go back / forward a channel cannot be mapped
      # directly in Discord, since they seem to capture things.
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - key_code: left_arrow
            modifiers: [control]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - key_code: right_arrow
            modifiers: [control]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go to next [u]nread
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [command, shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # inline cod[e]
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command] } }
        to:
          - shell_command: pbpaste | pbcopy -pboard ruler # move current clipboard to alt clipboard
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - shell_command: pbcopy < /dev/null # empty the standard clipboard
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - { key_code: x, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 150 }
          - { key_code: equal_sign, modifiers: [shift] }
          - { key_code: equal_sign, modifiers: [shift] }
          - key_code: left_arrow
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - shell_command: pbpaste -pboard ruler | pbcopy # restore previous cb
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.hnc\.Discord$
              - ^com\.tinyspeck\.slackmacgap$
              - ^com\.brave\.Browser$ # useful for reddit
              - ^com\.vivaldi\.Vivaldi$
      # [r]eply to msg above
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command] } }
        to:
          # saving text in the clipboard required, since tab->up->r only works
          # with empty text input field. need to preserve previous clipboard then
          - shell_command: pbpaste | pbcopy -pboard ruler
          - { key_code: a, modifiers: [command] }
          - { key_code: x, modifiers: [command] }
          # reply
          - { key_code: vk_none, hold_down_milliseconds: 30 }
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: r
          # restore previous text & previous clipboard
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - shell_command: pbpaste -pboard ruler | pbcopy
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # emoji reaction to msg above
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - {key_code: vk_none, hold_down_milliseconds: 50}
          - key_code: up_arrow
          - {key_code: vk_none, hold_down_milliseconds: 70}
          - key_code: close_bracket
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go 3 up [t]
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # next/prev channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [shift, option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # scroll to bottom (mnenonic: vim's G)
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 30
          - key_code: escape
          - key_code: escape
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
  - description: "(Apps) Script Editor"
    manipulators:
      # Quick Closing skipping save prompt
      # for movement with tab required: `defaults write NSGlobalDomain AppleKeyboardUIMode -int 3`
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - key_code: vk_none
            hold_down_milliseconds: 500
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 150
          - key_code: spacebar
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
  - description: "(Apps) Drafts"
    manipulators:
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [shift, command] } }
        to:
          - shell_command: |
              osascript -e 'tell application "System Events"
                tell process "Drafts"
                  click menu item "Manage Actions..." of menu "Actions" of menu bar 1
                end tell
              end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.agiletortoise\.Drafts-OSX$] }]
      # Archive
      - type: basic
        from: { key_code: delete_or_backspace, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e 'tell application "System Events"
                tell process "Drafts"
                  click menu item "Move to Archive" of menu "File" of menu bar 1
                end tell
              end tell'
              afplay "/System/Library/Sounds/Tink.aiff"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.agiletortoise\.Drafts-OSX$] }]
      # Next/Prev Draft
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e 'tell application "System Events"
                tell process "Drafts"
                  click menu item "Next Draft" of menu "File" of menu bar 1
                end tell
              end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.agiletortoise\.Drafts-OSX$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e 'tell application "System Events"
                tell process "Drafts"
                  click menu item "Previous Draft" of menu "File" of menu bar 1
                end tell
              end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.agiletortoise\.Drafts-OSX$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) BusyCal"
    manipulators:
      # Sidebars
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      # Quick event creation with Time-Parsing instead of normal event
      - type: basic
        from: { key_code: "n", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "n", modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Mimestream"
    manipulators:
      # snoozing consistent with snoozing in Drafts
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [command, shift] } }
        to:
          - key_code: s
            modifiers: [command, option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # toggle toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
  - description: "(Apps) Alacritty: cmd+l → open location"
    manipulators:
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          - key_code: "l"
            modifiers: [control]
        conditions: [{ type: frontmost_application_if, file_paths: [alacritty$] }]
  - description: "(Apps) Alacritty/Brave: shift+space → daw"
    manipulators:
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - key_code: d
          - key_code: a
          - key_code: w
        conditions:
          - type: frontmost_application_if
            file_paths: [alacritty$, Brave Browser$] # brave for surfing keys ace editor
  - description: "(Apps) Neovide: Fix <S-Space> and cmd+q → ZZ"
    manipulators:
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: return_or_enter, modifiers: [option, shift] }
        conditions:
          - type: frontmost_application_if
            file_paths: ["[Nn]eovide"]
      # cmd+q -> <Esc>ZZ (does not skip pre-quit triggers)
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          # so cursor position and changes are saved
          - shell_command: echo "vim.cmd.wq()" >"/tmp/nvim-automation"
        conditions:
          - type: frontmost_application_if
            file_paths: ["[Nn]eovide"]
  #─────────────────────────────────────────────────────────────────
  - description: "(Apps) Cleanshot"
    manipulators:
      # INFO https://cleanshot.com/docs/api
      # copy to clipboard and quit
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^pl\.maketheweb\.cleanshotx$] }]
      # cmd+shift+4 once to screenshot, a second time to annotate. Hold to force
      # new screenshot
      - type: basic
        from: { key_code: "4", modifiers: { mandatory: [shift, command] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                if ((clipboard info) as string) contains "picture" then
                  open location "cleanshot://open-from-clipboard"
                else
                  open location "cleanshot://capture-area"
                end if'
        to_if_held_down:
          - shell_command: open "cleanshot://capture-area"
        parameters:
          basic.to_if_alone_timeout_milliseconds: 500
          basic.to_if_held_down_threshold_milliseconds: 500
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [shift, command] } }
        to:
          - shell_command: open "cleanshot://record-screen"
#─────────────────────────────────────────────────────────────────
