title: "App-specific-Bindings"
rules:
  - description: "(Apps) Zoom"
    manipulators:
      # Toggle Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: h
            modifiers: [command, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^us\.zoom\.xos$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Microsoft Office"
    manipulators:
      # export
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - key_code: s
            modifiers: [command, shift]
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.microsoft\.Word$
              - ^com\.microsoft\.Excel$
              - ^com\.microsoft\.Powerpoint$
      # Comment in MS Word
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Microsoft Word"
                    set frontmost to true
                    click menu item "Comment" of menu "Insert" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
      # Toggle Sidebar MS Word
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Microsoft Word"
                  set frontmost to true
                  click menu item "Thumbnail" of menu of menu item "Sidebar" of menu "View" of menu bar 1
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.microsoft\.Word$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Finder"
    manipulators:
      # Finder: Sidebars
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: s, modifiers: [control, command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [com\.apple\.finder] }]

  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Highlights"
    manipulators:
      # cmd+l = Show in Finder
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [command] } }
        to:
          # 1% assuming hidden menubar, otherwise 3-4%
          - software_function: { set_mouse_cursor_position: { x: 60%, y: 1%, screen: 0 } }
          - pointing_button: button2
          - software_function: { set_mouse_cursor_position: { x: 10%, y: 1%, screen: 0 } } # prevent hover selection
          - key_code: down_arrow # assuming hidden menubar, otherwise only 1x arrow down
          - key_code: return_or_enter
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Back & Forward
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Back" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Highlights"
                    set frontmost to true
                    click menu item "Forward" of menu "Go" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Right Sidebar
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - key_code: "2"
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to: [{ key_code: t, modifiers: [command, option] }]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Image Tool
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [command] } }
        to:
          - key_code: i
            modifiers: [command, control]
          - key_code: "7" # purple borders
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Image \U0001F5BC️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Red Underline Tool
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: u
            modifiers: [command, control]
          - key_code: "1"
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Underline \U0001F58D️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Comment Tool
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - key_code: n
            modifiers: [command, control]
          - key_code: "3" # yellow
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Comment \U0001F5E3️\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
      # Yellow Highlight Tool
      - type: basic
        from: { key_code: z, modifiers: { mandatory: [command] } } # z and y switched on German keyboard
        to:
          - key_code: h
            modifiers: [command, control]
          - key_code: "3"
            modifiers: [command, control]
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Yellow Highlight \U0001F7E8\"'"
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }]
  #───────────────────────────────────────────────────────────────────────
  - description: "(Apps) Brave"
    manipulators:
      # Remove bookmark
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: d, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - key_code: tab
          - key_code: tab
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - key_code: spacebar
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
      # shift+cmd+,: extension settings
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'chrome://extensions/'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
  #─────────────────────────────────────────────────────────────────────────────
  # DEV TOOLS -> ELEMENT PICKER
  - description: "(Apps) Dev Tools"
    manipulators:
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: i, modifiers: [option, command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: c, modifiers: [shift, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^md\.obsidian$] }
      - type: basic
        from: { key_code: escape, modifiers: { mandatory: [control] } }
        to:
          - { key_code: c, modifiers: [option, command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com.brave.Browser$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Hammerspoon: ⌘Q → Close instead of Quit, ⌘K → Clear Console, ⌘⇧C → copy last command"
    manipulators:
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to: [{ key_code: w, modifiers: [command] }]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command] } }
        to:
          - shell_command: open 'hammerspoon://clear-console'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
      - type: basic
        from: { key_code: c, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: open 'hammerspoon://copy-last-command'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^org\.hammerspoon\.Hammerspoon$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Slack"
    # https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts
    manipulators:
      # go to next unread message
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - key_code: down_arrow
            modifiers: [option, shift]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # back in history
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - key_code: semicolon
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # forward in history
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - key_code: quote
            modifiers: [command]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # next channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
      # prev channel
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.tinyspeck\.slackmacgap$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Alfred"
    manipulators:
      # select with tab
      # REQUIRES compatibility mode to recognize Alfred as frontmost app
      - type: basic
        from: { key_code: tab }
        to:
          - { key_code: down_arrow }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.runningwithcrayons\.Alfred$] }]
      - type: basic
        from: { key_code: tab, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: up_arrow }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.runningwithcrayons\.Alfred$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Discord"
    manipulators:
      # HACK ctrl-h & ctrl-l to go back / forward a channel cannot be mapped
      # directly in Discord, since they seem to capture things.
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to:
          - { key_code: left_arrow, modifiers: [control] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - { key_code: right_arrow, modifiers: [control] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go to next [u]nread
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [command] } }
        to:
          - { key_code: down_arrow, modifiers: [command, shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # [r]eply to msg above
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command] } }
        to:
          # saving text in the clipboard required, since tab->up->r only works
          # with empty text input field. need to preserve previous clipboard then
          - shell_command: pbpaste | pbcopy -pboard ruler
          - { key_code: a, modifiers: [command] }
          - { key_code: x, modifiers: [command] }
          # reply
          - { key_code: vk_none, hold_down_milliseconds: 30 }
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 80 }
          - key_code: r
          # restore previous text & previous clipboard
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - shell_command: pbpaste -pboard ruler | pbcopy
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # emoji reaction to msg above
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - { key_code: vk_none, hold_down_milliseconds: 50 }
          - key_code: up_arrow
          - { key_code: vk_none, hold_down_milliseconds: 70 }
          - key_code: close_bracket
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # go 3 up [t]
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # next/prev channel
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - key_code: down_arrow
            modifiers: [shift, option]
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [shift, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
      # scroll to bottom (mnenonic: vim's G)
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [command] } }
        to:
          - key_code: tab
          - key_code: vk_none
            hold_down_milliseconds: 40
          - key_code: up_arrow
          - key_code: vk_none
            hold_down_milliseconds: 30
          - key_code: escape
          - key_code: escape
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.hnc\.Discord$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Script Editor"
    manipulators:
      # Quit without saving
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 400 }
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
      # toggle syntax (Javascript <-> Applescript)
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [option] } }
        to:
          - shell_command: |
              osascript -l JavaScript -e '
                const se = Application("Script Editor");
                const currentDoc = se.documents()[0]
                const currentLang = currentDoc.language().name();
                const otherLang = currentLang === "AppleScript" ? "JavaScript" : "AppleScript";
                const otherLangObj = se.languages.byName(otherLang);
                currentDoc.language = otherLangObj;
                currentDoc.checkSyntax();
              '
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apple\.ScriptEditor] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) BusyCal"
    manipulators:
      # Sidebars
      - type: basic
        from: { key_code: "1", modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      - type: basic
        from: { key_code: "0", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
      # Quick event creation with Time-Parsing instead of normal event
      - type: basic
        from: { key_code: "n", modifiers: { mandatory: [command] } }
        to:
          - { key_code: "n", modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.busymac\.busycal] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Mimestream"
    manipulators:
      # Toggle toolbar
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [command] } }
        to:
          - { key_code: t, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # snoozing consistent with snoozing hotkey in SideNotes
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [command, shift] } }
        to:
          - key_code: b
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
      # Open in Gmail
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - { key_code: g, modifiers: [command, control] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Cleanshot"
    manipulators:
      # INFO https://cleanshot.com/docs/api
      # ⌘⇧4 (screenshot button): tap to screenshot, hold for OCR
      - type: basic
        from: { key_code: "4", modifiers: { mandatory: [shift, command] } }
        to_if_alone:
          - shell_command: open -g "cleanshot://capture-area"
        to_if_held_down:
          - shell_command: |
              osascript -e 'display notification "" with title "OCR Screenshot"'
              open -g "cleanshot://capture-text"
      # screenshot button + bulb-button
      - type: basic
        from: { key_code: "f13", modifiers: { mandatory: [shift, command] } }
        to:
          - shell_command: open -g "cleanshot://record-screen"
  # INFO using Shottr at mother device, since no 3rd license for CleanShot
  # make hotkeys consistent with CleanShot though (cmd+s -> cmd+shift+c)
  - description: "(Apps) Shottr"
    manipulators:
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [command] } }
        to:
          - { key_code: c, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^pl\.maketheweb\.cleanshotx$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Pixelmator"
    manipulators:
      # Export
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Pixelmator Pro"
                    set frontmost to true
                    click menu item "Export…" of menu "File" of menu bar 1
                  end tell
                end tell'
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.pixelmatorteam\.pixelmator\.x$] }]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Apps) Sidenotes"
    manipulators:
      # INFO https://www.apptorium.com/sidenotes/articles/keyboard-shortcuts
      # cmd+enter: switch to last folder
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [command] } }
        to:
          - { key_code: o, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # ctrl+j/k: up/down a note
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [control] } }
        to:
          - { key_code: down_arrow, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [control] } }
        to:
          - { key_code: up_arrow, modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # cmd+alt+j/k: move a note up/down
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [command, option] } }
        to:
          - { key_code: down_arrow, modifiers: [command, option, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [command, option] } }
        to:
          - { key_code: up_arrow, modifiers: [command, option, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # alt+s: Change to Code Syntax
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [option] } }
        to:
          - { key_code: "3", modifiers: [command, option] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # cmd+h: Heading
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [command] } }
        to:
          - { key_code: h, modifiers: [command, shift] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # cmd+4: List
      - type: basic
        from: { key_code: "4", modifiers: { mandatory: [command] } }
        to:
          - { key_code: l, modifiers: [command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
      # cmd+y: Highlight
      - type: basic
        # z & y switched due to German keyboard
        from: { key_code: "z", modifiers: { mandatory: [command] } }
        to:
          - { key_code: m, modifiers: [command] }
        conditions: [{ type: frontmost_application_if, bundle_identifiers: [^com\.apptorium\.SideNotes-paddle$] }]
anchors:
  - conditions:
      - &leader-active
        type: variable_if
        name: LEADER_ACTIVE
        value: true
      - &leader-inactive
        type: variable_unless
        name: LEADER_ACTIVE
        value: true
  - to:
      - &deactivate-leader
        set_variable:
          name: LEADER_ACTIVE
          value: false
      - &activate-leader
        set_variable:
          name: LEADER_ACTIVE
          value: true
      - &remove-notice
        set_notification_message:
          id: leader-notice
          text: ""
      - &set-notice
        set_notification_message:
          id: leader-notice
          text: 🔺 Leader
#───────────────────────────────────────────────────────────────────────────────
  - description: "🔺App Switcher Leader"
    manipulators:
      - type: basic
        from: { key_code: left_control }
        to:
          - key_code: left_control
        conditions:
          - *leader-inactive
        to_if_alone:
          - *activate-leader
          - *set-notice
      # 2x L-Ctrl: Toggle Sidenotes
      - type: basic
        from: { key_code: left_control }
        conditions: [*leader-active]
        to_if_alone:
          # cmd+opt+ctrl+s in the SideNotes Settings set to toggle
          - { key_code: s, modifiers: [command, option, control] }
          - *deactivate-leader
          - *remove-notice
      # Cancel (Hyper/Esc)
      - type: basic
        from: { key_code: caps_lock }
        conditions: [*leader-active]
        to_if_alone:
          - *deactivate-leader
          - *remove-notice
  #─────────────────────────────────────────────────────────────────────────────
  - description: "🔺 App Switcher Actions"
    manipulators:
      # [c]alendar: BusyCal
      - type: basic
        from: { key_code: c }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'BusyCal'
          - *deactivate-leader
          - *remove-notice
      # [ö] (looks like tweetbot): Twitter/Mastodon
      - type: basic
        from: { key_code: semicolon } # ö on German keyboard
        conditions:
          - *leader-active
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
        to:
          - shell_command: |
              source $HOME/.zshenv
              if [[ "$TICKER_APP" == "Twitter" ]]; then
                open -a "Twitter"
              else
                open 'https://pkm.social/notifications'
              fi
          - *deactivate-leader
          - *remove-notice
      # [,]: System Preferences
      - type: basic
        from: { key_code: comma }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'System Preferences'
          - *deactivate-leader
          - *remove-notice
      # [O]bsidian
      - type: basic
        from: { key_code: o }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Obsidian'
          - *deactivate-leader
          - *remove-notice
      # [D]iscord
      - type: basic
        from: { key_code: d }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Discord'
          - *deactivate-leader
          - *remove-notice
      # [Z]oom
      - type: basic
        # switched y and z due to German Keyboard
        from: { key_code: "y" }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'zoom.us'
          - *deactivate-leader
          - *remove-notice
      # [n]ewsreader
      - type: basic
        from: { key_code: "n" }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'ReadKit' || open 'https://www.inoreader.com/all_articles'
          - *deactivate-leader
          - *remove-notice
      # [S]lack
      - type: basic
        from: { key_code: s }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Slack'
          - *deactivate-leader
          - *remove-notice
      # [q]: Script Editor
      - type: basic
        from: { key_code: q }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Script Editor'
          - *deactivate-leader
          - *remove-notice
      # [m]imestream
      - type: basic
        from: { key_code: m }
        conditions: [*leader-active]
        to:
          - shell_command: source $HOME/.zshenv && open -a "$MAIL_APP"
          - *deactivate-leader
          - *remove-notice
      # [b]rowser
      - type: basic
        from: { key_code: b }
        conditions: [*leader-active]
        to:
          - shell_command: source $HOME/.zshenv && open -a "$BROWSER_APP"
          - *deactivate-leader
          - *remove-notice
      # [B]rowser & re-open last tab (shift)
      - type: basic
        from: { key_code: b, modifiers: { mandatory: [shift] } }
        conditions: [*leader-active]
        to:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "re-open-last-tab" in workflow "com.apple.alfred.workflow.chromium-hist"'
          - *deactivate-leader
          - *remove-notice
      # [f]: Finder
      - type: basic
        from: { key_code: f }
        conditions: [*leader-active]
        to:
          - *deactivate-leader
          - *remove-notice
          - shell_command: open -a "Finder"
      # ⌫ = Open Trash
      - type: basic
        from: { key_code: delete_or_backspace }
        conditions: [*leader-active]
        to:
          - *deactivate-leader
          - *remove-notice
          # to open the "unified" trash (iCloud trash + user trash), needs to use
          # AppleScript and not `open "$HOME/.Trash"`
          - shell_command: | 
              osascript -e'
                tell application "Finder"
                  activate
                  open the trash
                end tell
                tell application "System Events" to tell process "Finder"
                  set frontmost to true
                  click menu item "as List" of menu "View" of menu bar 1
                end tell
                '
      # [h]ammerspoon console
      - type: basic
        from: { key_code: h }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Hammerspoon'
          - *deactivate-leader
          - *remove-notice
      # [k]arabiner-EventViewer
      - type: basic
        from: { key_code: k }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Karabiner-EventViewer'
          - *deactivate-leader
          - *remove-notice
      # [K]arabiner-Elements (shift)
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [shift] } }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Karabiner-Elements'
          - *deactivate-leader
          - *remove-notice
      # [y]ouTube
      - type: basic
        from: { key_code: z } # switched y and z due to German Keyboard
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'YouTube' || open 'https://www.youtube.com/'
          - *deactivate-leader
          - *remove-notice
      # [a]lfred Preferences
      - type: basic
        from: { key_code: a }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Alfred Preferences'
          - *deactivate-leader
          - *remove-notice
      # [p]df Reader: Highlights
      - type: basic
        from: { key_code: p }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Highlights'
          - *deactivate-leader
          - *remove-notice
      # [g]oogle Docs
      - type: basic
        from: { key_code: g }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Docs' || open -a "Google Docs" || open 'https://docs.google.com/'
          - *deactivate-leader
          - *remove-notice
      # [v]ideo: IINA
      - type: basic
        from: { key_code: v }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'IINA'
          - *deactivate-leader
          - *remove-notice
      # [Esc] Activity Monitor
      - type: basic
        from: { key_code: escape }
        conditions: [*leader-active]
        to:
          - shell_command: open -a 'Activity Monitor'
          - *deactivate-leader
          - *remove-notice
      # [w]hatsApp
      - type: basic
        from: { key_code: w }
        conditions: [*leader-active]
        to:
          - shell_command: open 'https://web.whatsapp.com/'
          - *deactivate-leader
          - *remove-notice
      # [t]elegram
      - type: basic
        from: { key_code: t }
        conditions: [*leader-active]
        to:
          - shell_command: open 'https://web.telegram.org/a/'
          - *deactivate-leader
          - *remove-notice
      # m[e]ssenger
      - type: basic
        from: { key_code: e }
        conditions: [*leader-active]
        to:
          - shell_command: open 'https://www.messenger.com/'
          - *deactivate-leader
          - *remove-notice
      # [r]eddit
      - type: basic
        from: { key_code: r }
        conditions: [*leader-active]
        to:
          - shell_command: |
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "browse" in workflow "de.chris-grieser.reddit-browser"'
          - *deactivate-leader
          - *remove-notice
      # [.]: Emoji Picker
      - type: basic
        from: { key_code: period }
        conditions: [*leader-active]
        to:
          - { key_code: spacebar, modifiers: [control, command] }
          - *deactivate-leader
          - *remove-notice
# INFO has to come before finder-vim-mode.yaml itself
  - description: "Addons for Alfred"
    manipulators:
      # FIX for <Esc> -> f18 binding
      # Alfred Custom Clipboard Search & screenshot history (cleanshot)
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
          - set_variable:
              name: FINDER_INSERT_MODE
              value: true
          - set_variable:
              name: FINDER_ALFRED_ACTIVE
              value: true
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.apple\.finder$]
          - type: variable_unless
            name: FINDER_ALFRED_MODE
            value: true
          - type: variable_unless
            name: FINDER_INSERT_MODE
            value: true
      # abort Alfred Clipboard
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
          - set_variable:
              name: FINDER_INSERT_MODE
              value: false
          - set_variable:
              name: FINDER_ALFRED_ACTIVE
              value: false
              # INFO no idea why, but setting a conditions here breaks this rule.
              # Maybe due to recursion. But by placing this rule last, it only
              # gets triggered if the other one does not get triggered before,
              # which also works
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"

      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────

            #─────────────────────────────────────────────────────────────────────────
      # abort Alfred Clipboard
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
          - set_variable:
              name: FINDER_INSERT_MODE
              value: false
          - set_variable:
              name: FINDER_ALFRED_ACTIVE
              value: false
              # INFO no idea why, but setting a conditions here breaks this rule.
              # Maybe due to recursion. But by placing this rule last, it only
              # gets triggered if the other one does not get triggered before,
              # which also works
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"

  #─────────────────────────────────────────────────────────────────────────────
  #─────────────────────────────────────────────────────────────────────────────

  - description: "Extra keys"
    manipulators:
      # B: Signature ( append "_CG")
      - type: basic
        from: { key_code: b, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (item 1 of (get selection) as text)' | sed 's|/$||' )
              # bash expansion does not work in karabiner
              filepathNoExt=$(echo "$selection" | rev | cut -d. -f2- | rev)
              ext=$(echo "$selection" | rev | cut -d. -f1 | rev)
              last3CharsOfFilename=$(echo "$filepathNoExt" | rev | cut -c-3 | rev)
              if [[ "$last3CharsOfFilename" == "_CG" ]]; then
                nameWithoutSig=$(echo "$filepathNoExt" | rev | cut -c4- | rev)
                newName="$nameWithoutSig.$ext"
              else
                newName="${filepathNoExt}_CG.$ext"
              fi
              mv -n "$selection" "$newName"
              open -R "$newName" # forces refresh of Finder
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.apple\.finder$]
          - type: variable_unless
            name: FINDER_FIND_MODE
            value: true
          - type: variable_unless
            name: FINDER_INSERT_MODE
            value: true
      # Z (German): Open in Betterzip
      - type: basic
        from: { key_code: y, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (item 1 of (get selection) as text)')
              # bash expansion does not work in karabiner
              ext=$(echo "$selection" | rev | cut -d. -f1 | rev)

              if [[ "$ext" != "zip" ]]; then
                display notification "" with title "⚠️ File not a zip file." subtitle "Finder Vim Mode"
                return 1
              fi

              open -a "Betterzip" "$selection"
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.apple\.finder$]
          - type: variable_unless
            name: FINDER_FIND_MODE
            value: true
          - type: variable_unless
            name: FINDER_INSERT_MODE
            value: true
          - type: input_source_if
            input_sources: [language: ^de$]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
        to:
          - { key_code: right_shift, modifiers: [control, option, command] }
      # Map Esc to F18 (clipboard / screenshot history)
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"
        # INFO condition to avoid conflict with finder-vim-mode; mapping to f18
        # is done in finder-vim-alfred-addon.yaml
        conditions:
          - { type: frontmost_application_unless, bundle_identifiers: [^com\.apple\.finder$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪R: Restart App"
    manipulators:
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              FRONT_APP=$(osascript -e 'tell application "System Events" to return name of first process whose frontmost is true')
              killall "$FRONT_APP"

              # wait for 5 secs
              i=0
              while pgrep -xq "$FRONT_APP"; do 
                i=$((i+1))
                sleep 0.05
                if [[ $i -gt 100 ]]; then 
                  osascript -e "display notification \"\" with title \"Could not quit $FRONT_APP\""
                  return 1
                fi
              done

              [[ "$FRONT_APP" == "wezterm-gui" ]] && FRONT_APP="WezTerm"
              open -a "$FRONT_APP"
          # INFO Neovide binding for restarting is in vim-helpers.yaml
        conditions:
          - { type: frontmost_application_unless, file_paths: ["[Nn]eovide"] }
      # Restart Alfred & Alfred Preferences
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              osascript -e 'display notification "" with title "Restarting Alfred…"'
              killall -9 "Alfred"
              killall "Alfred Preferences"
              while pgrep -xq "Alfred"; do sleep 0.1; done
              sleep 0.1
              open -a "Alfred 5"
              open -a "Alfred Preferences"
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to search'
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Insert Mode Vim: ⇪ Hyper + hjklio<space> → ⌫←↓↑→"
    manipulators:
      # deletion
      - type: basic
        from: { key_code: "c", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      - type: basic
        from: { key_code: "x", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      #─────────────────────────────────────────────────────────────────────────
      # Movement
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: right_arrow
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word (use ⌘J from utility hotkeys for changing a word)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: delete_or_backspace, modifiers: [option] } # delete word
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word

      #─────────────────────────────────────────────────────────────────────

      # SYSDIAGNOSIS
      # HACK disable accidental triggering of via `Hyper+.` and `Hyper+,`.
      # Needs different versions to disable it for variants from quick typing
      - type: basic
        from: { key_code: period, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from:
          simultaneous:
            - key_code: period
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
      - type: basic
        from:
          simultaneous:
            - key_code: comma
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: period
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
  # this basically emulations the "Right-Click Open Link in new Background tab"
  # Chrome extension. Only done for a brief duration, so holding the right mouse
  # button still works for mouse gestues. Also, Rocker Gesture (Left) is
  # restricted by this (right works though).
  - description: "(Mouse) Right-Click (briefly): Open link in new background tab"
    manipulators:
      - type: basic
        from: { pointing_button: button2 }
        to_if_alone:
          - { pointing_button: button1, modifiers: [command] }
        to_if_held_down:
          - pointing_button: button2
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^org\.chromium\.Chromium$
              - ^com\.brave\.Browser$
              - ^com\.apple\.Safari$
              - ^com\.vivaldi\.Vivaldi$
      # RSS Reader
      - type: basic
        from: { pointing_button: button2 }
        to_if_held_down: [pointing_button: button2]
        to_if_alone:
          - pointing_button: button1
          - { key_code: vk_none, hold_down_milliseconds: 600 } # readkit is slow :(
          - { key_code: h, modifiers: [command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^app\.readkit\.universal$] }
      # Mimestream: Open link and delete mail (mostly github links)
      - type: basic
        from: { pointing_button: button2 }
        to_if_held_down: [pointing_button: button2]
        to_if_alone:
          - pointing_button: button1
          - { key_code: vk_none, hold_down_milliseconds: 200 }
          - { key_code: tab, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - key_code: non_us_pound
          - { key_code: h, modifiers: [command] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Mouse) 3: Quit app"
    manipulators:
      - type: basic
        from: { pointing_button: button3 }
        to:
          - { key_code: q, modifiers: [command] }
        conditions:
          - type: frontmost_application_unless
            file_paths:
              - BetterTouchTool
              - Hammerspoon
              - "[Nn]eovide"
              - "[Mm]industry"
      # prevent accidental quitting
      - type: basic
        from: { pointing_button: button3 }
        to:
          - { key_code: w, modifiers: [command] }
        conditions:
          - type: frontmost_application_if
            file_paths: [BetterTouchTool, Hammerspoon]
      # neovide: quit
      - type: basic
        from: { pointing_button: button3 }
        to:
          # so cursor position and changes are saved properly
          - shell_command: |
              export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH
              nvim --server "/tmp/nvim_server.pipe" --remote-send "<cmd>wq<CR>"
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
  #─────────────────────────────────────────────────────────────────────────────
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Mouse) 4 (bottom)"
    manipulators:
      # Obsidian: Back
      - type: basic
        from: { pointing_button: button4 }
        to:
          - { key_code: h, modifiers: [control] }
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^md\.obsidian$] }
      # Mimestream: Delete
      - type: basic
        from: { pointing_button: button4 }
        to:
          - key_code: non_us_pound # the "#" key
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }
      # Highlights: Free Comment (held down: red underline)
      - type: basic
        from: { pointing_button: button4 }
        to_if_alone:
          - { key_code: "n", modifiers: [control, command] }
          - { key_code: "3", modifiers: [control, command] }
          - shell_command: 'osascript -e ''display notification "Tool" with title "Comment ✏️ "'''
        to_if_held_down:
          - { key_code: "u", modifiers: [control, command] }
          - { key_code: "1", modifiers: [control, command] }
          - shell_command: 'osascript -e ''display notification "Tool" with title "Underline 🖍️"'''
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^net\.highlightsapp\.universal$]
      # Word: Comment
      - type: basic
        from: { pointing_button: button4 }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                  tell process "Microsoft Word"
                    set frontmost to true
                    click menu item "Comment" of menu "Insert" of menu bar 1
                  end tell
                end tell'
        conditions:
          - type: frontmost_application_if
            bundle_identifiers: [^com\.microsoft\.Word$]
      # Finder: back
      - type: basic
        from: { pointing_button: button4 }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events"
                tell process "Finder"
                  set frontmost to true
                  click menu item "Back" of menu "Go" of menu bar 1
                end tell
              end tell'
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.apple\.finder$] }
  #─────────────────────────────────────────────────────────────────────────────
  #─────────────────────────────────────────────────────────────────────────────
  - description: "(Mouse) 5 (top)"
    manipulators:
      # held-down: universal-search
      - type: basic
        from: { pointing_button: button5 }
        to_if_alone:
          - pointing_button: button5
        conditions:
          - type: frontmost_application_unless
            bundle_identifiers:
              - ^com\.brave\.Browser$
              - ^com\.vivaldi\.Vivaldi$
              - ^com\.apple\.finder$
              - ^md\.obsidian$
              - ^com\.mimestream\.Mimestream$
              - ^net\.highlightsapp\.universal$
              - ^org\.hammerspoon\.Hammerspoon$
              - ^com\.tapbots\.Ivory$
        to_if_held_down:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "search-selection" in workflow "de.chris-grieser.hyper-seek"'
      # Ivory: Close Media Window and tab away
      - type: basic
        from: { pointing_button: button5 }
        to:
          # HACK since checking for "is enabled" [1] does not work, we are instead
          # checking whether Ivory is still frontmost. If it is, no link has been
          # opened, meaning the menu item was not available
          # [1]: e.g., https://www.reddit.com/r/applehelp/comments/9du87c/applescript_to_detect_if_menu_bar_item_is/
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Ivory"
                  set frontmost to true
                  click menu item "Open Link to Post" of menu "Post" of menu bar 1
                  delay 0.15
                  if frontmost is true then
                    click menu item "Open Link to Profile" of menu "User" of menu bar 1
                  end if
                end tell
              '
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.tapbots\.Ivory$] }
        to_if_held_down:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "search-selection" in workflow "de.chris-grieser.hyper-seek"'
      # Browser & Finder & Obsidian & Hammerspoon: Close Window
      - type: basic
        from: { pointing_button: button5 }
        to_if_alone:
          - { key_code: w, modifiers: [command] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.brave\.Browser$
              - ^com\.vivaldi\.Vivaldi$
              - ^com\.apple\.finder$
              - ^md\.obsidian$
              - ^org\.hammerspoon\.Hammerspoon$
        to_if_held_down:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "search-selection" in workflow "de.chris-grieser.hyper-seek"'
      # Highlights: Yellow Highlight
      - type: basic
        from: { pointing_button: button5 }
        to_if_alone:
          - { key_code: h, modifiers: [command, control] }
          - { key_code: "3", modifiers: [command, control] }
          - shell_command: "osascript -e 'display notification \"Tool\" with title \"Yellow Highlight \U0001F7E8\"'"
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^net\.highlightsapp\.universal$] }
        to_if_held_down:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "search-selection" in workflow "de.chris-grieser.hyper-seek"'
      # Archive in Mimestream
      - type: basic
        from: { pointing_button: button5 }
        to_if_alone:
          - key_code: e
        conditions:
          - { type: frontmost_application_if, bundle_identifiers: [^com\.mimestream\.Mimestream$] }
        to_if_held_down:
          - shell_command: osascript -e 'tell application id "com.runningwithcrayons.Alfred" to run trigger "search-selection" in workflow "de.chris-grieser.hyper-seek"'
  #─────────────────────────────────────────────────────────────────────
  - description: "(Mouse) 1+2 (simultaneously): Dictionary Lookup"
    manipulators:
      - type: basic
        from:
          simultaneous:
            - pointing_button: button1
            - pointing_button: button2
        to:
          - pointing_button: button1 # in case it's not the front window
          - { key_code: d, modifiers: [control, command] }
        conditions:
          # conflicts for some reason with space+dragging in the Canvas plugin
          - { type: frontmost_application_unless, bundle_identifiers: [^md\.obsidian$] }
  - description: "Utilities: r-cmd, cmd-j, cmd-shift-j, cmd-e"
    manipulators:
      # r-cmd (tap) -> ctrl-e
      - type: basic
        from: { key_code: right_command }
        to:
          - key_code: right_command
        to_if_alone:
          - { key_code: e, modifiers: [control] }
      # fn+space → ctrl+space (for Apple Keyboards)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [fn] } }
        to:
          - { key_code: spacebar, modifiers: [control] }

      #─────────────────────────────────────────────────────────────────────────
      # 🔘 ⌘ J → Expand Word
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [command] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
          - { key_code: left_arrow, modifiers: [shift, option] }
        conditions:
          - type: frontmost_application_unless
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
      # 🔘 ⌘ ⇧ J → Find word under cursor (similar to `*` in vim visual mode)
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [command, shift] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell (first process where it is frontmost)
                  click menu item "Use Selection For Find" of menu of menu item "Find" of menu "Edit" of menu bar 1
                  click menu item "Find Next" of menu of menu item "Find" of menu "Edit" of menu bar 1
                end tell'
        conditions:
          - type: frontmost_application_unless
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"

      #─────────────────────────────────────────────────────────────────────────
      # inline cod[e] (backticks)
      - type: basic
        from: { key_code: e, modifiers: { mandatory: [command] } }
        to:
          - shell_command: pbpaste | pbcopy -pboard ruler # move current clipboard to alt clipboard
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - shell_command: pbcopy < /dev/null # empty the standard clipboard
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - { key_code: x, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 150 }
          - { key_code: equal_sign, modifiers: [shift] }
          - { key_code: equal_sign, modifiers: [shift] }
          - key_code: left_arrow
          - { key_code: v, modifiers: [command] }
          - { key_code: vk_none, hold_down_milliseconds: 100 }
          - shell_command: pbpaste -pboard ruler | pbcopy # restore previous cb
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.hnc\.Discord$
              - ^com\.tinyspeck\.slackmacgap$
              - ^com\.brave\.Browser$ # useful for reddit
              - ^com\.vivaldi\.Vivaldi$ # useful for reddit
              - ^com\.apptorium\.SideNotes-paddle$
              - ^com\.runningwithcrayons\.Alfred-Preferences$
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Special Characters: |^\\~[]"
    manipulators:
      - type: basic
        from: { key_code: "3", modifiers: { mandatory: [shift] } }
        conditions:
          - { type: input_source_if, input_sources: [{ language: ^de$ }] }
        to:
          - { key_code: "7", modifiers: [option] }
        # "🔘 ° → \\ (+ US Layout); ⌥^ for ° Symbol"
      - type: basic
        from: { key_code: non_us_backslash, modifiers: { mandatory: [shift] } }
        conditions:
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
        to:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - key_code: non_us_pound
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }
      - type: basic
        from: { key_code: non_us_backslash, modifiers: { mandatory: [option] } }
        conditions:
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
        to:
          - { key_code: non_us_backslash, modifiers: [shift] }
      - type: basic
        from: { key_code: non_us_backslash, modifiers: { mandatory: [command] } }
        conditions:
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
        to:
          - { key_code: "6", modifiers: [command] }
      # "🔘1️⃣ One Stroke ^` (German Layout)"
      # backtick
      - type: basic
        from: { key_code: equal_sign, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: equal_sign, modifiers: [shift] }
          - key_code: spacebar
        conditions:
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
      # the ^
      - type: basic
        from:
          key_code: non_us_backslash
        to:
          - key_code: non_us_backslash
          - key_code: spacebar
        conditions:
          - type: input_source_if
            input_sources: [{ language: ^de$ }]
          - type: frontmost_application_unless
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
      # Tilde ~
      - type: basic
        from: { key_code: "n", modifiers: { mandatory: [option] } }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - { type: frontmost_application_unless, file_paths: [wezterm-gui$] }
        to:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - { key_code: grave_accent_and_tilde, modifiers: [shift] }
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }

      #─────────────────────────────────────────────────────────────────────────────
      # ⚒️ ß´ → [] (+ German to US Layout), ⌥+ß → ß
      # ⌥ß → ß
      - type: basic
        from: { key_code: hyphen, modifiers: { mandatory: [option] } }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_unless
            bundle_identifiers:
              - ^com\.tinyspeck\.slackmacgap$
              - ^com\.microsoft\.Word$
              - ^com\.apptorium\.SideNotes-paddle$
        to:
          - key_code: hyphen
      # ß to [
      - type: basic
        from: { key_code: hyphen }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_unless
            bundle_identifiers:
              - ^com\.tinyspeck\.slackmacgap$
              - ^com\.microsoft\.Word$
              - ^com\.apptorium\.SideNotes-paddle$
        to:
          - { select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ } }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - key_code: open_bracket
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }

      # forward tick to ]
      - type: basic
        from: { key_code: equal_sign }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
        to:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - key_code: close_bracket
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }
#───────────────────────────────────────────────────────────────────────────────
  - description: "🥾 Pedal: j"
    manipulators:
      # Vim-apps: j
      - type: basic
        from: { key_code: b }
        to:
          - key_code: j
        conditions:
          - { type: "device_if", identifiers: [{ vendor_id: 6790 }] }
          - type: frontmost_application_if
            file_paths:
              - "[Nn]eovide"
              - "Vivaldi"
              - "Brave Browser"
              - "Obsidian"
  - description: "Neovide: ⇪R to restart"
    manipulators:
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command, control, shift, option] } }
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
        to:
          # INFO not done via Alfred because of https://github.com/neovide/neovide/issues/1604
          # INFO Quitting via :wqall instead of cmd+Q so bufferleaving autocmds are triggered
          - shell_command: |
              export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH
              nvim --server "/tmp/nvim_server.pipe" --remote-send "<cmd>try|wqall|catch|qall|endtry<CR>"

              # wait for 3 secs, if nvim is still running then, try to killall
              i=0
              while pgrep -xq "nvim" && [[ $i -lt 30 ]]; do 
                i=$((i+1))
                sleep 0.1
              done

              if pgrep -xq "nvim" ; then
                osascript -e 'display notification "" with title "⚔️ Force Killing nvim…"'
                killall -9 nvim neovide
              fi

              # wait for 2 seconds and if nvim is *still* running, abort
              i=0
              while pgrep -xq "nvim" ; do 
                i=$((i+1))
                sleep 0.1
                if [[ $i -gt 20 ]]; then
                  osascript -e 'display notification "" with title "Could not quit Neovide." sound name "Ping"'
                  return 1
                fi
              done

              # bwipeout necessary due to empty buffer created before jumping to '0
              nohup neovide --notabs --frame=buttonless --geometry=104x33 -- -c "execute \"normal! '0\" | bwipeout #" &
              disown # https://stackoverflow.com/a/20338584/22114136
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Neovide: Fix <S-Space> and ⌘Q → ZZ"
    manipulators:
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - key_code: f2
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
      # cmd+q -> <Esc>ZZ (does not skip pre-quit triggers)
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          # so cursor position and changes are saved
          - shell_command: |
              export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH
              nvim --server "/tmp/nvim_server.pipe" --remote-send "<cmd>try|wqall|catch|qall|endtry<CR>"
        conditions:
          - { type: frontmost_application_if, file_paths: ["[Nn]eovide"] }
  #─────────────────────────────────────────────────────────────────────────────
  # switching via keyboard layout too laggy
  - description: "Grave ^ -> f1, and that in turn remapped in the app"
    manipulators:
      - type: basic
        from: { key_code: non_us_backslash }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_if
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
        to:
          - { key_code: f1 }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "svim: shift-space to ctrl-s"
    manipulators:
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: s, modifiers: [control] }
        conditions:
          - type: frontmost_application_if
            bundle_identifiers:
              - ^com\.brave\.Browser$
              - ^com\.vivaldi\.Vivaldi$
              - ^com\.tinyspeck\.slackmacgap$
              - ^com\.hnc\.Discord$
              - ^com\.apptorium\.SideNotes-paddle$
              - ^com\.mimestream\.Mimestream$
              - ^com\.github\.wez\.wezterm$
  #─────────────────────────────────────────────────────────────────────────────
  - description: "vim motions: special characters in US layout"
    manipulators:
      # ⚒️ {}@^~|: German to US layout for vim
      # Curly Brace {
      - type: basic
        from: { key_code: "8", modifiers: { mandatory: [option] } }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_if
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
        to:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - { key_code: open_bracket, modifiers: [shift] }
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }
      # Curly Brace }
      - type: basic
        from: { key_code: "9", modifiers: { mandatory: [option] } }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_if
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
        to:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - { key_code: close_bracket, modifiers: [shift] }
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }
      # at @
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option] } }
        conditions:
          - { type: input_source_if, input_sources: [language: ^de$] }
          - type: frontmost_application_if
            file_paths:
              - ^/Applications/Obsidian\.app
              - "[Nn]eovide"
        to:
          - { select_input_source: { input_source_id: ^com\.apple\.keylayout\.US$ } }
          - { key_code: vk_none, hold_down_milliseconds: 20 }
          - { key_code: "2", modifiers: [shift] }
        to_after_key_up:
          - select_input_source: { input_source_id: ^com\.apple\.keylayout\.ABC-QWERTZ$ }
