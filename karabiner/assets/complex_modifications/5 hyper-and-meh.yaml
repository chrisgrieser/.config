title: ⇪ Hyper and ↹ Meh Key
homepage: https://github.com/chrisgrieser/dotfiles/karabiner
rules:
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
        to:
          - { key_code: right_shift, modifiers: [control, option, command] }
      # Map Esc to F18
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
        # INFO condition to avoid conflict with finder-vim-mode; mapping to f18
        # is done in finder-vim-alfred-addon.yaml
        conditions:
          - type: frontmost_application_unless
            bundle_identifiers:
              - ^com\.apple\.finder$
              - ^mindustry\.mac$
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ↹ Tab → Meh/Tab"
    manipulators:
      - type: basic
        from: { key_code: tab }
        to_if_alone:
          - key_code: tab
        to:
          - { key_code: right_shift, modifiers: [control, option] }
        conditions:
          - type: frontmost_application_unless
            file_path:
              - "[Mm]industry"
              - "[Nn]eovide" # quicker completion selection
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Open Locations"
    manipulators:
      # Hyper + ⌫ = Open Trash
      - type: basic
        from: { key_code: delete_or_backspace, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: | # opens the unified trash (iCloud trash + user trash)
              osascript -e'
                tell application "Finder"
                  activate
                  open the trash
                end tell
                tell application "System Events" to tell process "Finder"
                  set frontmost to true
                  click menu item "as List" of menu "View" of menu bar 1
                end tell
                '
      # Hyper + F: Open $WD / $DOTFILE_FOLDER
      - type: basic
        from: { key_code: f, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              osascript -e '
                set home to POSIX path of (path to home folder as string)
                set wd to (home & "Library/Mobile Documents/com~apple~CloudDocs/File Hub/")
                set dotfile_folder to (home & ".config/")
                tell application "Finder"
                  launch
                  set toOpen to (wd as POSIX file)
                  if (front window exists) then
                    if frontmost then
                      set current_path to POSIX path of (target of front window as alias)
                      if (current_path is wd) then set toOpen to (dotfile_folder as POSIX file)
                    else
                      activate
                    end if
                    set target of front Finder window to toOpen
                  else
                    activate
                    open toOpen
                  end if
                end tell'
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪R: Restart App"
    manipulators:
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          # INFO not done via Alfred because of https://github.com/neovide/neovide/issues/1604
          # INFO Quitting via wqall instead of cmd+Q so bufferleaving autocmds are triggered
          - shell_command: |
              FRONT_APP=$(osascript -e 'tell application "System Events" to return name of first process whose frontmost is true')
              if [[ "$FRONT_APP" == "neovide" ]]; then
                echo "vim.cmd.wq()" >"/tmp/nvim-automation"
              else
                killall "$FRONT_APP"
              fi

              while pgrep -q "$FRONT_APP"; do sleep 0.03; done

              if [[ "$FRONT_APP" == "neovide" ]]; then
                sleep 0.03
                export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH
                # bwipeout necessary due to empty buffer created before jumping to '0
                neovide --frame=buttonless --geometry=104x33 -- -c "execute \"normal! '0\" | bwipeout #"
              else
                [[ "$FRONT_APP" == "wezterm-gui" ]] && FRONT_APP="WezTerm"
                open -a "$FRONT_APP"
              fi
      # Restart Alfred
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              osascript -e 'display notification "" with title "Restarting Alfred…"'
              killall -KILL "Alfred"
              killall "Alfred Preferences"
              while pgrep -q "Alfred"; do sleep 0.1; done
              sleep 0.1
              open -a Alfred\ 5
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to search'
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Insert Mode Vim: ⇪ Hyper + hjklion<space> → ⌫←↓↑→"
    manipulators:
      - type: basic
        from: { key_code: "n", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: delete_or_backspace
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: right_arrow
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word (use ⌘J from utility hotkeys for changing a word)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: left_arrow, modifiers: [option, shift] } # select to the left end
          - key_code: delete_or_backspace # delete the selection
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word

      #─────────────────────────────────────────────────────────────────────

      # SYSDIAGNOSIS 
      # disable accidental triggering of via `Hyper+.` and `Hyper+,`. 
      # Needs different versions to disable it for variants from quick typing
      - type: basic
        from: { key_code: period, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from:
          simultaneous:
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: period
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 250 }
      - type: basic
        from:
          simultaneous:
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: comma
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 250 }
      - type: basic
        from:
          simultaneous:
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: comma
            - key_code: period
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 250 }
