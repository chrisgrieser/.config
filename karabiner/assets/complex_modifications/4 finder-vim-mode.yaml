# yaml-language-server: $schema=./schema/karabiner-mod.json
title: "Finder Vim Controls"
homepage: https://github.com/chrisgrieser/dotfiles/karabiner
maintainers: [pseudometa (chrisgrieser)]
anchors:
  - conditions:
      - &finder-app
        type: frontmost_application_if
        bundle_identifiers: [^com\.apple\.finder$]
      - &is-German-keyboard
        type: input_source_if
        input_sources: [language: ^de$]
      - &not-German-keyboard
        type: input_source_unless
        input_sources: [language: ^de$]
      - &is-insert-mode
        type: variable_if
        name: FINDER_INSERT_MODE
        value: true
      - &not-insert-mode
        type: variable_unless
        name: FINDER_INSERT_MODE
        value: true
      - &is-find-mode
        type: variable_if
        name: FINDER_FIND_MODE
        value: true
      - &not-find-mode
        type: variable_unless
        name: FINDER_FIND_MODE
        value: true
      - &move-active
        type: variable_if
        name: FINDER_MOVE_ACTIVE
        value: true
      - &move-inactive
        type: variable_unless
        name: FINDER_MOVE_ACTIVE
        value: true
      - &menu-is-open
        type: variable_if
        name: FINDER_MENU_ACTIVE
        value: true
      - &no-menu-open
        type: variable_unless
        name: FINDER_MENU_ACTIVE
        value: true
  #─────────────────────────────────────────────────────────────────────────────
  - to:
      # Insert Mode
      - &enter-insert-mode
        set_variable:
          name: FINDER_INSERT_MODE
          value: true
      - &leave-insert-mode
        set_variable:
          name: FINDER_INSERT_MODE
          value: false
      - &insert-notice
        set_notification_message:
          id: insert-notice
          text: "✏️  INSERT"
      - &remove-insert-notice
        set_notification_message:
          id: insert-notice
          text: ""
      - &enter-find-mode
        set_variable:
          name: FINDER_FIND_MODE
          value: true
      - &leave-find-mode
        set_variable:
          name: FINDER_FIND_MODE
          value: false
      - &find-notice
        set_notification_message:
          id: find-notice
          text: "\U0001F50D FIND"
      - &remove-find-notice
        set_notification_message:
          id: find-notice
          text: ""
      - &remove-move-notice
        set_notification_message:
          id: move-notice
          text: ""
      - &move-notice
        set_notification_message:
          id: move-notice
          text: "✂️  Move active"
      - &start-move
        set_variable:
          name: FINDER_MOVE_ACTIVE
          value: true
      - &end-move
        set_variable:
          name: FINDER_MOVE_ACTIVE
          value: false
      - &start-menu
        set_variable:
          name: FINDER_MENU_ACTIVE
          value: true
      - &end-menu
        set_variable:
          name: FINDER_MENU_ACTIVE
          value: false
      - &remove-menu-notice
        set_notification_message:
          id: menu-notice
          text: ""
      - &menu-notice
        set_notification_message:
          id: menu-notice
          text: "👉 Menu Mode"
#───────────────────────────────────────────────────────────────────────────────
#───────────────────────────────────────────────────────────────────────────────
#───────────────────────────────────────────────────────────────────────────────
rules:
  - description: "Finder Vim Controls"
    manipulators:
      # hjkl
      - type: basic
        from: { key_code: j }
        to: # no to_if_alone since it blocks repeat
          - key_code: down_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: k }
        to: # no to_if_alone since it blocks repeat
          - key_code: up_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # h: goto parent
      - type: basic
        from: { key_code: h }
        to_if_alone:
          - { key_code: up_arrow, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # l: open
      - type: basic
        from: { key_code: l }
        to_if_alone:
          - { key_code: o, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # HJKL
      # H: goto parent in new window
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: up_arrow, modifiers: [command, control] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # L: open; if folder in new window
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  if (selection is {}) then
                    display notification "" with title "⚠️ No selection" subtitle "Finder Vim Mode"
                    beep
                  else
                    repeat with aFolder in (selection as list)
                      open aFolder
                    end repeat
                  end if
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # J: 6j
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [shift] } }
        to:
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # K: 6k
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [shift] } }
        to:
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # g(g), G,
      - type: basic
        from: { key_code: g }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - key_code: down_arrow
            modifiers: [option]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # :help
      - type: basic
        # "?" on German keyboard
        from: { key_code: hyphen, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: qlmanage -p "$HOME/.config/karabiner/assets/finder-vim-mode/cheatsheet.png"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      - type: basic
        # "?" on American keyboard
        from: { key_code: slash, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: qlmanage -p "$HOME/.config/karabiner/assets/finder-vim-mode/cheatsheet.png"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      #─────────────────────────────────────────────────────────────────────────
      # INSERT MODE
      # ENTER
      # Rename
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # Batch Rename
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -l JavaScript "$HOME/.config/karabiner/assets/finder-vim-mode/batch-rename.js"
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
        # Switch Directory (for people using regular shortcuts)
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [command, shift] } }
        to:
          - { key_code: g, modifiers: [command, shift] }
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
        # Search
      - type: basic
        from: { key_code: slash }
        to:
          - { key_code: f, modifiers: [command] }
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
        # Search (for people using regular shortcuts)
      - type: basic
        from: { key_code: f, modifiers: { mandatory: [command] } }
        to:
          - { key_code: f, modifiers: [command] }
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # LEAVE INSERT MODE
      # Confirm Insert Mode
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *remove-insert-notice
          - *leave-insert-mode
        conditions: [*finder-app, *is-insert-mode]
      # Opening Alfred/Raycast/Spotlight cancels renaming and context menu,
      # so the respective modes have to be aborter here as well
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [command] } }
        to:
          - { key_code: spacebar, modifiers: [command] }
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
        conditions: [*finder-app]

      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────

      # ABORT VARIOUS MODES
      # Hyper
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        # keep hyper binding if not pressed alone
        to:
          - key_code: right_shift
            modifiers: [command, control, option]
        conditions: [*finder-app]
      # regular Esc
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: escape
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
        # Closing window or quit
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
      # Q: Restart Finder
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              killall Finder
              osascript -e 'display notification "🔁 Restarting Finder…" with title "Finder Vim Mode"'
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/screen_sharing_started.caf" &
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # closing win should end insert, menu, and find mode, but not cancel move
      - type: basic
        from: { key_code: w, modifiers: { mandatory: [command] } }
        to:
          - { key_code: w, modifiers: [command] }
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
      #─────────────────────────────────────────────────────────────────────────
      # Window & Tabs
      # w (or cmd+w) = close window/tab
      - type: basic
        from: { key_code: w }
        to:
          - { key_code: w, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # e = close other windows (:only)
      - type: basic
        from: { key_code: e }
        to:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  repeat while Finder window 2 exists
                    close Finder window 2
                  end repeat
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # <BS> = cycle windows (:bnext)
      - type: basic
        from: { key_code: delete_or_backspace }
        to_if_alone:
          - { key_code: grave_accent_and_tilde, modifiers: [command] }
          - *end-menu
          - *remove-menu-notice
          - *leave-find-mode
          - *remove-find-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # t = recent folders
      - type: basic
        from: { key_code: t }
        to_if_alone:
          # INFO requires "Focus Menubar item" in macOS Keyboard Shortcuts
          - { key_code: f2, modifiers: [control] }
          - key_code: g
          - { key_code: down_arrow, modifiers: [command] }
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: right_arrow
          - *start-menu
          - *menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      #─────────────────────────────────────────────────────────────────────────
      # Selections
      # a = select all
      - type: basic
        from: { key_code: a }
        to_if_alone:
          - { key_code: a, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # A = select only files
      - type: basic
        from: { key_code: a, modifiers: { mandatory: [shift] } }
        to_if_alone:
          # INFO use "Finder window" instead of "window" to target only regular
          # windows https://www.reddit.com/r/applescript/comments/uz9axo/comment/iayjrn4/?context=3
          - shell_command: |
              osascript -e ' tell application "Finder" to set the selection to files of Finder window 1'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # MULTI-SELECT
      # <S-Space> = add down to selection
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: down_arrow, modifiers: [shift] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # q = right-click / Context Menu
      - type: basic
        from: { key_code: q }
        to:
          # INFO Finder needs to activate even though it is already frontmost,
          # since running a shellcommand seems to temporarily take focus, so
          # that there is no AXfocusedUIElement during execution
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  if the selection is {} then return
                  activate
                end tell
                delay 0.1
                tell application "System Events" to tell process "Finder"
                  tell value of attribute "AXFocusedUIElement" to perform action "AXShowMenu"
                end tell'
          - *start-menu
          - *menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # close context menu with q
      - type: basic
        from: { key_code: q }
        to_if_alone:
          - key_code: escape
          - *end-menu
          - *remove-menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *menu-is-open]
      # changed navigation in context menu
      - type: basic
        from: { key_code: l }
        to_if_alone:
          - key_code: right_arrow
            modifiers: [command]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *menu-is-open]
      - type: basic
        from: { key_code: h }
        to_if_alone:
          - key_code: left_arrow
            modifiers: [command]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *menu-is-open]
      # Confirm Menu Selection
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *end-menu
          - *remove-menu-notice
        conditions: [*finder-app, *menu-is-open]
      # INFO: context menu cancellation configured with the insert mode cancellations
      #─────────────────────────────────────────────────────────────────────────
      # BASIC FILE OPERATIONS
      # d = delete
      - type: basic
        from: { key_code: d }
        to_if_alone:
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # y = yank file
      - type: basic
        from: { key_code: z } # y = z in German Keyboard
        to_if_alone:
          - { key_code: c, modifiers: [command] }
          - shell_command: osascript -e 'display notification "✅ File(s) copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: "y" }
        to:
          - { key_code: c, modifiers: [command] }
          - shell_command: osascript -e 'display notification "✅ File(s) copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *not-German-keyboard]
      # Y = yank file *content*
      - type: basic
        from: { key_code: z, modifiers: { mandatory: [shift] } } # y = z in German Keyboard
        to_if_alone:
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              cat "$selection" | pbcopy
              osascript -e 'display notification "✅ File content copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: y, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              cat "$selection" | pbcopy
              osascript -e 'display notification "✅ File content copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *not-German-keyboard]
      # p = paste
      - type: basic
        from: { key_code: p }
        to_if_alone:
          - { key_code: v, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode]
      # r = replicate (duplicate)
      - type: basic
        from: { key_code: r }
        to_if_alone:
          - { key_code: d, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # x = cross-move items to other Finder window (if exactly 2 Finder windows)
      - type: basic
        from: { key_code: x }
        to_if_alone:
          - shell_command: |
              osascript -e'
                tell application "Finder"
                  if (number of Finder windows is not 2) then
                    display notification "" with title "⚠️ Not exactly two windows" subtitle "Finder Vim Mode"
                    beep
                  else if (the selection is {}) then
                    display notification "" with title "⚠️ No selection" subtitle "Finder Vim Mode"
                    beep
                  else
                    set otherWin to (target of Finder window 2 as alias)
                    repeat with f in (selection as list)
                      move f to otherWin
                    end repeat
                  end if
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # X = cross-copy (duplicate)
      - type: basic
        from: { key_code: x, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -e'
                tell application "Finder"
                  if (number of Finder windows is not 2) then
                    display notification "" with title "Finder Vim Mode" subtitle "⚠️ Not exactly two windows"
                    beep
                  else if (the selection is {}) then
                    display notification "" with title "Finder Vim Mode" subtitle "⚠️ No selection"
                    beep
                  else
                    set otherWin to (target of Finder window 2 as alias)
                    repeat with f in (selection as list)
                      duplicate f to otherWin
                    end repeat
                  end if
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # i = Preview (information sidebar)
      - type: basic
        from: { key_code: i }
        to:
          - { key_code: p, modifiers: [shift, command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # I = info window
      # INFO uses floating inspector window which follows the current selection.
      # Pressing the hotkey again toggles it
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: i, modifiers: [command, option] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # v = view options
      - type: basic
        from: { key_code: v }
        to_if_alone:
          - { key_code: j, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # V = preview options
      - type: basic
        from: { key_code: v, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Finder"
                  click menu item "Show Preview Options" of menu "View" of menu bar 1
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # u = undo
      - type: basic
        from: { key_code: u }
        to_if_alone:
          - { key_code: z, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      - type: basic
        from: { key_code: u }
        to:
          - { key_code: "y", modifiers: [command] } # y = z in German keyboard
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      # U = redo
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: z, modifiers: [shift, command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: "y", modifiers: [shift, command] } # y = z in German keyboard
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      # N = New Folder
      - type: basic
        from: { key_code: n, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: n, modifiers: [shift, command] }
          - *enter-insert-mode # enters insert mode since folder renaming is also triggered
          - *insert-notice
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/facetime/multiway_join.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # M = Move selection to new folder
      - type: basic
        from: { key_code: m, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: n, modifiers: [control, command] }
          - *enter-insert-mode # enters insert mode since folder renaming is also triggered
          - *insert-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # n = New File
      - type: basic
        from: { key_code: n }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  set thisFolder to the target of the Finder window 1 as alias
                  set newFile to (make new file at thisFolder)
                  select newFile
                end tell'
                afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/begin_record.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # b = Toggle `.bkp` (Backup).
      - type: basic
        from: { key_code: b }
        to:
          # INFO if the selection is a symlink, "selection as alias" returns the
          # path of the target, while "selection as text" returns the path of
          # the symlink (which is desired here)
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (item 1 of (get selection) as text)' | sed 's|/$||' )
              lastFourChars=$(echo "$selection" | rev | cut -c-4 | rev) # bash expansion does not work in karabiner
              if [[ "$lastFourChars" == "-bkp" ]]; then
                newName=$(echo "$selection" | rev | cut -c5- | rev)
              else
                newName="${selection}-bkp"
              fi
              mv -n "$selection" "$newName"
              open -R "$newName"
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/begin_record.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # s = Create Symlink
      - type: basic
        from: { key_code: s }
        to:
          - shell_command: |
              sel=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              if [[ -f "$sel" ]] ; then
                  ln -sf "$sel" "${sel}-symlink"
                  open -R "${sel}-symlink"
              elif [[ -d "$sel" ]] ; then
                  # cannot use bash expansion here, therefore rev & cut
                  sel="$(echo "$sel" | rev | cut -c2- | rev)"
                  ln -sf "$sel" "${sel}-symlink"
                  open -R "${sel}-symlink"
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # S = follow symlink
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              open -R "$(readlink -f "$selection")"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # z = zip files
      # (if single directory is selected, zip its file contents instead)
      - type: basic
        from: { key_code: "y" } # y and z switched on German keyboard
        to_if_alone:
          # WARN needs to be written twice, once for German, once for English (see below)
          - shell_command: |
              SEL=$(osascript -e 'tell application "Finder" to POSIX path of (item 1 of (get selection) as text)')
              selection_count=$(osascript -e 'tell application "Finder" to count (selection as list)')

              if [[ -d "$SEL" && $selection_count -eq 1 ]] ; then
                cd "$SEL"
                foldername=$(basename "$SEL")
                zip -r "../$foldername.zip" .
                open -R "../$foldername.zip"

                current_vol=$(osascript -e 'output volume of (get volume settings)')
                vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
                (afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/Volume Mount.aif" &)
              else
                osascript -e '
                  tell application "System Events" to tell process "Finder"
                    click menu item "Compress" of menu "File" of menu bar 1
                  end tell'
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: z }
        to:
          # WARN needs to be written twice, once for German, once for English (see above)
          - shell_command: |
              SEL=$(osascript -e 'tell application "Finder" to POSIX path of (item 1 of (get selection) as text)')
              selection_count=$(osascript -e 'tell application "Finder" to count (selection as list)')

              if [[ -d "$SEL" && $selection_count -eq 1 ]] ; then
                cd "$SEL"
                foldername=$(basename "$SEL")
                zip -r "../$foldername.zip" .
                open -R "../$foldername.zip"

                current_vol=$(osascript -e 'output volume of (get volume settings)')
                vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
                (afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/Volume Mount.aif" &)
              else
                osascript -e '
                  tell application "System Events" to tell process "Finder"
                    click menu item "Compress" of menu "File" of menu bar 1
                  end tell'
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      # toggle hidden files visibility
      - type: basic
        from: { key_code: period }
        to:
          - { key_code: period, modifiers: [command, shift] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/facetime/multiway_leave.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # Navigation
      # o = open/expand fold (O: do it recursively)
      - type: basic
        from: { key_code: o }
        to_if_alone:
          - key_code: right_arrow
          - shell_command: afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_unmute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: right_arrow, modifiers: [option] }
          - shell_command: afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_unmute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # c = close/collapse fold (C: do it recursively)
      - type: basic
        from: { key_code: c }
        to_if_alone:
          - key_code: left_arrow
          - shell_command: afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_mute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: c, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: left_arrow, modifiers: [option] }
          - shell_command: afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_mute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # <C-h> = History Back
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Finder"
                  click menu item "Back" of menu "Go" of menu bar 1
                end tell'
          # going back aborts searching / renames
          - key_code: escape
          - *leave-insert-mode
        conditions: [*finder-app, *not-find-mode]
      # <C-l> = History Forward
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Finder"
                  click menu item "Forward" of menu "Go" of menu bar 1
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # FIND MODE
      # Enter/Exit
      - type: basic
        from: { key_code: f }
        to_if_alone:
          - *enter-find-mode
          - *find-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # One-Char-Searches
      - type: basic
        from: { key_code: a, modifiers: { optional: [shift] } }
        to: [{ key_code: a }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: b, modifiers: { optional: [shift] } }
        to: [{ key_code: b }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: c, modifiers: { optional: [shift] } }
        to: [{ key_code: c }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: d, modifiers: { optional: [shift] } }
        to: [{ key_code: d }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: e, modifiers: { optional: [shift] } }
        to: [{ key_code: e }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: f, modifiers: { optional: [shift] } }
        to: [{ key_code: f }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: g, modifiers: { optional: [shift] } }
        to: [{ key_code: g }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: h, modifiers: { optional: [shift] } }
        to: [{ key_code: h }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: i, modifiers: { optional: [shift] } }
        to: [{ key_code: i }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: j, modifiers: { optional: [shift] } }
        to: [{ key_code: j }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: k, modifiers: { optional: [shift] } }
        to: [{ key_code: k }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: l, modifiers: { optional: [shift] } }
        to: [{ key_code: l }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: m, modifiers: { optional: [shift] } }
        to: [{ key_code: m }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: n, modifiers: { optional: [shift] } }
        to: [{ key_code: n }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: o, modifiers: { optional: [shift] } }
        to: [{ key_code: o }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: p, modifiers: { optional: [shift] } }
        to: [{ key_code: p }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: q, modifiers: { optional: [shift] } }
        to: [{ key_code: q }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: r, modifiers: { optional: [shift] } }
        to: [{ key_code: r }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: s, modifiers: { optional: [shift] } }
        to: [{ key_code: s }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: t, modifiers: { optional: [shift] } }
        to: [{ key_code: t }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: u, modifiers: { optional: [shift] } }
        to: [{ key_code: u }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: v, modifiers: { optional: [shift] } }
        to: [{ key_code: v }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: w, modifiers: { optional: [shift] } }
        to: [{ key_code: w }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: x, modifiers: { optional: [shift] } }
        to: [{ key_code: x }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: y, modifiers: { optional: [shift] } }
        to: [{ key_code: y }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: z, modifiers: { optional: [shift] } }
        to: [{ key_code: z }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: period }
        to: [{ key_code: period }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "0" }
        to: [{ key_code: "0" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "1" }
        to: [{ key_code: "1" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "2" }
        to: [{ key_code: "2" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "3" }
        to: [{ key_code: "3" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "4" }
        to: [{ key_code: "4" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "5" }
        to: [{ key_code: "5" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "6" }
        to: [{ key_code: "6" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "7" }
        to: [{ key_code: "7" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "8" }
        to: [{ key_code: "8" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "9" }
        to: [{ key_code: "9" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # MOVE
      # m = move
      - type: basic
        from: { key_code: m }
        to:
          - key_code: c
            modifiers: [command]
          - *start-move
          - *move-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # p / cmd+v = paste content marked for move thing
      - type: basic
        from: { key_code: p }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
        to:
          - key_code: v
            modifiers: [command, option]
          - *end-move
          - *remove-move-notice
      - type: basic
        from:
          key_code: v
          modifiers: { mandatory: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
        to:
          - key_code: v
            modifiers: [command, option]
          - *end-move
          - *remove-move-notice
      # y / cmd+c = yank, which also aborts move
      - type: basic
        from: { key_code: "y" }
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
          - shell_command: osascript -e 'display notification "✅ File(s) copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active, *not-German-keyboard]
      - type: basic
        from: { key_code: z } # y and z switched on German keyboard
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active, *is-German-keyboard]
      - type: basic
        from:
          key_code: c
          modifiers: { mandatory: [command] }
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # SORT BY
      - type: basic # by name
        from: { key_code: "down_arrow" }
        to:
          - { key_code: "1", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              osascript -e 'display notification "⬇️ Sort by name" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by modification date
        from: { key_code: "left_arrow" }
        to:
          - { key_code: "5", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              osascript -e 'display notification "⬅️ Sort by modification date" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by size
        from: { key_code: "up_arrow" }
        to:
          - { key_code: "6", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              osascript -e 'display notification "⬆️ Sort by size" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by kind
        from: { key_code: "right_arrow" }
        to:
          - { key_code: "2", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              osascript -e 'display notification "➡️ Sort by kind" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by tags
        from: { key_code: "end" }
        to:
          - { key_code: "7", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              osascript -e 'display notification "🔚 Sort by tags" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # NUMBER KEYS: TOGGLE TAGS
      # https://support.apple.com/guide/mac-help/tag-files-and-folders-mchlp15236/mac
      - type: basic
        from: { key_code: "1" } # ! used as mark
        to:
          - { key_code: "1", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "2" }
        to:
          - { key_code: "2", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "3" }
        to:
          - { key_code: "3", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "4" }
        to:
          - { key_code: "4", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "5" }
        to:
          - { key_code: "5", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "6" }
        to:
          - { key_code: "6", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "7" }
        to:
          - { key_code: "7", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "8" }
        to:
          - { key_code: "8", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "9" }
        to:
          - { key_code: "9", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # remove all tags
      - type: basic
        from: { key_code: "0" }
        to:
          - { key_code: "0", modifiers: [control] }
          - shell_command: afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # MISCELLANEOUS
      # , (comma)
      - type: basic
        from: { key_code: comma }
        to:
          - shell_command: |
              osascript -e 'display notification "☁️ 🔁 Restarting iCloud…" with title "Finder Vim Mode"'
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/screen_sharing_started.caf" &
              killall bird
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-p: copy path
      - type: basic
        from: { key_code: p, modifiers: { mandatory: [control] } }
        to:
          - { key_code: "c", modifiers: [option, command] }
          - shell_command: osascript -e 'display notification "✅ Filepath copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-n: copy name
      - type: basic
        from: { key_code: n, modifiers: { mandatory: [control] } }
        to:
          - key_code: return_or_enter
          - { key_code: "c", modifiers: [command] }
          - key_code: return_or_enter
          - shell_command: osascript -e 'display notification "✅ Filename copied" with title "Finder Vim Mode"'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-g: open at github
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              GIT_OPTIONAL_LOCKS=0
              SEL=$(osascript -e 'tell application "Finder"
                set sel to (item 1 of (get selection) as text)
                return POSIX path of sel
              end tell')
              if [[ ! -f "$SEL" ]] ; then
                osascript -e 'display notification "⚠️ Selection not a file." with title "Finder Vim Mode"'
                exit 1
              fi
              cd "$(dirname "$SEL")" || exit 1
              if ! git rev-parse --is-inside-work-tree &>/dev/null ; then
                osascript -e 'display notification "⚠️ File not in a git repo." with title "Finder Vim Mode"'
                exit 1
              fi

              BRANCH=$(git branch --show-current)
              ROOT_PATH=$(git rev-parse --show-toplevel)
              ROOT_LEN=${#ROOT_PATH}
              REMOTE_URL="$(git remote -v | head -n1 | cut -f2 | cut -d' ' -f1 | sed -e's/:/\//' -e 's/git@/https:\/\//' -e 's/\.git//')"
              PATH_IN_REPO=${SEL:$ROOT_LEN}
              PATH_IN_REPO=$(osascript -l JavaScript -e "encodeURIComponent('$PATH_IN_REPO')")

              URL="$REMOTE_URL/blob/$BRANCH/$PATH_IN_REPO"
              echo "$URL" | pbcopy
              open "$URL"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
