# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: "Finder Vim Controls"
homepage: https://github.com/chrisgrieser/finder-vim-mode
maintainers: [pseudometa (chrisgrieser)]
anchors:
  - conditions:
      - &finder-app
        type: frontmost_application_if
        bundle_identifiers: [^com\.apple\.finder$]
      - &is-German-keyboard
        type: input_source_if
        input_sources: [language: ^de$]
      - &not-German-keyboard
        type: input_source_unless
        input_sources: [language: ^de$]
      - &is-insert-mode
        type: variable_if
        name: FINDER_INSERT_MODE
        value: true
      - &not-insert-mode
        type: variable_unless
        name: FINDER_INSERT_MODE
        value: true
      - &is-find-mode
        type: variable_if
        name: FINDER_FIND_MODE
        value: true
      - &not-find-mode
        type: variable_unless
        name: FINDER_FIND_MODE
        value: true
      - &move-active
        type: variable_if
        name: FINDER_MOVE_ACTIVE
        value: true
      - &move-inactive
        type: variable_unless
        name: FINDER_MOVE_ACTIVE
        value: true
      - &menu-is-open
        type: variable_if
        name: FINDER_MENU_ACTIVE
        value: true
      - &no-menu-open
        type: variable_unless
        name: FINDER_MENU_ACTIVE
        value: true
  #─────────────────────────────────────────────────────────────────────────────
  - to:
      - &enter-insert-mode
        set_variable:
          name: FINDER_INSERT_MODE
          value: true
      - &leave-insert-mode
        set_variable:
          name: FINDER_INSERT_MODE
          value: false
      - &insert-notice
        set_notification_message:
          id: insert-notice
          text: "Finder Vim Mode\n\n✏️  INSERT"
      - &remove-insert-notice
        set_notification_message:
          id: insert-notice
          text: ""
      - &enter-find-mode
        set_variable:
          name: FINDER_FIND_MODE
          value: true
      - &leave-find-mode
        set_variable:
          name: FINDER_FIND_MODE
          value: false
      - &find-notice
        set_notification_message:
          id: find-notice
          text: "Finder Vim Mode\n\n🔎 FIND"
      - &remove-find-notice
        set_notification_message:
          id: find-notice
          text: ""
      - &remove-move-notice
        set_notification_message:
          id: move-notice
          text: ""
      - &move-notice
        set_notification_message:
          id: move-notice
          text: "Finder Vim Mode\n\n✂️ Move active"
      - &start-move
        set_variable:
          name: FINDER_MOVE_ACTIVE
          value: true
      - &end-move
        set_variable:
          name: FINDER_MOVE_ACTIVE
          value: false
      - &start-menu
        set_variable:
          name: FINDER_MENU_ACTIVE
          value: true
      - &end-menu
        set_variable:
          name: FINDER_MENU_ACTIVE
          value: false
      - &remove-menu-notice
        set_notification_message:
          id: menu-notice
          text: ""
      - &menu-notice
        set_notification_message:
          id: menu-notice
          text: "Finder Vim Mode\n\n➡️ Menu Mode"
#───────────────────────────────────────────────────────────────────────────────
#───────────────────────────────────────────────────────────────────────────────
#───────────────────────────────────────────────────────────────────────────────

rules:
  - description: "Finder Vim Controls"
    manipulators:
      # hjkl
      - type: basic
        from: { key_code: j }
        to: # no to_if_alone since it blocks repeat
          - key_code: down_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: k }
        to: # no to_if_alone since it blocks repeat
          - key_code: up_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # h: goto parent
      - type: basic
        from: { key_code: h }
        to_if_alone:
          - { key_code: up_arrow, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # l: open
      - type: basic
        from: { key_code: l }
        to_if_alone:
          - { key_code: o, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # HJKL
      # H: goto parent in new window
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: up_arrow, modifiers: [command, control] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # L: open & if folder in new window
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  if (selection is {}) then
                    beep
                  else
                    repeat with aFolder in (selection as list)
                      open aFolder
                    end repeat
                  end if
                end tell'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # J: 6j
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [shift] } }
        to:
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
          - key_code: down_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # K: 6k
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [shift] } }
        to:
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
          - key_code: up_arrow
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # g(g), G,
      - type: basic
        from: { key_code: g }
        to:
          - key_code: up_arrow
            modifiers: [option]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - key_code: down_arrow
            modifiers: [option]
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # :help
      # "?" on German keyboard
      - type: basic
        from: { key_code: hyphen, modifiers: { mandatory: [shift] } }
        to:
          - shell_command:
              qlmanage -p "$HOME/.config/karabiner/assets/finder-vim-mode/cheatsheet.png"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      # "?" on American keyboard
      - type: basic
        from: { key_code: slash, modifiers: { mandatory: [shift] } }
        to:
          - shell_command:
              qlmanage -p "$HOME/.config/karabiner/assets/finder-vim-mode/cheatsheet.png"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      #─────────────────────────────────────────────────────────────────────────
      # INSERT MODE
      # ENTER
      # Rename
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # Batch Rename
      - type: basic
        from: { key_code: return_or_enter, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Finder"
                  click menu item "Rename…" of menu "File" of menu bar 1
                end tell'
          - *insert-notice
          - *enter-insert-mode
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # LEAVE INSERT MODE
      # Confirm Insert Mode
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *remove-insert-notice
          - *leave-insert-mode
        conditions: [*finder-app, *is-insert-mode]
      # SPOTLIGHT
      # Opening Alfred/Raycast/Spotlight cancels renaming and context menu,
      # so the respective modes have to be aborter here as well
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [command] } }
        to:
          - { key_code: spacebar, modifiers: [command] }
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu

      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # ABORT VARIOUS MODES
      # Hyper
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        # keep hyper binding if not pressed alone
        to:
          - { key_code: right_command, modifiers: [control, option] }
        conditions: [*finder-app]
      # regular Esc
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: escape
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
        # Closing window or quit
      - type: basic
        from: { key_code: q, modifiers: { mandatory: [command] } }
        to:
          - { key_code: q, modifiers: [command] }
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-move-notice
          - *end-move
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
      #─────────────────────────────────────────────────────────────────────────
      # WINDOWS
      - type: basic
        from: { key_code: w, modifiers: { mandatory: [command] } }
        to:
          - shell_command: |
              current_win=$(osascript -e '
                tell application "Finder"
                	activate
                	if (count windows) is 0 then return ""
                	try
                		set pathToBeClosed to (POSIX path of (insertion location as alias))
                		close window 1
                		return pathToBeClosed
                	on error # special folders without insertion location, like Smart Folders
                		close window 1
                		return ""
                	end try
                end tell
              ')
              if [[ -n "$current_win" ]] ; then
                mkdir -p "$HOME/.cache/finder-vim-mode"
                echo "$current_win" >"$HOME/.cache/finder-vim-mode/last-closed-window"
              fi
          # closing win should end insert, menu, and find mode, but not cancel move
          # since cmd+w can be called from various modes, it should thus also
          # end all those modes
          - *remove-insert-notice
          - *leave-insert-mode
          - *remove-menu-notice
          - *end-menu
          - *remove-find-notice
          - *leave-find-mode
        conditions: [*finder-app]
      # q: close window (:quit)
      - type: basic
        from: { key_code: q }
        to:
          - shell_command: |
              current_win=$(osascript -e '
                tell application "Finder"
                	activate
                	if (count windows) is 0 then return ""
                	try
                		set pathToBeClosed to (POSIX path of (insertion location as alias))
                		close window 1
                		return pathToBeClosed
                	on error # special folders without insertion location, like Smart Folders
                		close window 1
                		return ""
                	end try
                end tell
              ')
              if [[ -n "$current_win" ]] ; then
                mkdir -p "$HOME/.cache/finder-vim-mode"
                echo "$current_win" >"$HOME/.cache/finder-vim-mode/last-closed-window"
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # r = re-open window
      - type: basic
        from: { key_code: r }
        to:
          - shell_command: |
              open "$(cat "$HOME/.cache/finder-vim-mode/last-closed-window")"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # e = close all other windows (:only)
      - type: basic
        from: { key_code: e }
        to:
          - shell_command: |
              current_win=$(osascript -e '
                tell application "Finder"
                  set winPath to ""
                  repeat while Finder window 2 exists
                    if ((count Finder windows) is 2) then
                      set winPath to POSIX path of (target of window 2 as alias)
                    end if
                    close Finder window 2
                  end repeat
                  return winPath
                end tell')
              mkdir -p "$HOME/.cache/finder-vim-mode"
              [[ -n "$current_win" ]] && echo "$current_win" >"$HOME/.cache/finder-vim-mode/last-closed-window"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # <BS> = cycle windows (:bnext)
      - type: basic
        from: { key_code: delete_or_backspace }
        to_if_alone:
          - { key_code: non_us_backslash, modifiers: [command] }
          - *end-menu
          - *remove-menu-notice
          - *leave-find-mode
          - *remove-find-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # t = recent folders
      - type: basic
        from: { key_code: t }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "System Events" to tell process "Finder"
                  set frontmost to true
                	click menu item "Recent Folders" of menu "Go" of menu bar 1
                  key code 125 using {option down} # opt+down
                  key code 126 # up
                  key code 126 # up
                  key code 124 # right
                end tell
              '
          - *start-menu
          - *menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      #─────────────────────────────────────────────────────────────────────────
      # Selections
      # a = select all
      - type: basic
        from: { key_code: a }
        to_if_alone:
          - { key_code: a, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # A = select only files
      - type: basic
        from: { key_code: a, modifiers: { mandatory: [shift] } }
        to_if_alone:
          # INFO use "Finder window" instead of "window" to target only regular
          # windows https://www.reddit.com/r/applescript/comments/uz9axo/comment/iayjrn4/?context=3
          - shell_command: |
              osascript -e ' tell application "Finder" to set the selection to files of Finder window 1'
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # MULTI-SELECT
      # <S-Space> = add down to selection
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: down_arrow, modifiers: [shift] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # c = context menu ("right-click")
      - type: basic
        from: { key_code: c }
        to:
          # INFO Finder needs to activate even though it is already frontmost,
          # since running a shellcommand seems to temporarily take focus, so
          # that there is no `AXfocusedUIElement` during execution
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  if the selection is {} then return
                  activate
                end tell
                delay 0.1
                tell application "System Events" to tell process "Finder"
                  tell value of attribute "AXFocusedUIElement" to perform action "AXShowMenu"
                end tell'
          - *start-menu
          - *menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *no-menu-open]
      # close context menu with q or c
      - type: basic
        from: { key_code: q }
        to_if_alone:
          - key_code: escape
          - *end-menu
          - *remove-menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *menu-is-open]
      - type: basic
        from: { key_code: c }
        to_if_alone:
          - key_code: escape
          - *end-menu
          - *remove-menu-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *menu-is-open]
      # changed navigation in menu mode
      - type: basic
        from: { key_code: l }
        to_if_alone:
          - { key_code: right_arrow }
        conditions: [*finder-app, *menu-is-open]
      - type: basic
        from: { key_code: h }
        to_if_alone:
          - { key_code: left_arrow }
        conditions: [*finder-app, *menu-is-open]
      - type: basic
        from: { key_code: tab }
        to_if_alone:
          - { key_code: down_arrow }
        conditions: [*finder-app, *menu-is-open]
      - type: basic
        from: { key_code: tab, modifiers: { mandatory: [shift] } } # y = z in German Keyboard
        to_if_alone:
          - { key_code: up_arrow }
        conditions: [*finder-app, *menu-is-open]
      # Confirm Menu Selection
      - type: basic
        from: { key_code: return_or_enter }
        to:
          - key_code: return_or_enter
          - *end-menu
          - *remove-menu-notice
        conditions: [*finder-app, *menu-is-open]
      # INFO: context menu cancellation configured with the insert mode cancellations
      #─────────────────────────────────────────────────────────────────────────
      # BASIC FILE OPERATIONS
      # d = delete (or put back, when in Trash)
      - type: basic
        from: { key_code: d }
        to_if_alone:
          - { key_code: delete_or_backspace, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # D = open trash
      - type: basic
        from: { key_code: d, modifiers: { mandatory: [shift] } }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
        to:
          # to open the "unified" trash (iCloud trash + user trash), needs to use
          # AppleScript and not `open "$HOME/.Trash"`
          - shell_command: |
              osascript -e'
                tell application "Finder"
                  activate
                  open the trash
                end tell
                tell application "System Events" to tell process "Finder"
                  set frontmost to true
                end tell
                '
      # y = yank (copy) file
      - type: basic
        from: { key_code: z } # y = z in German Keyboard
        to_if_alone:
          - { key_code: c, modifiers: [command] }
          - shell_command: |
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ File(s) copied"
        conditions:
          [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: "y" }
        to:
          - { key_code: c, modifiers: [command] }
          - shell_command: |
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ File(s) copied"
        conditions:
          [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *not-German-keyboard]
      # Y = yank (copy) file *content*
      - type: basic
        from: { key_code: z, modifiers: { mandatory: [shift] } } # y = z in German Keyboard
        to_if_alone:
          - shell_command: |
              export LC_CTYPE="en_US.UTF-8" # fixes encoding issue when copying
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              cat "$selection" | pbcopy
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ File content copied"
        conditions:
          [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: y, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              export LC_CTYPE="en_US.UTF-8" # fixes encoding issue when copying
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              cat "$selection" | pbcopy
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ File content copied"
        conditions:
          [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode, *not-German-keyboard]
      # p = paste file
      - type: basic
        from: { key_code: p }
        to_if_alone:
          - { key_code: v, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode]
      # P = paste (append) text into file
      - type: basic
        from: { key_code: p, modifiers: { mandatory: [shift] } }
        to:
          - shell_command: |
              export LC_CTYPE="en_US.UTF-8" # fixes encoding issue when pasting
              selection=$(osascript -e 'tell application "Finder" to return POSIX path of (selection as text)')
              pbpaste >> "$selection"
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ Text appended to file"
        conditions: [*finder-app, *not-insert-mode, *move-inactive, *not-find-mode]
      # w = duplicate (mnemonic: double-u)
      - type: basic
        from: { key_code: w }
        to_if_alone:
          - { key_code: d, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # x = cross-move items to other Finder window (if exactly 2 Finder windows)
      - type: basic
        from: { key_code: x }
        to_if_alone:
          - shell_command: |
              error=$(osascript -e'
                tell application "Finder"
                	activate
                	if (number of Finder windows is not 2) then
                		beep
                		return "⚠️ Not exactly two windows"
                	else if (the selection is {}) then
                		beep
                		return "⚠️ No selection"
                	else
                		set otherWin to (target of Finder window 2 as alias)
                		repeat with aFile in (selection as list)
                      # AppleScript does not allow the "ask for confirmation" prompt if replacing,
                      # thus implementing it manually https://www.macscripter.net/t/mac-finder-native-copy-dialog/54200/13
                			try
                				move aFile to otherWin without replacing
                			on error
                				set promptText to "An item named " & quoted form of (name of aFile as string) & " already exists in this location."
                				set response to button returned of (display dialog promptText buttons {"Skip", "Replace"} default button "Replace" cancel button "Skip" with icon caution)
                				if response is "Replace" then move aFile to otherWin with replacing
                			end try
                		end repeat
                		return ""
                	end if
                end tell
              ')
              [[ -n "$error" ]] && "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "$error"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # X = cross-copy (duplicate)
      - type: basic
        from: { key_code: x, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - shell_command: |
              error=$(osascript -e'
                tell application "Finder"
                	activate
                	if (number of Finder windows is not 2) then
                		beep
                		return "⚠️ Not exactly two windows"
                	else if (the selection is {}) then
                		beep
                		return "⚠️ No selection"
                	else
                		set otherWin to (target of Finder window 2 as alias)
                		repeat with aFile in (selection as list)
                      # AppleScript does not allow the "ask for confirmation" prompt if replacing,
                      # thus implementing it manually https://www.macscripter.net/t/mac-finder-native-copy-dialog/54200/13
                			try
                				duplicate aFile to otherWin without replacing
                			on error
                				set promptText to "An item named " & quoted form of (name of aFile as string) & " already exists in this location."
                				set response to button returned of (display dialog promptText buttons {"Skip", "Replace"} default button "Replace" cancel button "Skip" with icon caution)
                				if response is "Replace" then duplicate aFile to otherWin with replacing
                			end try
                		end repeat
                		return ""
                	end if
                end tell
              ')
              [[ -n "$error" ]] && "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "$error"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # v = open first volume
      - type: basic
        from: { key_code: v }
        to_if_alone:
          - shell_command: |
              first_volume=$(df | grep --max-count=1 " /Volumes/" | awk -F '   ' '{print $NF}')
              [[ -z "$first_volume" ]] && "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "No ejectable volume found."
              error=$(osascript -e "
                set the_volume to (\"$first_volume\" as POSIX file)
                tell application \"Finder\" to open the_volume
              ")
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # u = undo
      - type: basic
        from: { key_code: u }
        to_if_alone:
          - { key_code: z, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      - type: basic
        from: { key_code: u }
        to:
          - { key_code: "y", modifiers: [command] } # y = z in German keyboard
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      # U = redo
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: z, modifiers: [shift, command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      - type: basic
        from: { key_code: u, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: "y", modifiers: [shift, command] } # y = z in German keyboard
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      # N = New Folder
      - type: basic
        from: { key_code: n, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: n, modifiers: [shift, command] }
          - *enter-insert-mode # enters insert mode since folder renaming is also triggered
          - *insert-notice
          - shell_command: |
              current_vol=$(osascript -e 'output volume of (get volume settings)')
              [[ "$current_vol" == "missing value" ]] && current_vol=50
              vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
              afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/facetime/multiway_join.caf" & # codespell-ignore
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # M = Move selection to new folder
      - type: basic
        from: { key_code: m, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: n, modifiers: [control, command] }
          - *enter-insert-mode # enters insert mode since folder renaming is also triggered
          - *insert-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # n = New File
      - type: basic
        from: { key_code: n }
        to_if_alone:
          - shell_command: |
              osascript -e '
                tell application "Finder"
                  set thisFolder to the target of the Finder window 1 as alias
                  set newFile to (make new file at thisFolder)
                  select newFile
                end tell'

              current_vol=$(osascript -e 'output volume of (get volume settings)')
              [[ "$current_vol" == "missing value" ]] && current_vol=50
              vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
              afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/begin_record.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # b = Toggle `.bkp` (Backup).
      - type: basic
        from: { key_code: b }
        to:
          - shell_command: |
              # if the selection is a symlink, "selection as alias" returns the
              # path of the target, while "selection as text" returns the path of
              # the symlink (which is desired here)
              selectedFiles=$(osascript -e '
                set out to ""
                tell application "Finder" to set selectedFiles to (every item of (get selection))
                repeat with theFile in selectedFiles
                  set out to out & (POSIX path of (theFile as text)) & linefeed
                end repeat
                return out
              ' | sed -e 's|/$||')
              if [[ -z "$selectedFiles" ]] ; then
                "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "Finder Vim Mode" --message "⚠️ No selection."
                exit 1
              fi

              echo "$selectedFiles" | while read -r file; do
                # bash expansion does not work in karabiner
                lastFourChars=$(echo "$file" | rev | cut -c-4 | rev)
                if [[ "$lastFourChars" == "-bkp" ]]; then
                  newName=$(echo "$file" | rev | cut -c5- | rev)
                else
                  newName="${file}-bkp"
                fi
                mv -n "$file" "$newName"
              done
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/begin_record.caf" & # codespell-ignore
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # s = Create Symlink
      - type: basic
        from: { key_code: s }
        to:
          - shell_command: |
              selectedFiles=$(osascript -e '
                set out to ""
                tell application "Finder" to set selectedFiles to (every item of (get selection))
                repeat with theFile in selectedFiles
                  set out to out & (POSIX path of (theFile as text)) & linefeed
                end repeat
                return out
              ' | sed -e 's|/$||')
              if [[ -z "$selectedFiles" ]] ; then
                "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "Finder Vim Mode" --message "⚠️ No selection."
                exit 1
              fi
              echo "$selectedFiles" | while read -r file; do
                ln -sf "$file" "${file}-symlink"
              done
              first_symlink="$(echo "$selectedFiles" | head -n1)-symlink"
              open -R "$first_symlink"
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/begin_record.caf" & # codespell-ignore
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # S = follow symlink (or alias)
      - type: basic
        from: { key_code: s, modifiers: { mandatory: [shift] } }
        to:
          - { key_code: r, modifiers: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # z = zip files
      # (if single directory is selected, zip its file contents instead)
      - type: basic
        from: { key_code: "y" } # y and z switched on German keyboard
        to_if_alone:
          # WARN needs to be written twice, once for German, once for English (see below)
          - shell_command: |
              SEL=$(osascript -e 'tell application "Finder" to POSIX path of (item 1 of (get selection) as text)')
              selection_count=$(osascript -e 'tell application "Finder" to count (selection as list)')

              if [[ -d "$SEL" && $selection_count -eq 1 ]] ; then
                cd "$SEL"
                foldername=$(basename "$SEL")
                zip --recurse-paths --symlinks "../$foldername.zip" .
                open -R "../$foldername.zip"

                current_vol=$(osascript -e 'output volume of (get volume settings)')
                vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
                (afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/Volume Mount.aif" &)
              else
                osascript -e '
                  tell application "System Events" to tell process "Finder"
                    click menu item "Compress" of menu "File" of menu bar 1
                  end tell'
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: z }
        to:
          # WARN needs to be written twice, once for German, once for English (see above)
          - shell_command: |
              SEL=$(osascript -e 'tell application "Finder" to POSIX path of (item 1 of (get selection) as text)')
              selection_count=$(osascript -e 'tell application "Finder" to count (selection as list)')

              if [[ -d "$SEL" && $selection_count -eq 1 ]] ; then
                cd "$SEL"
                foldername=$(basename "$SEL")
                zip --recurse-paths --symlinks "../$foldername.zip" .
                open -R "../$foldername.zip"

                current_vol=$(osascript -e 'output volume of (get volume settings)')
                vol_percent=$(echo "scale=2 ; $current_vol / 100" | bc) # afplay play with 100% volume by default
                (afplay --volume "$vol_percent" "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/Volume Mount.aif" &)
              else
                osascript -e '
                  tell application "System Events" to tell process "Finder"
                    click menu item "Compress" of menu "File" of menu bar 1
                  end tell'
              fi
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *not-German-keyboard]
      # toggle hidden files visibility
      - type: basic
        from: { key_code: period }
        to:
          - { key_code: period, modifiers: [command, shift] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/facetime/multiway_leave.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # Navigation
      # o = open/expand fold (O: do it recursively)
      - type: basic
        from: { key_code: o }
        to_if_alone:
          - key_code: right_arrow
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_unmute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: right_arrow, modifiers: [option] }
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_unmute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # i = close/collapse fold (I: do it recursively)
      - type: basic
        from: { key_code: i }
        to_if_alone:
          - key_code: left_arrow
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_mute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [shift] } }
        to_if_alone:
          - { key_code: left_arrow, modifiers: [option] }
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/mic_mute.caf" &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # <C-h>/<C-l> = History back/forward
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to_if_alone:
          - { key_code: semicolon, modifiers: [command] }
          - *leave-insert-mode # going back aborts searching / renames
        conditions: [*finder-app, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [control] } }
        to_if_alone:
          - { key_code: open_bracket, modifiers: [command] }
          - *leave-insert-mode
        conditions: [*finder-app, *not-find-mode, *not-German-keyboard]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to_if_alone:
          - { key_code: quote, modifiers: [command] }
          - *leave-insert-mode
        conditions: [*finder-app, *not-find-mode, *is-German-keyboard]
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [control] } }
        to_if_alone:
          - { key_code: close_bracket, modifiers: [command] }
          - *leave-insert-mode
        conditions: [*finder-app, *not-find-mode, *not-German-keyboard]
      #─────────────────────────────────────────────────────────────────────────
      # FIND MODE
      # Enter/Exit
      - type: basic
        from: { key_code: f }
        to_if_alone:
          - *enter-find-mode
          - *find-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # One-Char-Searches
      - type: basic
        from: { key_code: a, modifiers: { optional: [shift] } }
        to: [{ key_code: a }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: b, modifiers: { optional: [shift] } }
        to: [{ key_code: b }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: c, modifiers: { optional: [shift] } }
        to: [{ key_code: c }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: d, modifiers: { optional: [shift] } }
        to: [{ key_code: d }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: e, modifiers: { optional: [shift] } }
        to: [{ key_code: e }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: f, modifiers: { optional: [shift] } }
        to: [{ key_code: f }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: g, modifiers: { optional: [shift] } }
        to: [{ key_code: g }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: h, modifiers: { optional: [shift] } }
        to: [{ key_code: h }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: i, modifiers: { optional: [shift] } }
        to: [{ key_code: i }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: j, modifiers: { optional: [shift] } }
        to: [{ key_code: j }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: k, modifiers: { optional: [shift] } }
        to: [{ key_code: k }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: l, modifiers: { optional: [shift] } }
        to: [{ key_code: l }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: m, modifiers: { optional: [shift] } }
        to: [{ key_code: m }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: n, modifiers: { optional: [shift] } }
        to: [{ key_code: n }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: o, modifiers: { optional: [shift] } }
        to: [{ key_code: o }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: p, modifiers: { optional: [shift] } }
        to: [{ key_code: p }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: q, modifiers: { optional: [shift] } }
        to: [{ key_code: q }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: r, modifiers: { optional: [shift] } }
        to: [{ key_code: r }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: s, modifiers: { optional: [shift] } }
        to: [{ key_code: s }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: t, modifiers: { optional: [shift] } }
        to: [{ key_code: t }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: u, modifiers: { optional: [shift] } }
        to: [{ key_code: u }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: v, modifiers: { optional: [shift] } }
        to: [{ key_code: v }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: w, modifiers: { optional: [shift] } }
        to: [{ key_code: w }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: x, modifiers: { optional: [shift] } }
        to: [{ key_code: x }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: y, modifiers: { optional: [shift] } }
        to: [{ key_code: y }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: z, modifiers: { optional: [shift] } }
        to: [{ key_code: z }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: period }
        to: [{ key_code: period }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "0" }
        to: [{ key_code: "0" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "1" }
        to: [{ key_code: "1" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "2" }
        to: [{ key_code: "2" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "3" }
        to: [{ key_code: "3" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "4" }
        to: [{ key_code: "4" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "5" }
        to: [{ key_code: "5" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "6" }
        to: [{ key_code: "6" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "7" }
        to: [{ key_code: "7" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "8" }
        to: [{ key_code: "8" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      - type: basic
        from: { key_code: "9" }
        to: [{ key_code: "9" }, *leave-find-mode, *remove-find-notice]
        conditions: [*finder-app, *is-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      # MOVE
      # m = move
      - type: basic
        from: { key_code: m }
        to:
          - key_code: c
            modifiers: [command]
          - *start-move
          - *move-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # p / cmd+v = paste content marked for move thing
      - type: basic
        from: { key_code: p }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
        to:
          - key_code: v
            modifiers: [command, option]
          - *end-move
          - *remove-move-notice
      - type: basic
        from:
          key_code: v
          modifiers: { mandatory: [command] }
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
        to:
          - key_code: v
            modifiers: [command, option]
          - *end-move
          - *remove-move-notice
      # y / cmd+c = yank, which also aborts move
      - type: basic
        from: { key_code: "y" }
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
          - shell_command: |
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "✅ File(s) copied"
        conditions:
          [*finder-app, *not-insert-mode, *not-find-mode, *move-active, *not-German-keyboard]
      - type: basic
        from: { key_code: z } # y and z switched on German keyboard
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
        conditions:
          [*finder-app, *not-insert-mode, *not-find-mode, *move-active, *is-German-keyboard]
      - type: basic
        from:
          key_code: c
          modifiers: { mandatory: [command] }
        to:
          - key_code: c
            modifiers: [command]
          - *end-move
          - *remove-move-notice
        conditions: [*finder-app, *not-insert-mode, *not-find-mode, *move-active]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # SORT BY
      - type: basic # by name
        from: { key_code: "down_arrow" }
        to:
          - { key_code: "1", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "⬇️ Sort by name"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by modification date
        from: { key_code: "left_arrow" }
        to:
          - { key_code: "5", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "⬅️ Sort by modification date"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by size
        from: { key_code: "up_arrow" }
        to:
          - { key_code: "6", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "⬆️ Sort by size"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by kind
        from: { key_code: "right_arrow" }
        to:
          - { key_code: "2", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "➡️ Sort by kind"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic # by tags
        from: { key_code: "end" }
        to:
          - { key_code: "7", modifiers: [control, option, command] }
          - { key_code: "up_arrow", modifiers: [option] } # go to top
          - shell_command: |
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/end_record.caf" &
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "🔚 Sort by tags"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # NUMBER KEYS: TOGGLE TAGS
      # https://support.apple.com/guide/mac-help/tag-files-and-folders-mchlp15236/mac
      - type: basic
        from: { key_code: "1" }
        to:
          - { key_code: "1", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "2" }
        to:
          - { key_code: "2", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "3" }
        to:
          - { key_code: "3", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "4" }
        to:
          - { key_code: "4", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "5" }
        to:
          - { key_code: "5", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "6" }
        to:
          - { key_code: "6", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "7" }
        to:
          - { key_code: "7", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "8" }
        to:
          - { key_code: "8", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      - type: basic
        from: { key_code: "9" }
        to:
          - { key_code: "9", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # remove all tags
      - type: basic
        from: { key_code: "0" }
        to:
          - { key_code: "0", modifiers: [control] }
          - shell_command: |
              afplay '/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/acknowledgment_sent.caf' &
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      #─────────────────────────────────────────────────────────────────────────
      #─────────────────────────────────────────────────────────────────────────
      # MISCELLANEOUS
      # , (comma)
      - type: basic
        from: { key_code: comma }
        to:
          - shell_command: |
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "Finder Vim Mode" --message "☁️ Restarting iCloud…"
              afplay "/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/system/screen_sharing_started.caf" &
              killall bird
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-p: copy filepath
      - type: basic
        from: { key_code: p, modifiers: { mandatory: [control] } }
        to:
          - { key_code: "c", modifiers: [option, command] }
          - shell_command: |
              sleep 0.1 # wait for clipboard
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "✅ Absolute path copied" --message "$(pbpaste)"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-n: copy filename
      - type: basic
        from: { key_code: n, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              SEL=$(osascript -e 'tell application "Finder"
                set sel to (item 1 of (get selection) as text)
                return POSIX path of sel
              end tell')
              filename=$(basename "$SEL")
              printf "$filename" | pbcopy
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "✅ Filename copied" --message "$filename"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-t: copy git-relative path
      - type: basic
        from: { key_code: t, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              GIT_OPTIONAL_LOCKS=0
              SEL=$(osascript -e 'tell application "Finder"
                set sel to (item 1 of (get selection) as text)
                return POSIX path of sel
              end tell')
              cd "$(dirname "$SEL")" || exit 1
              if ! git rev-parse --is-inside-work-tree; then
                "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "Finder Vim Mode" --message "⚠️ Not in a git repo."
                exit 1
              fi
              root=$(git rev-parse --show-toplevel)
              root_length=${#root}
              rel_path=$(echo "$SEL" | cut -c$((root_length + 2))-)

              printf "$rel_path" | pbcopy
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                --title "✅ git-relative path copied" --message "$rel_path"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
      # ctrl-g: open at github
      - type: basic
        from: { key_code: g, modifiers: { mandatory: [control] } }
        to:
          - shell_command: |
              GIT_OPTIONAL_LOCKS=0
              SEL=$(osascript -e 'tell application "Finder"
                set sel to (item 1 of (get selection) as text)
                return POSIX path of sel
              end tell')
              if [[ ! -f "$SEL" ]] ; then
                "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "Finder Vim Mode" --message "⚠️ Selection not a file."
                exit 1
              fi
              cd "$(dirname "$SEL")" || exit 1
              if ! git rev-parse --is-inside-work-tree ; then
                "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "Finder Vim Mode" --message "⚠️ File not in a git repo."
                exit 1
              fi

              BRANCH=$(git branch --show-current)
              ROOT_PATH=$(git rev-parse --show-toplevel)
              ROOT_LEN=${#ROOT_PATH}
              REMOTE_URL="$(git remote -v | head -n1 | cut -f2 | cut -d' ' -f1 | sed -e's/:/\//' -e 's/git@/https:\/\//' -e 's/\.git//')"
              PATH_IN_REPO=${SEL:$ROOT_LEN}
              PATH_IN_REPO=$(osascript -l JavaScript -e "encodeURIComponent('$PATH_IN_REPO')")

              URL="$REMOTE_URL/blob/$BRANCH/$PATH_IN_REPO"
              printf "$URL" | pbcopy
              open "$URL"
              "$HOME/.config/karabiner/assets/finder-vim-mode/notificator" \
                  --title "✅ GitHub URL copied" --message "$URL"
        conditions: [*finder-app, *not-insert-mode, *not-find-mode]
