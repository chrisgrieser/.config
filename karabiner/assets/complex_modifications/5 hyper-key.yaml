# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: ⇪ Hyper
anchors:
  - from:
      modifiers: &hyper
        # INFO not using `cmd+opt+ctrl+shift` to avoid triggering
        # system diagnosis via `cmd+opt+ctrl+shift+.`
        mandatory: [command, control, option]
  #─────────────────────────────────────────────────────────────────────────────
rules:
  - description: "⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        # optional modifiers, so accidental `shift+caps` etc. does not trigger actual capslock
        from: { key_code: caps_lock, modifiers: { optional: [shift, control, option, command] } }
        to_if_alone:
          - { key_code: escape, lazy: true }
        to:
          - { key_code: right_command, modifiers: [control, option], lazy: true }
      # INFO Map freed-up `Esc` to clipboard (Alfred) / screenshot history
      # (CleanShot) (mapping done in `finder-vim-alfred-addon.yaml` to consider
      # Finder vim mode properly)
  #─────────────────────────────────────────────────────────────────────────────
  - description: "⇪ Dismiss Notification"
    manipulators:
      # dismiss notifications
      - type: basic
        from: { key_code: "9", modifiers: *hyper }
        to:
          - shell_command: |
              osascript -l JavaScript -e '
                Application("System Events")
                  .applicationProcesses.byName("NotificationCenter")
                  .windows[0]
                  .groups[0]
                  .scrollAreas[0]
                  .uiElements[0]
                  .groups()
                  .map(banner => banner.actions().slice(-1)[0])
                  .forEach(banner => banner.perform())
              '
      # show notifications
      - type: basic
        from: { key_code: "0", modifiers: *hyper }
        to:
          - { key_code: n, modifiers: [fn] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "⇪ Insert Mode Vim"
    manipulators:
      # Movement
      - type: basic
        from: { key_code: h, modifiers: *hyper }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: *hyper }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: *hyper }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: *hyper }
        to:
          - key_code: right_arrow
      - type: basic
        from: { key_code: p, modifiers: *hyper }
        to:
          - { key_code: e, modifiers: [control] }
      - type: basic
        from: { key_code: u, modifiers: *hyper }
        to:
          - { key_code: a, modifiers: [control] }
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: *hyper }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: *hyper }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word
      - type: basic
        from: { key_code: spacebar, modifiers: *hyper }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: delete_or_backspace, modifiers: [option] } # delete word
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word
