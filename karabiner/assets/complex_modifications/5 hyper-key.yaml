# yaml-language-server: $schema=./schema/karabiner-mod-schema.json
title: ⇪ Hyper
rules:
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
        to:
          # INFO not using cmd+opt+ctrl+shift to avoid triggering system
          # diagnosis via cmd+opt+ctrl+shift+.
          - { key_code: right_command, modifiers: [control, option] }
      # Map Esc to F18 (clipboard / screenshot history)
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"
        # INFO condition to avoid conflict with finder-vim-mode; mapping to f18
        # is done in finder-vim-alfred-addon.yaml
        conditions:
          - { type: frontmost_application_unless, bundle_identifiers: [^com\.apple\.finder$] }
      # Restart Alfred & Alfred Preferences
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [command, control, option] } }
        to:
          - shell_command: |
              osascript -e 'display notification "" with title "Restarting Alfred…"'
              killall -9 "Alfred"
              killall "Alfred Preferences"
              while pgrep -xq "Alfred"; do sleep 0.1; done
              sleep 0.1
              open -a "Alfred 5"
              open -a "Alfred Preferences"
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to search'
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Insert Mode Vim: ⇪ Hyper + hjklio<space> → ⌫←↓↑→"
    manipulators:
      # deletion
      - type: basic
        from: { key_code: "c", modifiers: { mandatory: [option, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      - type: basic
        from: { key_code: "x", modifiers: { mandatory: [option, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      #─────────────────────────────────────────────────────────────────────────
      # Movement
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [option, command, control] } }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [option, command, control] } }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [option, command, control] } }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option, command, control] } }
        to:
          - key_code: right_arrow
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [option, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [option, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word (use ⌘J from utility hotkeys for changing a word)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [option, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: delete_or_backspace, modifiers: [option] } # delete word
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word
