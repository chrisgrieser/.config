title: ⇪ Hyper
rules:
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
        to:
          - { key_code: right_shift, modifiers: [control, option, command] }
      # Map Esc to F18 (clipboard / screenshot history)
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"
        # INFO condition to avoid conflict with finder-vim-mode; mapping to f18
        # is done in finder-vim-alfred-addon.yaml
        conditions:
          - type: frontmost_application_unless
            bundle_identifiers: [^com\.apple\.finder$]
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪R: Restart App"
    manipulators:
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          # INFO not done via Alfred because of https://github.com/neovide/neovide/issues/1604
          # INFO Quitting via :wqall instead of cmd+Q so bufferleaving autocmds are triggered
          - shell_command: |
              export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:$PATH

              FRONT_APP=$(osascript -e 'tell application "System Events" to return name of first process whose frontmost is true')
              if [[ "$FRONT_APP" == "neovide" ]]; then
                FRONT_APP="nvim"
                nvim --server "/tmp/nvim_server.pipe" --remote-send "<cmd>try|wqall|catch|qall|endtry<CR>"
              else
                killall "$FRONT_APP"
              fi

              i=0
              while pgrep -xq "$FRONT_APP"; do 
                i=$((i+1))
                sleep 0.05
                if [[ $i -eq 50 ]]; then
                  osascript -e "display notification \"Trying to force kill it…\" with title \"$FRONTAPP is hangup.\""
                  killall -9 "$FRONT_APP"
                  sleep 0.2
                elif [[ $i -eq 51 ]]; then
                  osascript -e "display notification \"\" with title \"Could not force kill $FRONTAPP.\""
                  return 1
                end
              done

              if [[ "$FRONT_APP" == "nvim" ]]; then
                # bwipeout necessary due to empty buffer created before jumping to '0
                neovide --notabs --frame=buttonless --geometry=104x33 -- -c "execute \"normal! '0\" | bwipeout #" &
                disown # https://stackoverflow.com/a/20338584/22114136
              elif [[ "$FRONT_APP" == "wezterm-gui" ]]; then
                open -a "WezTerm"
              else
                open -a "$FRONT_APP"
              fi
      # Restart Alfred & Alfred Preferences
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              osascript -e 'display notification "" with title "Restarting Alfred…"'
              killall -9 "Alfred"
              killall "Alfred Preferences"
              while pgrep -xq "Alfred"; do sleep 0.1; done
              sleep 0.1
              open -a "Alfred 5"
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to search'
              open -a "Alfred Preferences"
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Insert Mode Vim: ⇪ Hyper + hjklio<space> → ⌫←↓↑→"
    manipulators:
      # deletion
      - type: basic
        from: { key_code: "c", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      - type: basic
        from: { key_code: "x", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      #─────────────────────────────────────────────────────────────────────────
      # Movement
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: right_arrow
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word (use ⌘J from utility hotkeys for changing a word)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: delete_or_backspace, modifiers: [option] } # delete word
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word

      #─────────────────────────────────────────────────────────────────────

      # SYSDIAGNOSIS
      # HACK disable accidental triggering of via `Hyper+.` and `Hyper+,`.
      # Needs different versions to disable it for variants from quick typing
      - type: basic
        from: { key_code: period, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from:
          simultaneous:
            - key_code: period
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
      - type: basic
        from:
          simultaneous:
            - key_code: comma
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: period
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
