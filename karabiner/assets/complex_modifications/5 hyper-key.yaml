# yaml-language-server: $schema=./karabiner-schema.json
title: ⇪ Hyper
rules:
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪ Capslock → Hyper/Esc"
    manipulators:
      - type: basic
        from: { key_code: caps_lock }
        to_if_alone:
          - key_code: escape
        to:
          - { key_code: right_shift, modifiers: [control, option, command] }
      # Map Esc to F18 (clipboard / screenshot history)
      - type: basic
        from: { key_code: escape }
        to_if_alone:
          - key_code: f18
        to_if_held_down:
          - shell_command: open "cleanshot://open-history"
        # INFO condition to avoid conflict with finder-vim-mode; mapping to f18
        # is done in finder-vim-alfred-addon.yaml
        conditions:
          - { type: frontmost_application_unless, bundle_identifiers: [^com\.apple\.finder$] }
  #─────────────────────────────────────────────────────────────────────────────
  - description: "*️⃣ ⇪R: Restart App"
    manipulators:
      - type: basic
        from: { key_code: r, modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              FRONT_APP=$(osascript -e 'tell application "System Events" to return name of first process whose frontmost is true')
              killall "$FRONT_APP"

              # wait for 5 secs
              i=0
              while pgrep -xq "$FRONT_APP"; do 
                i=$((i+1))
                sleep 0.05
                if [[ $i -gt 100 ]]; then 
                  osascript -e "display notification \"\" with title \"Could not quit $FRONT_APP\""
                  return 1
                fi
              done

              [[ "$FRONT_APP" == "wezterm-gui" ]] && FRONT_APP="WezTerm"
              open -a "$FRONT_APP"
          # INFO Neovide binding for restarting is in vim-helpers.yaml
        conditions:
          - { type: frontmost_application_unless, file_paths: ["[Nn]eovide"] }
      # Restart Alfred & Alfred Preferences
      - type: basic
        from: { key_code: "5", modifiers: { mandatory: [command, control, shift, option] } }
        to:
          - shell_command: |
              osascript -e 'display notification "" with title "Restarting Alfred…"'
              killall -9 "Alfred"
              killall "Alfred Preferences"
              while pgrep -xq "Alfred"; do sleep 0.1; done
              sleep 0.1
              open -a "Alfred 5"
              open -a "Alfred Preferences"
              osascript -e 'tell application id "com.runningwithcrayons.Alfred" to search'
  #─────────────────────────────────────────────────────────────────────────────
  - description: "Insert Mode Vim: ⇪ Hyper + hjklio<space> → ⌫←↓↑→"
    manipulators:
      # deletion
      - type: basic
        from: { key_code: "c", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      - type: basic
        from: { key_code: "x", modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [command, shift] }
          - key_code: delete_or_backspace
      #─────────────────────────────────────────────────────────────────────────
      # Movement
      - type: basic
        from: { key_code: h, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: left_arrow
      - type: basic
        from: { key_code: j, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: down_arrow
      - type: basic
        from: { key_code: k, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: up_arrow
      - type: basic
        from: { key_code: l, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - key_code: right_arrow
      # word to the left
      - type: basic
        from: { key_code: i, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: left_arrow, modifiers: [option] }
      # word to the right
      - type: basic
        from: { key_code: o, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] }
      # delete word (use ⌘J from utility hotkeys for changing a word)
      - type: basic
        from: { key_code: spacebar, modifiers: { mandatory: [option, shift, command, control] } }
        to:
          - { key_code: right_arrow, modifiers: [option] } # to the right end of the word
          - { key_code: delete_or_backspace, modifiers: [option] } # delete word
          - key_code: delete_or_backspace # delete the space
          - key_code: right_arrow # go to next word

      #─────────────────────────────────────────────────────────────────────

      # SYSDIAGNOSIS
      # HACK disable accidental triggering of via `Hyper+.` and `Hyper+,`.
      # Needs different versions to disable it for variants from quick typing
      - type: basic
        from: { key_code: period, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from: { key_code: comma, modifiers: { mandatory: [command, control, shift, option] } }
        to: [key_code: vk_none]
      - type: basic
        from:
          simultaneous:
            - key_code: period
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
      - type: basic
        from:
          simultaneous:
            - key_code: comma
            - key_code: command
            - key_code: shift
            - key_code: control
            - key_code: option
            - key_code: period
        to: [key_code: vk_none]
        parameters: { basic.simultaneous_threshold_milliseconds: 400 }
