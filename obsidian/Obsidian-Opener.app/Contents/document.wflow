<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>521.1</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>#!/usr/bin/env osascript -l JavaScript
// INFO https://forum.obsidian.md/t/make-obsidian-a-default-app-for-markdown-files-on-macos/22260

/** @param {any} input */
// rome-ignore lint/correctness/noUnusedVariables: &lt;explanation&gt;
function run(input) {
	// ðŸ‘‰ CONFIG
	const markdownApp = "Neovim"; // default markdown app
	let vaultDummyFolder = "~/main-vault/Meta/outside-canvas-symlink-temp/"; // where outside canvas symlinks will be placed

	//â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

	const app = Application.currentApplication();
	app.includeStandardAdditions = true;
	const home = app.pathTo("home folder");

	vaultDummyFolder = vaultDummyFolder.replace(/^~/, home);
	if (!vaultDummyFolder.endsWith("/")) vaultDummyFolder += "/"; // ensure trailing slash for `ln`

	const pathArray = input.toString().split(",");
	const obsidianJsonFilePath = home + "/Library/Application Support/obsidian/obsidian.json";
	const vaults = JSON.parse(app.read(obsidianJsonFilePath)).vaults;

	// conditions for deciding where to open
	let firstFile = pathArray[0];
	const isFileInObsidianVault = Object.values(vaults).some(vault =&gt; firstFile.startsWith(vault.path));
	const obsidianIsFrontmost = Application("Obsidian").frontmost();
	const isInHiddenFolder = firstFile.includes("/.");

	// Hidden Folder means '.obsidian' or '.trash', which cannot be opened in Obsidian
	// When Obsidian is frontmost, it means the "Open in default app" command was
	// used, for which we also do not open right in Obsidian again
	const openInObsidian = isFileInObsidianVault &amp;&amp; !isInHiddenFolder &amp;&amp; !obsidianIsFrontmost;
	const canvasOutside = firstFile.endsWith(".canvas") &amp;&amp; (!isFileInObsidianVault || isInHiddenFolder)

	// symlink outside canvas
	if (canvasOutside) {
		const firstFileBasename = firstFile.replace(/.*\//, "");
		app.doShellScript(`mkdir -p "${vaultDummyFolder}"`);
		app.doShellScript(`rm "${vaultDummyFolder}"* || true`); // remove any existing symlinks
		app.doShellScript(`ln -sf '${firstFile}' '${vaultDummyFolder}'`);
		delay(0.1); // buffer so the new symlink is registered by Obsidian
		firstFile = vaultDummyFolder + firstFileBasename;
	}

	if (openInObsidian || canvasOutside) {
		app.openLocation("obsidian://open?path=" + encodeURIComponent(firstFile));
		if (pathArray.length &gt; 1) {
			app.displayNotification("opening: " + firstFile, { withTitle: "Obsidian can only open one file at a time." });
		}
	} else {
		// opens *all* selected files if they are not in Obsidian
		const quotedPathArray = `'${pathArray.join("' '")}'`;
		app.doShellScript(`open -a '${markdownApp}' ${quotedPathArray}`);
	}
}
</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>D8574E26-FD24-4198-AEED-F7651D2C97D9</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>213A5F58-FB47-4AA5-A818-FEDA8E40AB63</string>
				<key>UUID</key>
				<string>0A67A94D-4E27-406A-93FB-8713B604F730</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>309.000000:315.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
