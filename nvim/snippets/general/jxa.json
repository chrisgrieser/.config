{
  "app (define)": {
    "body": [
      "const app = Application.currentApplication()",
      "app.includeStandardAdditions = true;"
    ],
    "prefix": "app (define)"
  },
  "browser URL & title (all-browser function)": {
    "body": [
      "function browserTab() {",
      "\tconst frontmostAppName = Application(\"System Events\")",
      "\t.applicationProcesses.where({ frontmost: true })",
      "\t.name()[0];",
      "\tconst frontmostApp = Application(frontmostAppName);",
      "\t// biome-ignore format: long",
      "\tconst chromiumVariants = [ \"Google Chrome\", \"Chromium\", \"Opera\", \"Vivaldi\", \"Brave Browser\", \"Microsoft Edge\", \"Arc\" ];",
      "\tconst webkitVariants = [\"Safari\", \"Webkit\"];",
      "\tlet title, url;",
      "\tif (chromiumVariants.some((appName) => frontmostAppName.startsWith(appName))) {",
      "\t\t// @ts-ignore",
      "\t\turl = frontmostApp.windows[0].activeTab.url();",
      "\t\t// @ts-ignore",
      "\t\ttitle = frontmostApp.windows[0].activeTab.name();",
      "\t} else if (webkitVariants.some((appName) => frontmostAppName.startsWith(appName))) {",
      "\t\t// @ts-ignore",
      "\t\turl = frontmostApp.documents[0].url();",
      "\t\t// @ts-ignore",
      "\t\ttitle = frontmostApp.documents[0].name();",
      "\t} else {",
      "\t\tapp.displayNotification(\"\", {",
      "\t\t\twithTitle: \"You need a supported browser as your frontmost app\",",
      "\t\t\tsubtitle: \"\",",
      "\t\t});",
      "\t\treturn;",
      "\t}",
      "\t\treturn { url: url, title: title };",
      "}"
    ],
    "prefix": "browser URL & title (function)"
  },
  "cache (check if outdated)": {
    "body": [
      "/** @param {string} path */",
      "function cacheIsOutdated(path) {",
      "\tconst cacheAgeThresholdMins = ${1:60};",
      "\tensureCacheFolderExists();",
      "\tconst cacheObj = Application(\"System Events\").aliases[path];",
      "\tif (!cacheObj.exists()) return true;",
      "\tconst cacheAgeMins = (+new Date() - +cacheObj.creationDate()) / 1000 / 60;",
      "\treturn cacheAgeMins > cacheAgeThresholdMins;",
      "}"
    ],
    "prefix": "cache (check if outdated)"
  },
  "check if app is frontmost": {
    "body": "Application(\"${1:appName}\").frontmost();",
    "prefix": "check if app is frontmost"
  },
  "check if app is running": {
    "body": "Application(\"${1:appName}\").running()",
    "prefix": "check if app is running"
  },
  "file exists": {
    "body": "const fileExists = (/** @type {string} */ filePath) => Application(\"Finder\").exists(Path(filePath));",
    "prefix": "file exists"
  },
  "file1 is older than file2": {
    "body": [
      "/**",
      " * @param {string} path1",
      " * @param {string} path2",
      " * @return {boolean}",
      " */",
      "function fileOlderThan(path1, path2) {",
      "\tconst file1 = Application(\"System Events\").aliases[path1];",
      "\tif (!file1.exists()) return false;",
      "\tconst file2 = Application(\"System Events\").aliases[path2];",
      "\treturn file1.modificationDate() < file2.modificationDate();",
      "}"
    ],
    "prefix": "file1 is older than file2"
  },
  "front app (process)": {
    "body": [
      "const frontAppName = Application(\"System Events\").processes.whose({ frontmost: true })[0];"
    ],
    "prefix": "front app (process)"
  },
  "front window path (Finder)": {
    "body": "const finderWinp = decodeURIComponent(Application(\"Finder\").insertionLocation().url().slice(7));",
    "prefix": "front window path (Finder)"
  },
  "front window title": {
    "body": [
      "const frontWinName = Application(\"System Events\").processes.whose({ frontmost: true })[0].windows[0].name();"
    ],
    "prefix": "front window title"
  },
  "get Finder item": {
    "body": "Application(\"System Events\").aliases[${1:filepath}];",
    "description": "https://apple.stackexchange.com/a/409691",
    "prefix": "get Finder item"
  },
  "get clipboard": {
    "body": [
      "app.includeStandardAdditions = true;",
      "const clipb = app.theClipboard();"
    ],
    "prefix": "get clipboard"
  },
  "hide app": {
    "body": [
      "const process = Application(\"System Events\").applicationProcesses.byName(\"${1:processName}\");",
      "if (process) { process.visible = false; }"
    ],
    "prefix": "hide app"
  },
  "home (JXA)": {
    "body": "app.pathTo(\"home folder\")",
    "prefix": "home (JXA)"
  },
  "httpRequest": {
    "body": [
      "/** @param {string} url @return {string} */",
      "function httpRequest(url) {",
      "\tconst queryURL = \\$.NSURL.URLWithString(url);",
      "\tconst data = \\$.NSData.dataWithContentsOfURL(queryURL);",
      "\treturn \\$.NSString.alloc.initWithDataEncoding(data, \\$.NSUTF8StringEncoding).js;",
      "}"
    ],
    "description": "http request via c-bridge",
    "prefix": "httpRequest"
  },
  "keystroke": {
    "body": "Application(\"System Events\").keystroke(\"${1:key}\", {using: [\"${2:command} down\"]});",
    "prefix": "keystroke"
  },
  "menu item": {
    "body": [
      "Application(\"${1:appName}\").activate();",
      "Application(\"System Events\").processes.byName(\"${1:appName}\").menuBars[0].menuBarItems.byName(\"${2:menu}\").menus[0].menuItems.byName(\"${3:menuItem}\").click()"
    ],
    "description": "https://github.com/JXA-Cookbook/JXA-Cookbook/wiki/System-Events#clicking-menu-items",
    "prefix": "menu item"
  },
  "notification": {
    "body": "app.displayNotification(\"\", { withTitle: \"${1:title}\", subtitle: \"${2:subtitle}\" })",
    "prefix": [
      "notification",
      "displayNotification"
    ]
  },
  "open file": {
    "body": "const openFile = (/** @type {string} */ path) => Application(\"Finder\").open(Path(path));",
    "prefix": "open file"
  },
  "open location (url)": {
    "body": "app.openLocation(\"${1:url}\");",
    "prefix": "open location (url)"
  },
  "read file": {
    "body": [
      "/** @param {string} path */",
      "function readFile(path) {",
      "\tconst data = \\$.NSFileManager.defaultManager.contentsAtPath(path);",
      "\tconst str = \\$.NSString.alloc.initWithDataEncoding(data, \\$.NSUTF8StringEncoding);",
      "\treturn ObjC.unwrap(str);",
      "}"
    ],
    "prefix": "read file"
  },
  "run (JXA)": {
    "body": [
      "// biome-ignore lint/correctness/noUnusedVariables: Alfred run",
      "function run() {",
      "\t$0",
      "}"
    ],
    "prefix": "run (JXA)"
  },
  "running apps array": {
    "body": "Application(\"System Events\").applicationProcesses.where({ backgroundOnly: false }).displayedName();",
    "prefix": "running apps array"
  },
  "selection (Finder)": {
    "body": [
      "function finderSelection () {",
      "\tconst selection = decodeURI(Application(\"Finder\").selection()[0]?.url());",
      "\tif (selection === \"undefined\") return \"\"; // no selection",
      "\treturn selection.slice(7);",
      "}"
    ],
    "prefix": "selection (Finder)"
  },
  "set clipboard (file)": {
    "body": [
      "ObjC.import(\"AppKit\");",
      "",
      "/** @param {string} path */",
      "function copyPathToClipboard(path) {",
      "\tconst pasteboard = \\$.NSPasteboard.generalPasteboard;",
      "\tpasteboard.clearContents;",
      "\tconst success = pasteboard.setPropertyListForType(\\$([path]), \\$.NSFilenamesPboardType);",
      "\treturn success;",
      "}"
    ],
    "description": "https://github.com/JXA-Cookbook/JXA-Cookbook/wiki/User-Interaction-with-Files-and-Folders#copy-a-file-to-pasteboard",
    "prefix": "set clipboard (file)"
  },
  "set clipboard (string)": {
    "body": "app.setTheClipboardTo(${1:\"str\"});",
    "prefix": "set clipboard (string)"
  },
  "shebang": {
    "body": "#!/usr/bin/env osascript -l JavaScript",
    "prefix": "shebang (jxa)"
  },
  "write to file": {
    "body": [
      "/** @param {string} filepath @param {string} text */",
      "function writeToFile(filepath, text) {",
      "\tconst str = \\$.NSString.alloc.initWithUTF8String(text);",
      "\tstr.writeToFileAtomicallyEncodingError(filepath, true, \\$.NSUTF8StringEncoding, null);",
      "}"
    ],
    "prefix": "write to file"
  }
}
