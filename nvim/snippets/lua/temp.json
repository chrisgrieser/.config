{
	"trim trailing line break": {
		"prefix": [":gsub", "gsub", "trim trailing line break"],
		"body": ":gsub(\"0$\", \"\")"
	},
	"ignore (stylua)": {
		"prefix": "ignore (stylua)",
		"body": [
         "-- stylua: ignore start",
         "-- stylua: ignore end"
      ]
	},
	"ignore block (stylua)": {
		"prefix": "ignore block (stylua)",
		"body": "-- stylua: ignore"
	},
	"ignore (selene)": {
		"prefix": "ignore (selene)",
		"body": "-- selene: allow(${1:rule_name})"
	},
	"keymap": {
		"prefix": "keymap",
		"body": "keymap(\"n\", \"$1\", $2, { desc = \"\" }"
	},
	"keymap (multi mode)": {
		"prefix": "keymap (multi-mode)",
		"body": "keymap({ \"n\", \"x\" }, \"$1\", $2, { desc = \"\" }"
	},
	"keymap (buffer)": {
		"prefix": "keymap (buffer)",
		"body": "keymap(\"n\", \"$1\", $2, { desc = \"\", buffer = true }"
	},
	"get selection (Finder)": {
		"prefix": "get selection (Finder)",
		"body": "'tell application "Finder" to return POSIX path of (selection as alias)'"
	},
	"browser URL": {
		"prefix": "browser URL",
		"body": "tell application \"Brave Browser\" to set currentTabUrl to URL of active tab of front window"
	},
	"notify": {
		"prefix": "notify",
		"body": "'display notification "${2:subtitle}" with title "${1:title}"
	},
	"shebang"
$0")": {
		"prefix": "shebang"
$0")",
		"body": "#!/usr/bin/env osascript"
	},
	"keystroke": {
		"prefix": "keystroke",
		"body": "[[tell application "System Events" to keystroke "${1:key}" using {${2:command} down}]]"
	},
	"key code": {
		"prefix": "key code",
		"body": "[[tell application "System Events" to key code "${1:num}"]]"
	},
	"home": {
		"prefix": "home",
		"body": "(POSIX path of (path to home folder as string))"
	},
	"Get Alfred Env": {
		"prefix": "Get Alfred Env",
		"body": "'set ${1:envvar} to (system attribute "${1:envvar}")'"
	},
	"argv"
$0")": {
		"prefix": "argv"
$0")",
		"body": "set input to argv as string"
	},
	"info (GitHub Callout)"
> $0")": {
		"prefix": "info (GitHub Callout)"
> $0")",
		"body": "> __Note__  "
	},
	"note (GitHub Callout)"
> $0")": {
		"prefix": "note (GitHub Callout)"
> $0")",
		"body": "> __Note__  "
	},
	"warning (GitHub Callout)"
> $0")": {
		"prefix": "warning (GitHub Callout)"
> $0")",
		"body": "> __Warning__  "
	},
	"vale ignore (Comment)"
<!-- vale ${1:Style}.${2:Rule} = YES -->")": {
		"prefix": "vale ignore (Comment)"
<!-- vale ${1:Style}.${2:Rule} = YES -->")",
		"body": "<!-- vale ${1:Style${}.${2:Rule} = NO -->"
	},
	"ignore (tsignore)": {
		"prefix": "ignore (tsignore)",
		"body": "// @ts-ignore"
	},
	"replace": {
		"prefix": "replace",
		"body": "'replace(/${1:regexp}/gm"
	},
	"ternary": {
		"prefix": "ternary",
		"body": "${1:cond} ? ${2:yes} : ${3:no}"
	},
	"ISO date": {
		"prefix": "ISO date",
		"body": "new Date().toISOString().slice(0"
	},
	"ignore (prettier)"
$0")": {
		"prefix": "ignore (prettier)"
$0")",
		"body": "// prettier-ignore"
	},
	"running check": {
		"prefix": "running check",
		"body": "'Application("${1:appName}").running()'"
	},
	"check frontmost": {
		"prefix": "check frontmost",
		"body": "'Application("${1:appName}").frontmost();'"
	},
	"running apps array": {
		"prefix": "running apps array",
		"body": "'Application("System Events").applicationProcesses.where({ backgroundOnly: false }).displayedName();'"
	},
	"running apps array": {
		"prefix": "running apps array",
		"body": "'app.displayNotification("${1:msg}"
	},
	"shebang"
$0")": {
		"prefix": "shebang"
$0")",
		"body": "#!/usr/bin/env osascript -l JavaScript"
	},
	"online JSON": {
		"prefix": "online JSON",
		"body": "'const onlineJSON = (url) => JSON.parse(app.doShellScript(`curl -s "${url}"`));'"
	},
	"app"
app.includeStandardAdditions = true;
$0")": {
		"prefix": "app"
app.includeStandardAdditions = true;
$0")",
		"body": "const app = Application.currentApplication();
pp.includeStandardAdditions = true;"
	},
	"shell script"
$0")": {
		"prefix": "shell script"
$0")",
		"body": "app.doShellScript(`${1:shellscript}`);"
	},
	"open"
$0')": {
		"prefix": "open"
$0')",
		"body": "'app.openLocation("${1:url}");"
	},
	"clipboard"
$0')": {
		"prefix": "clipboard"
$0')",
		"body": "'app.setTheClipboardTo("${1:str}");"
	},
	"home (JXA)": {
		"prefix": "home (JXA)",
		"body": "'app.pathTo("home folder")'"
	},
	"resolve home (JXA)": {
		"prefix": "resolve home (JXA)",
		"body": "'const ${1:vari} = $.getenv("${2:envvar}").replace(/^~/"
	},
	"exists (file)"
$0')": {
		"prefix": "exists (file)"
$0')",
		"body": "'const fileExists = (filePath) => Application("Finder").exists(Path(filePath));"
	},
	"Get Alfred Env"
$0')": {
		"prefix": "Get Alfred Env"
$0')",
		"body": "'const ${1:envVar} = $.getenv("${2:envVar}");"
	},
}
