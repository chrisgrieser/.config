{
	"def / function": {
		"prefix": ["def", "function"],
		"body": ["def ${1:name}($2) -> ${3|None,str,int,dict|}:", "\t\"\"\"${4:Insert docstring.}\"\"\"", "$0"],
		"description": "function with docstring"
	},
	"ternary operator": {
		"prefix": "ternary operator",
		"body": "${1:value1} if ${2:condition} else ${3:value2}"
	},
	"if": {
		"prefix": "if",
		"body": "if ${1:condition}:\n\t${2:pass}$0"
	},
	"if/else": {
		"prefix": "if/else",
		"body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"]
	},
	"elif": {
		"prefix": "elif",
		"body": ["elif ${1:expression}:", "\t${2:pass}"]
	},
	"for each (list)": {
		"prefix": "for each (list)",
		"body": ["for ${1:var} in ${2:list}:", "\t${3:pass}"],
		"description": "desc"
	},
	"for each (key/value)": {
		"prefix": "for each (key/value)",
		"body": ["for ${1:key}, ${2:value} in enumerate(${3:list}):", "\t${3:pass}"],
		"description": "desc"
	},
	"else": {
		"prefix": "else",
		"body": ["else:", "\t${1:pass}"]
	},
	"while": {
		"prefix": "while",
		"body": "while ${1:condition}:\n\t${2:pass}$0"
	},
	"if __name__ == \"__main__\"": {
		"prefix": ["__main__", "ifmain"],
		"body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
		"description": "Create implicitly all the code at the top level using the __name__ special variable."
	},
	"List comprehension": {
		"prefix": ["lc", "list comprehension"],
		"body": "list(${1:value} for ${2:value} in ${3:iterable})$0",
		"description": "List comprehension for creating a list based on existing lists."
	},
	"lambda": {
		"prefix": "lambda",
		"body": ["lambda ${1:parameter, list}: ${2:expression}"],
		"description": "Creates a lambda function, an anonymous function in python."
	},
	"async/def": {
		"prefix": "async/def",
		"body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"]
	},
	"async/for": {
		"prefix": "async/for",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"]
	},
	"async/for/else": {
		"prefix": "async/for/else",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}", "else:", "\t${4:block}"]
	},
	"async/with": {
		"prefix": "async/with",
		"body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"]
	}
}
