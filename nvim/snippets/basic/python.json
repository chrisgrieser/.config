{
	"if": {
		"prefix": "if",
		"body": "if ${1:condition}:\n\t${2:pass}$0",
		"description": "Code snippet for the if statement."
	},
	"if/else": {
		"prefix": "if/else",
		"body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
		"description": "Code snippet for an if statement with else"
	},
	"elif": {
		"prefix": "elif",
		"body": ["elif ${1:expression}:", "\t${2:pass}"],
		"description": "Code snippet for an elif"
	},
	"else": {
		"prefix": "else",
		"body": ["else:", "\t${1:pass}"],
		"description": "Code snippet for an else"
	},
	"for": {
		"prefix": "for",
		"body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
		"description": "Code snippet to create a for loop structure."
	},
	"for/else": {
		"prefix": "for/else",
		"body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}", "else:", "\t${4:pass}"],
		"description": "Code snippet for a for loop with else"
	},
	"while": {
		"prefix": "while",
		"body": "while ${1:condition}:\n\t${2:pass}$0",
		"description": "Code snippet to create a while loop structure."
	},
	"while/else": {
		"prefix": "while/else",
		"body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
		"description": "Code snippet for a while loop with else"
	},
	"__magic__": {
		"prefix": "__",
		"body": "__${1:init}__$0",
		"description": "Code snippet to create magic methods."
	},
	"if __name__ == \"__main__\"": {
		"prefix": "ifmain",
		"body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
		"description": "Create implicitly all the code at the top level using the __name__ special variable."
	},
	"List comprehension": {
		"prefix": "lc",
		"body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
		"description": "List comprehension for creating a list based on existing lists."
	},
	"def(class method)": {
		"prefix": "def class method",
		"body": ["def ${1:funcname}(self, ${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for a class method"
	},
	"def(static class method)": {
		"prefix": "def static class method",
		"body": ["@staticmethod", "def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for a static class method"
	},
	"def(abstract class method)": {
		"prefix": "def abstract class method",
		"body": ["def ${1:funcname}(self, ${2:parameter_list}):", "\traise NotImplementedError"],
		"description": "Code snippet for an abstract class method"
	},
	"lambda": {
		"prefix": "lambda",
		"body": ["lambda ${1:parameter_list}: ${2:expression}"],
		"description": "Code snippet for a lambda statement"
	},
	"if(main)": {
		"prefix": "__main__",
		"body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
		"description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
	},
	"async/def": {
		"prefix": "async/def",
		"body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for an async statement"
	},
	"async/for": {
		"prefix": "async/for",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
		"description": "Code snippet for an async for statement"
	},
	"async/for/else": {
		"prefix": "async/for/else",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}", "else:", "\t${4:block}"],
		"description": "Code snippet for an async for statement with else"
	},
	"async/with": {
		"prefix": "async/with",
		"body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
		"description": "Code snippet for an async with statement"
	}
}
