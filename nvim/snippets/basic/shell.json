{
	"shebang": {
		"prefix": "shebang",
		"body": "#!/usr/bin/env zsh"
	},
	"default arg value": {
		"prefix": "default arg value",
		"body": "${1:input}=${1-\"${2:default_value}\"}"
	},
	"slice": {
		"prefix": "slice (expansion)",
		"body": "${${1:var}:${2:start}:${3:length}}"
	},
	"substitute": {
		"prefix": "substitute (expansion)",
		"body": "${${1:var}//${2:search}/${3:replace}}",
		"description": "one slash for single substitution, two for global substitution"
	},
	"PATH": {
		"prefix": "PATH",
		"body": "export PATH=/usr/local/lib:/usr/local/bin:/opt/homebrew/bin/:\\$PATH"
	},
	"resolve home": {
		"prefix": "resolve home",
		"body": "${1:path}=\"${${1:path}/#\\~/\\$HOME}\""
	},
	"filename": {
		"prefix": "filename",
		"body": "file_name=$(basename \"$${1:file_path}\")"
	},
	"parent folder": {
		"prefix": "parent folder",
		"body": "$(dirname \"$${1:filepath}\")"
	},
	"ext": {
		"prefix": "ext",
		"body": "ext=${${1:file_name}shebang*.}"
	},
	"filename w/o ext": {
		"prefix": "filename w/o ext",
		"body": "${1:file_name}=${${1:file_name}%.*}"
	},
	"directory of script": {
		"prefix": "directory of script",
		"body": "cd \"$(dirname \"\\$0\")"
	},
	"multiline string": {
		"prefix": "multiline string",
		"body": [
			"${1:var}=$(cat <<EOF",
			"$0",
			"EOF",
			")"
		]
	},
	"xargs (for each line)": {
		"prefix": "xargs (for each line)",
		"body": "xargs -I {} ${1:some_cmd} '{}'"
	},
		"notify (var)": {
		"prefix": "notify (var)",
		"body": "osascript -e \"display notification \\\"\\\" with title \\\"$${1:var}\\\"\""
	},
	"notify (msg)": {
		"prefix": "notify (msg)",
		"body": "osascript -e 'display notification \"\" with title \"${1:msg}\"'"
	},
	"if (short)": {
		"prefix": "if: [[ .. ]] && ..",
		"body": "[[ \"$${1:var}\" ]] && $0"
	},
	"then": {
		"prefix": "then .. fi",
		"body": "then\n\t$0\nfi"
	},
	"ternary": {
		"prefix": "ternary",
		"body": "[[ \"$${1:cond}\" ]] && ${2:var}=\"$${3:one}\" || ${2:var}=\"$${4:two}\""
	},
	"if .. then": {
		"prefix": "if .. then",
		"body": "if [[ \"$${1:var}\" ]]; then\n\t$0\nfi"
	},
	"check installed": {
		"prefix": "check installed",
		"body": "if ! command -v ${1:cli} &>/dev/null; then echo \"${1:cli} not installed.\" && return 1; fi"
	},
	"awk (get field)": {
		"prefix": "awk (field)",
		"body": "awk '{ print $${1:1} }'",
		"description": "Retrieve a field from the piped in string, with whitespace as the default field delimiter. `$n` means that the nth field will be used."
	},
	"sed (replacement)": {
		"prefix": "sed (replacement)",
		"body": "sed -E 's/${1:pattern}/${2:replacement}/g'"
	},
	"stderr (pipe)": {
		"prefix": "stderr (pipe)",
		"body": "2>&1"
	},
	"null (pipe)": {
		"prefix": "null (pipe)",
		"body": "&>/dev/null "
	},
	"urlencode": {
		"prefix": "urlencode",
		"body": "osascript -l JavaScript -e \"encodeURIComponent('$SEL')\""
	},
	"plist: extract key": {
		"prefix": "plist: extract key",
		"body": "plutil -extract name.childkey xml1 -o - example.plist | sed -n 4p | cut -d'>' -f2 | cut -d'<' -f1"
	},
	"running process": {
		"prefix": "running process",
		"body": "pgrep -x \"${1:process}\" > /dev/null && $0"
	},
	"quicklook": {
		"prefix": "quicklook",
		"body": "qlmanage -p \"${1:filepath}\"",
		"description": "QuickLook the file. MacOS only."
	},
	"echo": {
		"prefix": "echo",
		"body": "echo \"${0:message}\"",
		"description": "Echo a message."
	},
	"elseif": {
		"prefix": "elseif",
		"body": "elif [[ ${1:condition} ]]; then\n\t${0}",
		"description": "Add an elseif to an if statement."
	},
	"else": {
		"prefix": "else",
		"body": "else\n\t${0:command}",
		"description": "else"
	},
	"for_in": {
		"prefix": "for_in",
		"body": "for ${1:VAR} in ${0:LIST}\ndo\n\techo \"\\$${1:VAR}\"\ndone\n",
		"description": "for loop in list"
	},
	"while": {
		"prefix": "while",
		"body": "while [[ ${1:condition} ]]; do\n\t${0}\ndone\n",
		"description": "A while loop by condition."
	},
	"function": {
		"prefix": "function",
		"body": "function ${1:name} ()\n{\n\t${0}\n}"
	},
	"case": {
		"prefix": "case",
		"body": "case \"\\$${1:VAR}\" in\n\t${2:1}) echo 1\n\t;;\n\t${3:2|3}) echo 2 or 3\n\t;;\n\t*) echo default\n\t;;\nesac\n",
		"description": "A case command first expands word, and tries to match it against each pattern in turn."
	},
	"reset color": {
		"prefix": "reset color",
		"body": "\\033[0m"
	},
	"black": {
		"prefix": "black",
		"body": "\\033[1;30m"
	},
	"red": {
		"prefix": "red",
		"body": "\\033[1;31m"
	},
	"green": {
		"prefix": "green",
		"body": "\\033[1;32m"
	},
	"yellow": {
		"prefix": "yellow",
		"body": "\\033[1;33m"
	},
	"blue": {
		"prefix": "blue",
		"body": "\\033[1;34m"
	},
	"magenta": {
		"prefix": "magenta",
		"body": "\\033[1;35m"
	},
	"cyan": {
		"prefix": "cyan",
		"body": "\\033[1;36m"
	},
	"white": {
		"prefix": "white",
		"body": "\\033[1;37m"
	},
	"black bg": {
		"prefix": "black bg",
		"body": "\\033[1;40m"
	},
	"red bg": {
		"prefix": "red bg",
		"body": "\\033[1;41m"
	},
	"green bg": {
		"prefix": "green bg",
		"body": "\\033[1;42m"
	},
	"yellow bg": {
		"prefix": "yellow bg",
		"body": "\\033[1;43m"
	},
	"blue bg": {
		"prefix": "blue bg",
		"body": "\\033[1;44m"
	},
	"magenta bg": {
		"prefix": "magenta bg",
		"body": "\\033[1;45m"
	},
	"cyan bg": {
		"prefix": "cyan bg",
		"body": "\\033[1;46m"
	},
	"white bg": {
		"prefix": "",
		"body": "\\033[1;47m"
	}
}
