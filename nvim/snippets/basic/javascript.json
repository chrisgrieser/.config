{
	"replace /gm": {
		"prefix": "replace /gm",
		"body": "replace(/${1:regexp}/gm, \"$2\");"
	},
	"replace": {
		"prefix": "replace",
		"body": "replace(/${1:regexp}/, \"$2\");"
	},
	"ignore (prettier)": {
		"prefix": "ignore (prettier)",
		"body": "// prettier-ignore"
	},
	"globals (eslint)": {
		"prefix": "globals (eslint)",
		"body": "/* global ${1:var} */"
	},
	"For Loop": {
		"prefix": "for",
		"body": [
			"for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tconst ${3:element} = ${2:array}[${1:index}];",
			"\t$0",
			"}"
		],
		"description": "For Loop"
	},
	"For-Each": {
		"prefix": "forEach =>",
		"body": [
			".forEach(${1:item} => {",
			"\t$0",
			"});"
		]
	},
	"map (array, complex)": {
		"prefix": "map (array, complex)",
		"body": [
			"map(${1:item} => {",
			"\t$0",
			"\treturn ${1:item};",
			"})"
		]
	},
	"map (array)": {
		"prefix": "map (array)",
		"body": "map(${1:item} => ${1:item})"
	},
	"filter (array)": {
		"prefix": "filter (array)",
		"body": "filter(${1:item} => ${1:item})"
	},
	"sort (array)": {
		"prefix": "sort (array)",
		"body": [
			"sort((a, b) => {",
			"\t$return {1:b - a};",
			"})"
		],
		"description": "Sort Array with basic a-b-comparator function"
	},
	"today's date": {
		"prefix": [
			"today",
			"date"
		],
		"body": "const today = new Date();"
	},
	"tomorrow's date": {
		"prefix": [
			"tomorrow",
			"date"
		],
		"body": [
			"const tomorrow = new Date();",
			"tomorrow.setDate(tomorrow.getDate() + 1);"
		]
	},
	"today as ISO 8601 string": {
		"prefix": "ISO date",
		"body": "new Date().toISOString().slice(0, 10);"
	},
	"For-In Loop": {
		"prefix": "forin",
		"body": [
			"for (const ${1:key} in ${2:object}) {",
			"\tif (${2:object}.hasOwnProperty(${1:key})) {",
			"\t\tconst ${3:element} = ${2:object}[${1:key}];",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "For-In Loop"
	},
	"For-of Loop": {
		"prefix": "forof",
		"body": [
			"for (const ${1:iterator} of ${2:object}) {",
			"\t$0",
			"}"
		],
		"description": "For-Of Loop"
	},
	"If Statement": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "If Statement"
	},
	"If-Else Statement": {
		"prefix": "ifelse",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"} else {",
			"\t",
			"}"
		],
		"description": "If-Else Statement"
	},
	"New Statement": {
		"prefix": "new",
		"body": [
			"const ${1:name} = new ${2:type}(${3:arguments});$0"
		],
		"description": "New Statement"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:key}) {",
			"\tcase ${2:value}:",
			"\t\t$0",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch Statement"
	},
	"While Statement": {
		"prefix": "while ..",
		"body": [
			"while (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "While Statement"
	},
	"Do-While Statement": {
		"prefix": [
			"do .. while",
			"repeat until"
		],
		"body": [
			"do {",
			"\t$0",
			"} while (${1:condition});"
		],
		"description": "Do-While Statement"
	},
	"Try-Catch Statement": {
		"prefix": "try .. catch",
		"body": [
			"try {",
			"\t$0",
			"} catch (${1:error}) {",
			"\t",
			"}"
		],
		"description": "Try-Catch Statement"
	},
	"Set Timeout Function": {
		"prefix": "settimeout",
		"body": [
			"setTimeout(() => {",
			"\t$0",
			"}, ${1:timeoutMs});"
		],
		"description": "Set Timeout Function"
	}
}
