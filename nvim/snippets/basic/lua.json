{
	"safe require": {
		"prefix": "safe require",
		"body": ["local ok, ${1:module} = require(\"${1:module}\")", "if not ok then return end", "${1:module}"]
	},
	"export module": {
		"prefix": "export module",
		"body": [
			"local M = {}",
			"--------------------------------------------------------------------------------",
			"",
			"$0",
			"",
			"--------------------------------------------------------------------------------",
			"return M"
		]
	},
	"import module": {
		"prefix": "import module",
		"body": "local ${1:name} = require(\"${2:module}.${1:name}\")"
	},
	"trim trailing line break": {
		"prefix": "trim trailing line break",
		"body": ":gsub(\"\\n$\", \"\")"
	},
	"nodiscard": {
		"prefix": "nodiscard",
		"body": "---@nodiscard",
		"description": "Luadoc Annotation that a function's return value should not be discarded. https://github.com/LuaLS/lua-language-server/wiki/Annotations#nodiscard"
	},
	"enum": {
		"prefix": "enum",
		"body": "\"${1:value1}\"|\"${2:value2}\"",
		"description": "Luadoc Custom Parameter Type for a function. https://github.com/LuaLS/lua-language-server/wiki/Annotations#param"
	},
	"class definition": {
		"prefix": ["class definition", "type definition"],
		"body": ["---@class ${1:class_name} ${2:class_description}", "---@field ${3:field_name} string"],
		"description": "https://github.com/LuaLS/lua-language-server/wiki/Annotations#class"
	},
	"ignore start/end (stylua)": {
		"prefix": "ignore start/end (stylua)",
		"body": ["-- stylua: ignore start", "-- stylua: ignore end"]
	},
	"ignore (stylua)": {
		"prefix": "ignore (stylua)",
		"body": "-- stylua: ignore"
	},
	"if .. then .. else": {
		"prefix": "if .. then .. else",
		"body": ["if ${1:true} then", "\t$2", "else", "\t$0", "end"]
	},
	"return end": {
		"prefix": ["return end", "re"],
		"body": "return end"
	},
	"then return end": {
		"prefix": ["then return end", "tree"],
		"body": "then return end"
	},
	"format": {
		"prefix": "format",
		"body": "(\"$0%s\"):format(${1:var})"
	},
	"home": {
		"prefix": "home",
		"body": "os.getenv(\"HOME\")"
	},
	"try": {
		"prefix": ["try", "pcall"],
		"body": ["local success = pcall(${1:func})", "if not success then", "\t$0", "\treturn", "end"]
	},
	"for each (list)": {
		"prefix": "for each (list)",
		"body": ["for _, ${1:v} in pairs(${2:table}) do", "\t$0", "end"]
	},
	"for each line (of file)": {
		"prefix": ["for each line (file)", "read file (as lines)"],
		"body": ["for line in io.lines(${1:filepath}) do", "\t$0", "end"]
	},
	"split (gmatch)": {
		"prefix": "split (gmatch)",
		"body": [
			"local acc = {}",
			"for part in ${1:str}:gmatch(\"(.-)\" .. ${2:delimiter}) do",
			"\ttable.insert(acc, part)",
			"end"
		]
	},
	"write file": {
		"prefix": "write file",
		"body": [
			"---@param str string",
			"---@param filePath string line(s) to add",
			"---@return string|nil nil on error",
			"local function writeToFile(filePath, str)",
			"\tlocal file, _ = io.open(filePath, \"w\")",
			"\tif not file then return end",
			"\tfile:write(str .. \"\n\")",
			"\tfile:close()",
			"end"
		],
		"description": "Overwriting file, for appending use `a` instead of `w`."
	},
	"read file": {
		"prefix": "read file",
		"body": [
			"---read the full file",
			"---@param filePath string",
			"---@return string|nil nil on error",
			"local function writeToFile(filePath, str)",
			"\tlocal content, _ = io.open(filePath, \"r\")",
			"\tif not content then return end",
			"\tfile:close()",
			"\treturn content",
			"end"
		]
	}
}
