{
	"trim trailing line break": {
		"prefix": "trim trailing line break",
		"body": ":gsub(\"\\n$\", \"\")"
	},
	"ignore start/end (stylua)": {
		"prefix": "ignore start/end (stylua)",
		"body": [
			"-- stylua: ignore start",
			"-- stylua: ignore end"
		]
	},
	"ignore block (stylua)": {
		"prefix": "ignore block (stylua)",
		"body": "-- stylua: ignore"
	},
	"ignore rule (selene)": {
		"prefix": "ignore rule (selene)",
		"body": "-- selene: allow(${1:rule_name})"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1:true} then",
			"\t$0",
			"end"
		]
	},
	"if .. else": {
		"prefix": "if .. else",
		"body": [
			"if ${1:true} then",
			"\t$2",
			"else",
			"\t$0",
			"end"
		]
	},
	"guard clause ending": {
		"prefix": "return end",
		"body": "return end"
	},
	"guard clause ending (+)": {
		"prefix": "then return end",
		"body": "then return end"
	},
	"string format": {
		"prefix": "string format",
		"body": "string.format(\"$0%s\", ${1:var})"
	},
	"home": {
		"prefix": "home",
		"body": "os.getenv(\"HOME\")"
	},
	"try": {
		"prefix": [
			"try",
			"pcall"
		],
		"body": [
			"local success, _ = pcall(${1:func})",
			"if success then",
			"\t$2",
			"else",
			"\t$0",
			"end"
		]
	},
	"for each (list)": {
		"prefix": "for each (list)",
		"body": [
			"for _, ${1:v} in pairs(${2:table}) do",
			"\t$0",
			"end"
		]
	}
}
