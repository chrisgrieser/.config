{
	"get active file/Tfile": {
		"description": "Obsidian: Get the TFile of the currently active note.",
		"prefix": [
			"tFile",
			"active file",
			"current"
		],
		"body": [
			"const ${1:activeFile} = this.app.workspace.getActiveFile();"
		]
	},
	"get Tfile of active leaf": {
		"description": "Obsidian: Get the TFile of a leaf, checking if the active leaf is a markdown file.",
		"prefix": [
			"tFile of leaf"
		],
		"body": [
			"const currentLeaf = this.app.workspace.activeLeaf();",
			"const file = currentLeaf.view instanceof MarkdownView ? currentLeaf.view.file : null;"
		]
	},
	"recent files": {
		"description": "Obsidian: Get the 10 most recent files. (The ones visible in the Quick Switcher, when there no input yet.)",
		"prefix": [
			"recent files",
			"Quick Switcher",
			"last opened files"
		],
		"body": [
			"const recentFiles = this.app.workspace.lastOpenFiles;"
		]
	},
	"get editor": {
		"description": "Obsidian: Get the editor of the currently active note.",
		"prefix": [
			"editor",
			"active file",
			"current"
		],
		"body": [
			"// getActiveViewOfType will return null if the active view is",
			"// null or not of type MarkdownView.",
			"const view = app.workspace.getActiveViewOfType(MarkdownView);",
			"if (view) {",
			"\tconst editor = view.editor;",
			"\t${1: // Do something with editor}",
			"}"
		]
	},
	"get TFile from path": {
		"description": "Obsidian: Get the TFile corresponding to the (vault-relative) file path string.",
		"prefix": [
			"TFile from file path",
			"file path to TFile"
		],
		"body": [
			"this.app.vault.getAbstractFileByPath(${1:filepath});"
		]
	},
	"add command": {
		"description": "Obsidian: Add a command to the command palette. Usually added to the `onload()` call.",
		"prefix": [
			"add command",
			"register command"
		],
		"body": [
			"this.addCommand({",
			"\tid: \"${1:command-id}\",",
			"\tname: \"${2:commandName}\",",
			"\tcallback: () => this.${3:method}(),",
			"});"
		]
	},
	"add editor command": {
		"description": "Obsidian: Add a command to the command palette that is only active in edit mode and passes the currently active editor to the respective method.",
		"prefix": [
			"add editor command",
			"register editor command"
		],
		"body": [
			"this.addCommand({",
			"\tid: \"${1:command-id}\",",
			"\tname: \"${2:commandName}\",",
			"\teditorCallback: (editor) => this.${3:method}(editor),",
			"});"
		]
	},
	"append to note": {
		"prefix": "append to note",
		"body": "await this.app.vault.append(${1:TFile}, ${2:textToAppend});"
	},
	"read note content": {
		"prefix": "read note content",
		"body": "await this.app.vault.read(${1:TFile});"
	},
	"write note content": {
		"prefix": "write note content",
		"body": "await this.app.vault.append(${1:TFile}, ${2:textToWrite});"
	},
	"Run Command": {
		"prefix": "Run Command",
		"description": "Run a command from another plugin or from Obsidian core.",
		"body": "this.app.commands.executeCommandById(${1:cmd-id});"
	},
	"set config": {
		"prefix": "set config",
		"description": "Set a configuration value for the core Obsidian settings.",
		"body": "this.app.vault.setConfig(\"${1:config-name}\", ${2:value});"
	},
	"get config": {
		"prefix": "get config",
		"description": "Get a configuration value from the core Obsidian settings.",
		"body": "const ${1:config-name} = this.app.vault.getConfig(\"${1:config-name}\");"
	},
	"Multiple Cursors?": {
		"description": "Obsidian: Check whether there are currently multiple cursors.",
		"prefix": [
			"cursors",
			"multiple cursors",
			"multiple selections"
		],
		"body": [
			"const hasMultipleCursors = editor.listSelections().length > 1;"
		]
	},
	"Write a file": {
		"description": "Obsidian: Write text to an existing file.",
		"prefix": [
			"modify file",
			"write to file",
			"change file"
		],
		"body": "this.app.vault.modify(${1:TFile}, ${2:text});"
	},
	"get selection (edit mode)": {
		"description": "Obsidian: Get the selection in Live Preview / Source mode.",
		"prefix": [
			"selection",
			"selected text"
		],
		"body": "const selection = editor.getSelection();"
	},
	"get selection (reading mode)": {
		"description": "Obsidian: Get the selection in Reading Mode. (Note that this will retrieve plain text without formatting.)",
		"prefix": [
			"selection",
			"selected text"
		],
		"body": "const selection = activeWindow.getSelection().toString();"
	},
	"Notification": {
		"description": "Obsidian: Create notification",
		"prefix": [
			"notice",
			"notify",
			"notification"
		],
		"body": "new Notice (\"${1:msg}\");"
	}
}
