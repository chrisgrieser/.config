{
	"get active file": {
		"description": "Obsidian: Get the TFile of the currently active note.",
		"prefix": [
			"tFile",
			"active file",
			"current"
		],
		"body": [
			"const ${1:activeFile} = this.app.workspace.activeFile();"
		]
	},
	"recent files": {
		"description": "Obsidian: Get the 10 most recent files. (The ones visible in the Quick Switcher, when there no input yet.)",
		"prefix": [
			"recent files",
			"Quick Switcher",
			"last opened files"
		],
		"body": [
			"const recentFiles = this.app.workspace.lastOpenFiles;"
		]
	},
	"get editor": {
		"description": "Obsidian: Get the editor of the currently active note.",
		"prefix": [
			"editor",
			"active file",
			"current"
		],
		"body": [
			"// getActiveViewOfType will return null if the active view is",
			"// null or not of type MarkdownView.",
			"const view = app.workspace.getActiveViewOfType(MarkdownView);",
			"if (view) {",
			"\tconst editor = view.editor;",
			"\t${1: // Do something with editor}",
			"}"
		]
	},
	"get TFile from path": {
		"description": "Obsidian: Get the TFile corresponding to the (vault-relative) file path string.",
		"prefix": [
			"TFile from file path",
			"file path to TFile"
		],
		"body": [
			"this.app.vault.getAbstractFileByPath(${1:filepath});"
		]
	},
	"add command": {
		"description": "Obsidian: Add a command to the command palette. Usually added to the `onload()` call.",
		"prefix": [
			"add command",
			"register command"
		],
		"body": [
			"this.addCommand({",
			"\tid: \"${1:command-id}\",",
			"\tname: \"${2:commandName}\",",
			"\tcallback: () => this.${3:method}(),",
			"});"
		]
	},
	"Multiple Cursors?": {
		"description": "Obsidian: Check whether there are currently multiple cursors.",
		"prefix": [
			"cursors",
			"multiple cursors",
			"multiple selections"
		],
		"body": [
			"const hasMultipleCursors = editor.listSelections().length > 1;"
		]
	},
	"Write a file": {
		"description": "Obsidian: Write text to an existing file.",
		"prefix": [
			"modify file",
			"write to file",
			"change file"
		],
		"body": "this.app.vault.modify(${1:TFile}, ${2:text});"
	},
	"get selection (edit mode)": {
		"description": "Obsidian: Get the selection in Live Preview / Source mode.",
		"prefix": [
			"selection",
			"selected text"
		],
		"body": [
			"const selection = editor.getSelection();"
		]
	},
	"get selection (reading mode)": {
		"description": "Obsidian: Get the selection in Reading Mode. (Note that this will retrieve plain text without formatting.)",
		"prefix": [
			"selection",
			"selected text"
		],
		"body": [
			"const selection = activeWindow.getSelection().toString(); "
		]
	}
}
