{
  "Multiple Cursors?": {
    "body": "const hasMultipleCursors = editor.listSelections().length > 1;",
    "description": "Obsidian: Check whether there are currently multiple cursors.",
    "prefix": [
      "cursors",
      "multiple cursors",
      "multiple selections"
    ]
  },
  "Run Command": {
    "body": "this.app.commands.executeCommandById(${1:cmd-id});",
    "description": "Run a command from another plugin or from Obsidian core.",
    "prefix": "Run Command"
  },
  "Write a file": {
    "body": "this.app.vault.modify(${1:TFile}, ${2:text});",
    "description": "Obsidian: Write text to an existing file.",
    "prefix": [
      "modify file",
      "write to file",
      "change file"
    ]
  },
  "active file + current file": {
    "body": "this.app.workspace.getActiveFile();",
    "description": "Obsidian: Get the TFile of the currently active note.",
    "prefix": [
      "active file",
      "current file"
    ]
  },
  "add command": {
    "body": [
      "this.addCommand({",
      "\tid: \"${1:command-id}\",",
      "\tname: \"${2:commandName}\",",
      "\tcallback: () => this.${3:method}(),",
      "});"
    ],
    "description": "Obsidian: Add a command to the command palette, making it also available as a hotkey. Usually added to the `onload()` call of the plugin.",
    "prefix": [
      "add command",
      "register command"
    ]
  },
  "add editor command": {
    "body": [
      "this.addCommand({",
      "\tid: \"${1:command-id}\",",
      "\tname: \"${2:commandName}\",",
      "\teditorCallback: (editor) => this.${3:method}(editor),",
      "});"
    ],
    "description": "Obsidian: Add a command to the command palette that is only active in edit mode and passes the currently active editor to the respective method.",
    "prefix": [
      "add editor command",
      "register editor command"
    ]
  },
  "append to note": {
    "body": "await this.app.vault.append(${1:TFile}, ${2:textToAppend});",
    "prefix": "append to note"
  },
  "editor": {
    "body": [
      "const editor = app.workspace.getActiveViewOfType(MarkdownView)?.editor;",
      "if (!editor) {",
      "\tnew Notice(\"No active editor.\");",
      "\treturn;",
      "}"
    ],
    "description": "Obsidian: Get the editor of the currently active note.",
    "prefix": "editor"
  },
  "get TFile from path": {
    "body": "this.app.vault.getAbstractFileByPath(${1:filepath});",
    "description": "Obsidian: Get the TFile corresponding to the (vault-relative) file path string.",
    "prefix": [
      "TFile from file path",
      "file path to TFile"
    ]
  },
  "get Tfile of active leaf": {
    "body": [
      "const currentLeaf = this.app.workspace.activeLeaf();",
      "const tfile = currentLeaf.view instanceof MarkdownView ? currentLeaf.view.file : null;"
    ],
    "description": "Obsidian: Get the TFile of a leaf, checking if the active leaf is a markdown file.",
    "prefix": "tFile of leaf"
  },
  "get config": {
    "body": "const ${1:config-name} = this.app.vault.getConfig(\"${1:config-name}\");",
    "description": "Get a configuration value from the core Obsidian settings.",
    "prefix": "get config"
  },
  "new Notice (Obsidian)": {
    "body": "new Notice (\"${1:msg}\", ${2:2000});",
    "description": "Obsidian: Create notification",
    "prefix": "new Notice (Obsidian)"
  },
  "open file (in current leaf)": {
    "body": "this.app.workspace.getLeaf().openFile($0);",
    "prefix": "open file (in current leaf)"
  },
  "read note content": {
    "body": "await this.app.vault.read(${1:TFile});",
    "prefix": "read note content"
  },
  "recent files + last opened files": {
    "body": "const recentFiles = this.app.workspace.getLastOpenFiles();",
    "description": "Obsidian: Get the 10 most recent files, as an array of file-path strings. (The 10 most recent files are the ones visible in the Quick Switcher, when there no input yet.)",
    "prefix": [
      "recent files",
      "last opened files"
    ]
  },
  "set config": {
    "body": "this.app.vault.setConfig(\"${1:config-name}\", ${2:value});",
    "description": "Set a configuration value for the core Obsidian settings.",
    "prefix": "set config"
  },
  "vim mode": {
    "body": "app.workspace.activeEditor.editor.cm.cm.state.vim.mode",
    "prefix": "vim mode"
  },
  "write note content": {
    "body": "await this.app.vault.append(${1:TFile}, ${2:textToWrite});",
    "prefix": "write note content"
  }
}
