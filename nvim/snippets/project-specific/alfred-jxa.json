{
	"Get Alfred Env": {
		"prefix": "Get Alfred Env",
		"body": "'const ${1:envVar} = $.getenv(\"${2:envVar}\");"
	},
	"Get Alfred Env (+ resolve home)": {
		"prefix": "Get Alfred Env (+ resolve home)",
		"body": "const ${1:envVar} = $.getenv(\"${2:envVar}\").replace(/^~/, app.pathTo(\"home folder\"));"
	},
	"argv": {
		"prefix": "argv",
		"body": [
			"function run(argv){",
			"const ${1:query} = argv[0];",
			"}"
		]
	},
	"Modifiers (Script Filter)": {
		"prefix": "Modifiers (Script Filter)",
		"body": [
			"\"mods\": {",
			"\t\"${1:cmd}\": {",
			"\t\t\"arg\": \"${2:arg}\",",
			"\t\t\"subtitle\": \"${1:cmd}: ${3:text}\",",
			"\t},",
			"},"
		]
	},
	"Script Filter": {
		"prefix": "Script Filter",
		"body": [
			"const jsonArray = app.doShellScript(`$1`)",
			"\t.split(\"\r\")",
			"\t.map(item => {",
			"\t\t$2",
			"\t\treturn {",
			"\t\t\t\"title\": item,",
			"\t\t\t\"match\": alfredMatcher (item),",
			"\t\t\t\"subtitle\": item,",
			"\t\t\t\"type\": \"file:skipcheck\",",
			"\t\t\t\"icon\": { \"type\": \"fileicon\", \"path\": item },",
			"\t\t\t\"arg\": item,",
			"\t\t\t\"uid\": item,",
			"\t\t};",
			"\t});",
			"JSON.stringify({ items: jsonArray});"
		]
	},
	"Get Alfred Env (safe)": {
		"prefix": "Get Alfred Env (safe)",
		"body": [
			"function env(envVar) {",
			"\tlet out;",
			"\ttry { out = $.getenv(envVar)}",
			"\tcatch (e) { out = \"\" }",
			"\treturn out;",
			"}"
		]
	},
	"read Alfred data": {
		"prefix": "read Alfred data",
		"body": [
			"function readData (key) {",
			"\tconst fileExists = (filePath) => Application(\"Finder\").exists(Path(filePath));",
			"\tconst dataPath = $.getenv(\"alfred_workflow_data\") + \"/\" + key;",
			"\tif (!fileExists(dataPath)) return \"data does not exist.\";",
			"\tconst data = $.NSFileManager.defaultManager.contentsAtPath(dataPath);",
			"\tconst str = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding);",
			"\treturn ObjC.unwrap(str);",
			"}"
		]
	},
	"write Alfred data": {
		"prefix": "write Alfred data",
		"body": [
			"function writeData(key, newValue) {",
			"\tconst dataFolder = $.getenv(\"alfred_workflow_data\");",
			"\tconst fileManager = $.NSFileManager.defaultManager;",
			"\tconst folderExists = fileManager.fileExistsAtPath(dataFolder);",
			"\tif (!folderExists) fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(dataFolder, false, $(), $());",
			"\tconst dataPath = dataFolder + \"/\" + key;",
			"\tconst str = $.NSString.alloc.initWithUTF8String(newValue);",
			"\tstr.writeToFileAtomicallyEncodingError(dataPath,",
			"\ttrue, $.NSUTF8StringEncoding, null);",
			"}"
		]
	}
}
