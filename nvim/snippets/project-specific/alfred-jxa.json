{
	"keystroke": {
		"prefix": "keystroke",
		"body": "Application(\"System Events\").keystroke(\"${1:key}\", {using: [\"${2:command} down\"]});"
	},
	"matcher (CamelCase)": {
		"prefix": "matcher (CamelCase)",
		"body": [
			"/** @param {string} str */",
			"function alfredMatcher(str) {",
			"\tconst clean = str.replace(/[-()_.:#/\\\\\\;,[\\]]/g, \" \");",
			"\tconst camelCaseSeperated = str.replace(/([A-Z])/g, \" \\$1\");",
			"\treturn [clean, camelCaseSeperated, str].join(\" \") + \" \";",
			"}"
		],
		"description": "Make Alfred Match CamelCase Results. https://www.alfredapp.com/help/workflows/inputs/script-filter/json/"
	},
	"Get Alfred Env": {
		"prefix": "Get Alfred Env",
		"body": "const ${1:envVar} = $.getenv(\"${2:envVar}\");"
	},
	"Get Alfred Env (+ resolve home)": {
		"prefix": "Get Alfred Env (+ resolve home)",
		"body": "const ${1:envVar} = $.getenv(\"${2:envVar}\").replace(/^~/, app.pathTo(\"home folder\"));"
	},
	"AlfredRun": {
		"prefix": ["run (Alfred)", "AlfredRun", "argv (Alfred)"],
		"body": [
			"/** @type {AlfredRun} */",
			"// rome-ignore lint/correctness/noUnusedVariables: Alfred run",
			"function run(argv){",
			"\tconst ${1:query} = argv[0];",
			"}"
		]
	},
	"Modifiers (Script Filter)": {
		"prefix": "Modifiers (Alfred)",
		"body": [
			"mods: {",
			"\tcmd: {",
			"\t\targ: $1,",
			"\t\tsubtitle: \"âŒ˜: $2\",",
			"\t},",
			"},"
		]
	},
	"Script Filter": {
		"prefix": "Script Filter (Alfred)",
		"body": [
			"/** @type {AlfredRun} */",
			"// rome-ignore lint/correctness/noUnusedVariables: Alfred run",
			"function run(){",
			"\t/** @type AlfredItem[] */",
			"\tconst ${1:scriptFilterArr} = app.doShellScript(\"$2\")",
			"\t\t.split(\"\\r\")",
			"\t\t.map(item => {",
			"\t\t\t$0",
			"\t\t\treturn {",
			"\t\t\t\ttitle: item,",
			"\t\t\t\tsubtitle: item,",
			"\t\t\t\targ: item,",
			"\t\t\t};",
			"\t\t});",
			"\treturn JSON.stringify({ items: ${1:scriptFilterArr} });",
			"}"
		]
	},
	"read Alfred data": {
		"prefix": "read Alfred data",
		"body": [
			"function readData (key) {",
			"\tconst fileExists = (filePath) => Application(\"Finder\").exists(Path(filePath));",
			"\tconst dataPath = $.getenv(\"alfred_workflow_data\") + \"/\" + key;",
			"\tif (!fileExists(dataPath)) return \"data does not exist.\";",
			"\tconst data = $.NSFileManager.defaultManager.contentsAtPath(dataPath);",
			"\tconst str = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding);",
			"\treturn ObjC.unwrap(str);",
			"}"
		]
	},
	"write Alfred data": {
		"prefix": "write Alfred data",
		"body": [
			"function writeData(key, newValue) {",
			"\tconst dataFolder = $.getenv(\"alfred_workflow_data\");",
			"\tconst fileManager = $.NSFileManager.defaultManager;",
			"\tconst folderExists = fileManager.fileExistsAtPath(dataFolder);",
			"\tif (!folderExists) fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(dataFolder, false, $(), $());",
			"\tconst dataPath = dataFolder + \"/\" + key;",
			"\tconst str = $.NSString.alloc.initWithUTF8String(newValue);",
			"\tstr.writeToFileAtomicallyEncodingError(dataPath,",
			"\ttrue, $.NSUTF8StringEncoding, null);",
			"}"
		]
	}
}
