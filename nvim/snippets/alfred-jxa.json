{
  "AlfredRun": {
    "body": [
      "/** @type {AlfredRun} */",
      "// biome-ignore lint/correctness/noUnusedVariables: Alfred run",
      "function run(argv) {",
      "\tconst ${1:query} = argv[0];",
      "}"
    ],
    "prefix": [
      "run (Alfred)",
      "AlfredRun",
      "argv (Alfred)"
    ]
  },
  "Get Alfred Env": {
    "body": "\\$.getenv(\"${1:envVar}\");",
    "prefix": "Get Alfred Env"
  },
  "Get Alfred Env (Safe)": {
    "body": "\\$.NSProcessInfo.processInfo.environment.objectForKey(\"${1:envVar}\").js;",
    "prefix": "Get Alfred Env (Safe)"
  },
  "Modifiers (Script Filter)": {
    "body": [
      "mods: {",
      "\tcmd: {",
      "\t\targ: $1,",
      "\t\tsubtitle: \"⌘: $2\",",
      "\t},",
      "}"
    ],
    "prefix": "Modifiers (Alfred)"
  },
  "Script Filter (Alfred): API Call": {
    "body": [
      "/** @param {string} url @return {string} */",
      "function httpRequest(url) {",
      "\tconst queryURL = \\$.NSURL.URLWithString(url);",
      "\tconst data = \\$.NSData.dataWithContentsOfURL(queryURL);",
      "\treturn \\$.NSString.alloc.initWithDataEncoding(data, \\$.NSUTF8StringEncoding).js;",
      "}",
      "",
      "//──────────────────────────────────────────────────────────────────────────────",
      "",
      "/** @type {AlfredRun} */",
      "// biome-ignore lint/correctness/noUnusedVariables: Alfred run",
      "function run(argv) {",
      "\tconst query = argv[0];",
      "\tif (!query) {",
      "\t\treturn JSON.stringify({",
      "\t\t\titems: [{ title: \"Waiting for query…\", valid: false }],",
      "\t\t});",
      "\t}",
      "",
      "\t// DOCS ${4:docsurls}",
      "\tconst apiURL = \"${3:URL}\";",
      "\tconst response = JSON.parse(httpRequest(apiURL + encodeURIComponent(query)));",
      "",
      "\t/** @type AlfredItem[] */",
      "\tconst items = response.data.map((/** @type {{name: string}} */ ${2:item}) => {",
      "\t\tconst { ${2:name} } = item;",
      "\t\t$0",
      "\t\treturn {",
      "\t\t\ttitle: ${2:name},",
      "\t\t\tsubtitle: ${2:name},",
      "\t\t\targ: ${2:name},",
      "\t\t};",
      "\t});",
      "",
      "\treturn JSON.stringify({ items: ${1:items} });",
      "}"
    ],
    "prefix": "Script Filter (Alfred): API Call"
  },
  "Script Filter (Alfred): doShellScript": {
    "body": [
      "// biome-ignore lint/correctness/noUnusedVariables: Alfred run",
      "function run() {",
      "\t/** @type AlfredItem[] */",
      "\tconst items = app",
      "\t\t.doShellScript(\"ls\")",
      "\t\t.split(\"\\r\")",
      "\t\t.map((item) => {",
      "\t\t\treturn {",
      "\t\t\t\ttitle: item,",
      "\t\t\t\tsubtitle: item,",
      "\t\t\t\targ: item,",
      "\t\t\t};",
      "\t\t});",
      "",
      "\treturn JSON.stringify({ items: items });",
      "}"
    ],
    "prefix": "Script Filter (Alfred): doShellScript"
  },
  "cache (Script Filter)": {
    "body": "cache: { seconds: 600, loosereload: true },",
    "prefix": "cache (Script Filter)"
  },
  "cache (ensure folder)": {
    "body": [
      "function ensureCacheFolderExists() {",
      "\tconst finder = Application(\"Finder\");",
      "\tconst cacheDir = \\$.getenv(\"alfred_workflow_cache\");",
      "\tif (!finder.exists(Path(cacheDir))) {",
      "\t\tconsole.log(\"Cache Dir does not exist and is created.\");",
      "\t\tconst cacheDirBasename = \\$.getenv(\"alfred_workflow_bundleid\");",
      "\t\tconst cacheDirParent = cacheDir.slice(0, -cacheDirBasename.length);",
      "\t\tfinder.make({",
      "\t\t\tnew: \"folder\",",
      "\t\t\tat: Path(cacheDirParent),",
      "\t\t\twithProperties: { name: cacheDirBasename },",
      "\t\t});",
      "\t}",
      "}"
    ],
    "prefix": "cache (ensure folder)"
  },
  "matcher (CamelCase)": {
    "body": [
      "/** @param {string} str */",
      "function camelCaseMatch(str) {",
      "\tconst subwords = str.replace(/[-_./]/g, \" \");",
      "\tconst fullword = str.replace(/[-_./]/g, \"\");",
      "\tconst camelCaseSeparated = str.replace(/([A-Z])/g, \" \\\\$1\");",
      "\treturn [subwords, camelCaseSeparated, fullword, str].join(\" \") + \" \";",
      "}"
    ],
    "prefix": "matcher (CamelCase)"
  },
  "matcher (simple)": {
    "body": [
      "/** @param {string} str */",
      "function alfredMatcher(str) {",
      "\tconst clean = str.replace(/[-()_.:#/\\\\;,[\\]]/g, \" \");",
      "\treturn [clean, str].join(\" \") + \" \";",
      "}"
    ],
    "prefix": "matcher (simple)"
  },
  "reload Alfred workflow": {
    "body": "Application(\"com.runningwithcrayons.Alfred\").reloadWorkflow(\\$.getenv(\"alfred_workflow_bundleid\"))",
    "prefix": "reload Alfred workflow"
  }
}
