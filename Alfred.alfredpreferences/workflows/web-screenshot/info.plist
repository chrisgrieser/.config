<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.webscreenshot</string>
	<key>connections</key>
	<dict>
		<key>181BA7A8-03C0-48A9-AC97-CA21785D1FC1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CD71AE4A-3C50-4C2E-9E08-A7C4D90A6E13</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3BFC06FB-2FCB-47AB-B54D-FFDABEDAF5FD</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>73BF8CD8-5A95-4C98-B92B-BE206512C72F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>73BF8CD8-5A95-4C98-B92B-BE206512C72F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>34361D11-6517-4260-B8F6-C0B3067467EB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CD71AE4A-3C50-4C2E-9E08-A7C4D90A6E13</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>34361D11-6517-4260-B8F6-C0B3067467EB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Take screenshots directly to the web</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>WebScreenshot</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source './webscreenshot'

upload_file "${1}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>CD71AE4A-3C50-4C2E-9E08-A7C4D90A6E13</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsmulti</key>
				<integer>0</integer>
				<key>filetypes</key>
				<array>
					<string>+public.image</string>
					<string>+public.video</string>
				</array>
				<key>name</key>
				<string>Upload screenshot</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.action</string>
			<key>uid</key>
			<string>181BA7A8-03C0-48A9-AC97-CA21785D1FC1</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly download_type='direct'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local -r notificator="$(find . -type f -name 'notificator')"

  if [[ -f "${notificator}" &amp;&amp; "$(/usr/bin/file --brief --mime-type "${notificator}")" == 'text/x-shellscript' ]]; then
    "${notificator}" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  # Remote sanity check
  if ! url_exists "${remote_info_plist}"; then
    abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."
  fi

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"
  rm "${tmp_file}"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  readonly download_url="$(
    if [[ "${download_type}" == 'github_release' ]]; then
      osascript -l JavaScript -e 'function run(argv) { return JSON.parse(argv[0])["assets"].find(asset =&gt; asset["browser_download_url"].endsWith(".alfredworkflow"))["browser_download_url"] }' "$(curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest")"
    else
      echo "${workflow_url}"
    fi
  )"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    readonly download_name="$(basename "${download_url}")"
    curl --silent --location --output "${HOME}/Downloads/${download_name}" "${download_url}"
    open "${HOME}/Downloads/${download_name}"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>34361D11-6517-4260-B8F6-C0B3067467EB</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source './webscreenshot'
readonly image="$(mktemp).png"

if clipboard_to_image "${image}"; then
  upload_file "${image}"
  rm "${image}"
  exit 0
fi

failure 'No image data in clipboard'</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>73BF8CD8-5A95-4C98-B92B-BE206512C72F</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>screenshot</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Upload screenshot from clipboard</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>3BFC06FB-2FCB-47AB-B54D-FFDABEDAF5FD</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Take screenshots with and upload them directly to [imgur](https://imgur.com/), copying the resulting link to the clipboard.

![](https://i.imgur.com/wP0LTlj.png)

In addition to the Hotkey, you may upload an image or video by picking the `Upload Screenshot` File Action.

`uploadscreenshotclipboard` uploads the most recent image data in your clipboard.

`savescreenshotclipboard` saves the most recent image data in your clipboard to the Desktop.

`recentscreenshots` enumerates recently uploaded screenshots, ordered from the last. You can then open them in the browser to view (↵), delete (⌘↵), copy (⌥↵), or preview (⇧).</string>
	<key>uidata</key>
	<dict>
		<key>181BA7A8-03C0-48A9-AC97-CA21785D1FC1</key>
		<dict>
			<key>xpos</key>
			<real>35</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
		<key>34361D11-6517-4260-B8F6-C0B3067467EB</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<real>460</real>
			<key>ypos</key>
			<real>95</real>
		</dict>
		<key>3BFC06FB-2FCB-47AB-B54D-FFDABEDAF5FD</key>
		<dict>
			<key>xpos</key>
			<real>35</real>
			<key>ypos</key>
			<real>165</real>
		</dict>
		<key>73BF8CD8-5A95-4C98-B92B-BE206512C72F</key>
		<dict>
			<key>xpos</key>
			<real>275</real>
			<key>ypos</key>
			<real>165</real>
		</dict>
		<key>CD71AE4A-3C50-4C2E-9E08-A7C4D90A6E13</key>
		<dict>
			<key>xpos</key>
			<real>275</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>version</key>
	<string>22.5</string>
	<key>webaddress</key>
	<string>http://vitorgalvao.com/</string>
</dict>
</plist>
