<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.vitor.amazonsuggest</string>
	<key>connections</key>
	<dict>
		<key>221025C2-26B2-4105-B171-A62E18219FBD</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>21ACD77C-F177-4D29-9560-8D7461EC6453</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Get in-line Amazon search suggestions</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Amazon Suggest</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>{var:search_keyword}</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Querying suggestions…</string>
				<key>script</key>
				<string>// Items follow the same pattern
function makeItems(itemNames) {
  return itemNames.map(name =&gt; {
    return {
      "uid": name,
      "title": name,
      "subtitle": "Search “" + name + "” on Amazon",
      "arg": name
    }
  })
}

// Check values from previous runs this session
const oldArg = $.NSProcessInfo.processInfo.environment.objectForKey("oldArg").js
const oldResults = $.NSProcessInfo.processInfo.environment.objectForKey("oldResults").js

// Build items
function run(argv) {
  // If the user is typing, return early to guarantee the top entry is the currently typed query
  // If we waited for the API, a fast typer would search for an incomplete query
  if (argv[0] !== oldArg) {
    return JSON.stringify({
      "rerun": 0.1,
      "skipknowledge": true,
      "variables": { "oldResults": oldResults, "oldArg": argv[0] },
      "items": makeItems(argv.concat(oldResults?.split("\n").filter(line =&gt; line)))
    })
  }

  // Make the API request
  const encodedQuery = encodeURIComponent(argv[0])
  const queryURL = $.NSURL.URLWithString("https://completion.amazon.com/search/complete?search-alias=aps&amp;mkt=1&amp;q=" + encodedQuery)
  const requestData = $.NSData.dataWithContentsOfURL(queryURL);
  const requestString = $.NSString.alloc.initWithDataEncoding(requestData, $.NSUTF8StringEncoding).js
  const newResults = JSON.parse(requestString)[1].filter(result =&gt; result !== argv[0])

  // Return final JSON
  return JSON.stringify({
    "skipknowledge": true,
    "variables": { "oldResults": newResults.join("\n"), "oldArg": argv[0] },
    "items": makeItems(argv.concat(newResults))
  })
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Search Amazon with suggestions</string>
				<key>title</key>
				<string>Search Amazon</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>221025C2-26B2-4105-B171-A62E18219FBD</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>searcher</key>
				<integer>1635213677</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.systemwebsearch</string>
			<key>uid</key>
			<string>21ACD77C-F177-4D29-9560-8D7461EC6453</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>## Usage

Get in-line suggestions from Amazon’s website via the `amazon` keyword. Press &lt;kbd&gt;↩&lt;/kbd&gt; to open the search results page in the default web browser.

![Amazon search for Streamdeck](images/about/amazon-suggest-streamdeck.png)

To search a specific Amazon store, set your location in Alfred’s General preferences.</string>
	<key>uidata</key>
	<dict>
		<key>21ACD77C-F177-4D29-9560-8D7461EC6453</key>
		<dict>
			<key>note</key>
			<string>To change Amazon store, set your location in Alfred's General preferences.</string>
			<key>xpos</key>
			<real>265</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
		<key>221025C2-26B2-4105-B171-A62E18219FBD</key>
		<dict>
			<key>note</key>
			<string>Set your keyword via the "Configure workflow..." button.</string>
			<key>xpos</key>
			<real>45</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string>amazon</string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<false/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>Search Keyword</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>search_keyword</string>
		</dict>
	</array>
	<key>version</key>
	<string>2023.1</string>
	<key>webaddress</key>
	<string>https://github.com/alfredapp/amazon-suggest-workflow/</string>
</dict>
</plist>
