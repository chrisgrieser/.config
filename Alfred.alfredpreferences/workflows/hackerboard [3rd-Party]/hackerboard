#!/usr/bin/env ruby
# frozen_string_literal: true

List_file = "#{ENV['alfred_workflow_cache']}/hackernews_list.json"

# Recheck if list file does not exist or is older than one hour or argument asks for it
if !File.exist?(List_file) || (((Time.now - File.mtime(List_file)) / 3600).ceil > 1)
  require 'cgi'
  require 'json'
  require 'open-uri'
  require 'rss'

  Dir.mkdir(ENV['alfred_workflow_cache']) unless Dir.exist?(ENV['alfred_workflow_cache'])

  Ignore_keywords = ENV['ignore_keywords'].downcase.split("\n")
  script_filter_items = []

  RSS::Parser.parse(URI('https://news.ycombinator.com/rss').open).items.each do |item|
    next if Ignore_keywords.any? { |text| item.link.downcase.include?(text) }
    next if Ignore_keywords.any? { |text| item.title.downcase.include?(text) }

    if ENV['default_comments'] == '1'
      primary_link = item.comments
      secondary_link = item.link
      alt_message = 'Open linked website'
    else
      primary_link = item.link
      secondary_link = item.comments
      alt_message = 'Open comments thread'
    end

    unescaped_title = CGI.unescapeHTML(item.title)

    script_filter_items.push(
      title: unescaped_title,
      subtitle: item.link,
      arg: primary_link,
      match: "#{unescaped_title} #{item.link}",
      mods: {
        alt: { subtitle: alt_message, arg: secondary_link }
      }
    )
  end

  File.write(List_file, { items: script_filter_items }.to_json)
end

# Output list
puts File.open(List_file, &:read).to_s
