#!/usr/bin/env node

var Hjson = require('../lib/hjson');
var fs = require('fs');
var os = require('os');
var dsf=[];

var args={}, argv=[];
process.argv.slice(2).forEach(function(x) {
  var i;
  if (x[0]==="-") { i=x.indexOf("="); args[x.substr(1, i>0?i-1:undefined)]=i>0?x.substr(i+1):true; }
  else if (x[0]==="+") { i=x.indexOf("="); args[x.substr(0, i>0?i:undefined)]=i>0?x.substr(i+1):true; }
  else argv.push(x);
});

if (args["-help"] || args["?"] || args.h) {
  console.error("Hjson, the Human JSON.");
  console.error();
  console.error("Usage:");
  console.error("  hjson [OPTIONS]");
  console.error("  hjson [OPTIONS] INPUT");
  console.error("  hjson (-h | --help | -?)");
  console.error("  hjson (-V | --version)");
  console.error();
  console.error("INPUT can be in JSON or Hjson format. If no file is given it will read from stdin.");
  console.error("The default is to output as Hjson.");
  console.error();
  console.error("Options:");
  console.error("  (-j | -json)  output as formatted JSON.");
  console.error("  (-c | -json=compact)  output as JSON.");
  console.error("Options for Hjson output:");
  console.error("  -sl         output the opening brace on the same line");
  console.error("  -quote      quote all strings");
  console.error("  -quote=all  quote keys as well");
  console.error("  -js         output in JavaScript/JSON compatible format");
  console.error("              can be used with -rt and // comments");
  console.error("  -rt         round trip comments");
  console.error("  -nocol      disable colors");
  console.error("  -cond=n     set condense option (default 60, 0 to disable)");
  console.error("");
  console.error("Domain specific formats are optional extensions to Hjson and can be enabled with the following options:");
  Object.keys(Hjson.dsf).forEach(function(name) {
    console.error("  +"+name+": "+Hjson.dsf[name].description);
  });
  return 0;
}
else if (args.V || args["-version"]) {
  console.log("Hjson.js " + Hjson.version);
  return 0;
}

if (args["+math"]) dsf.push(Hjson.dsf.math());
if (args["+date"]) dsf.push(Hjson.dsf.date({free:false}));
if (args["+hex"]) dsf.push(Hjson.dsf.hex({out:false}));

var text;
if (argv.length) {
  text=fs.readFileSync(argv[0], "utf8");
  convert(text);
}
else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  text = '';
  stdin.on('data', function(chunk) { text += chunk; });
  stdin.on('end', function() { convert(text); });
}

function convert(text) {
  var obj;
  try { obj=Hjson.parse(text, { keepWsc: args.rt, dsf: dsf }); }
  catch (e) {
    console.error(e.toString());
    if (e.hint) console.error("\nhint: "+e.hint);
    process.exit(1); // set exit code
    return;
  }

  var result;
  if (args.c || args.json==="compact") result = JSON.stringify(obj);
  else if (args.j || args.json) result = JSON.stringify(obj, null, 2);
  else {
    if (args.js) args.quote="all";
    if (args.quote===true) args.quote="strings";
    result = Hjson.stringify(obj, {
      condense: args.cond || 60,
      bracesSameLine: args.sl,
      quotes: args.quote,
      separator: args.js,
      keepWsc: args.rt,
      colors: !args.nocol && process.stdout.isTTY,
      dsf: dsf,
    });
  }

  process.stdout.write(result + os.EOL);
}

