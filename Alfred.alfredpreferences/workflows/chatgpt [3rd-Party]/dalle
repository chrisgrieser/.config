#!/usr/bin/osascript -l JavaScript

// Helpers
function envVar(varName) {
  return $.NSProcessInfo
    .processInfo
    .environment
    .objectForKey(varName).js
}

function isDir(path) {
  return $.NSFileManager.defaultManager.attributesOfItemAtPathError(path, undefined).js["NSFileType"].js === "NSFileTypeDirectory"
}

function makeDir(path) {
  return $.NSFileManager.defaultManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(
    path, true, undefined, undefined)
}

function dirContents(path) {
  return $.NSFileManager.defaultManager.contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(
    $.NSURL.fileURLWithPath(path), undefined, $.NSDirectoryEnumerationSkipsHiddenFiles, undefined)
    .js.map(p => p.path.js).sort()
}

function extractPrompt(path) {
  // Extract description from metadata
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/xattr")
  task.arguments = ["-p", "com.apple.metadata:kMDItemDescription", path]
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const stringOut = $.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(dataOut, [], undefined, undefined).js

  // Extract prompt from description
  if (stringOut === undefined) return "**No prompt found**"

  const promptRegex = /^(\w+ Prompt:)/
  return stringOut
    .split("\n")
    .filter(line => line.match(promptRegex))
    .map(line => line.replace(promptRegex, "**$1**"))
    .join("\n\n")
}

function writeMetadata(field, text, path) {
  // Convert to plist
  const plistData = $.NSPropertyListSerialization.dataWithPropertyListFormatOptionsError(text, $.NSPropertyListXMLFormat_v1_0, 0, undefined)
  const plistString = $.NSString.alloc.initWithDataEncoding(plistData, $.NSUTF8StringEncoding).js

  // Write plist
  const task = $.NSTask.alloc.init

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/xattr")
  task.arguments = ["-w", `com.apple.metadata:${field}`, plistString, path]
  task.launchAndReturnError(false)
}

function padDate(number) {
  return number.toString().padStart(2, "0")
}

function markdownImage(path) {
  const imageMarkdown = `![](${path})`
  const promptMarkdown = extractPrompt(path)
  return `${promptMarkdown}\n${imageMarkdown}`
}

// Main
function run(argv) {
  const typedQuery = argv[0]
  const maxEntries = 10
  const apiKey = envVar("openai_api_key")
  const apiOrgHeader = envVar("openai_org_id") ? ["--header", `OpenAI-Organization: ${envVar("openai_org_id")}`] : []
  const apiEndpointInit = envVar("dalle_api_endpoint") || "https://api.openai.com/v1/images/generations"
  const apiEndpointInitHasPath = apiEndpointInit.replace(/^https?:\/\//, "").includes("/")
  const apiEndpoint = apiEndpointInitHasPath ? apiEndpointInit : `${apiEndpointInit}/v1/images/generations`
  const model = envVar("dalle_model")
  const imageNumber = parseInt(envVar("dalle_image_number"))
  const imageStyle = envVar("dalle_style")
  const imageQuality = envVar("dalle_quality")
  const parentFolder = envVar("dalle_images_folder")
  const includeMetadata = envVar("dalle_write_metadata")

  // Load previous images and prompts
  makeDir(parentFolder)

  const previousEntries = dirContents(parentFolder)
    .filter(entry => !isDir(entry))
    .filter(file => file.endsWith(".png"))
    .slice(-maxEntries)
    .map(image => markdownImage(image))
    .join("\n\n")

  // If given an argument, load previous entries early and rerun to start the process
  if (!envVar("loaded_previous")) return JSON.stringify({
    rerun: 0.1,
    variables: { loaded_previous: true },
    response: previousEntries,
    behaviour: { scroll: "end" }
  })

  // If argument is empty, return previous entries
  if (typedQuery.length === 0) return JSON.stringify({
    variables: { loaded_previous: true },
    response: previousEntries,
    behaviour: { scroll: "end" }
  })

  // Send request
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.fileURLWithPath("/usr/bin/curl")
  task.arguments = [
    apiEndpoint,
    "--silent",
    "--header", "Content-Type: application/json",
    "--header", `Authorization: Bearer ${apiKey}`,
    "--data", JSON.stringify({
      model: model,
      prompt: typedQuery,
      style: imageStyle,
      quality: imageQuality,
      n: imageNumber,
      size: "1024x1024"
    })
  ].concat(apiOrgHeader)

  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFileAndReturnError(false)
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js
  const response = JSON.parse(stringOut)

  // Warn on error
  if (response["error"]) {
    console.log(JSON.stringify(response)) // For Alfred's debugger

    return JSON.stringify({
      variables: { loaded_previous: true },
      response: `${previousEntries}\n\n**Original Prompt:** ${typedQuery}\n\n${response["error"]["message"]}`,
      behaviour: { response: "append", scroll: "end" }
    })
  }

  // Download images
  const creationDate = new Date(response["created"] * 1000) // Multiply to get milliseconds
  const creationYear = creationDate.getFullYear()
  const creationMonth = padDate(creationDate.getMonth() + 1) // Months are zero-based
  const creationDay = padDate(creationDate.getDate())
  const creationHour = padDate(creationDate.getHours())
  const creationMinute = padDate(creationDate.getMinutes())
  const creationSecond = padDate(creationDate.getSeconds())

  // Write Prompt
  const revisedPrompt = response["data"][0]["revised_prompt"]
  const promptText = revisedPrompt ?
    `Original Prompt: ${typedQuery}\n\nRevised Prompt: ${revisedPrompt}` :
    `Original Prompt: ${typedQuery}`

  // Download images
  const downloadedImages = response["data"].map(item => {
    const uid = $.NSProcessInfo.processInfo.globallyUniqueString.js.split("-")[0]
    const imagePath = `${parentFolder}/${creationYear}.${creationMonth}.${creationDay}.${creationHour}.${creationMinute}.${creationSecond}-${uid}.png`

    const queryURL = $.NSURL.URLWithString(item["url"])
    const requestData = $.NSData.dataWithContentsOfURL(queryURL)
    requestData.writeToFileAtomically(imagePath, true)

    if (includeMetadata) {
      writeMetadata("kMDItemCreator", "DALL-E", imagePath)
      writeMetadata("kMDItemDescription", `Generated with DALL-E via Alfred workflow.\n\n${promptText}`, imagePath)
    }

    return imagePath
  })

  // Append results
  return JSON.stringify({
    variables: { loaded_previous: true },
    response: downloadedImages.map(image => markdownImage(image)).join("\n\n"),
    behaviour: { response: "append" }
  })
}
