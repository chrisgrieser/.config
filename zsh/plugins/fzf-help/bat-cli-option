#!/usr/bin/env bash

usage="Usage: $(basename "$0") [-h | --help] <cmd> <option>

Uses bat to display the help message of <cmd> where the <option> is highlighted
with the help message. The list of available options can be supplied via 
stdin if possible, else <cmd> --help and a regex is used to extract the options.

The theme used by bat can be overridden by setting the BAT_CLI_OPTION_THEME 
environment variable.

where:
    options:
    -h --help   shows this help messages

    positional:
    <cmd>   an existing command
    <option>    an option of <cmd>"

[ $# -eq 0 ] && { echo "$usage"; exit ;}
[ $# -eq 1 ] && { echo "Missing <option>"; exit ; } 
[ $1 == "-h" ] || [ $1 == "--help" ] && { echo "$usage"; exit ;}

_get_cli_options() {
    # Use options from stdin if they are available
    local cmd this_dir
    cmd=$1
    this_dir=$(dirname $(realpath ${BASH_SOURCE:-$0}))

    if [[ -p /dev/stdin ]]; then
        echo "$(cat -)"
    else
        echo "$($this_dir/cli-options $cmd)"
    fi
}

get_line_number() {
    local line_number line_number_and_word
    line_number_and_word="$1"
    line_number=$(ag -Q -- "$line_number_and_word" | head -1 | sed "s/:.*$//g")
    [ -z $line_number ] && line_number=0
    echo "$line_number"
}

get_scroll_lines() {
    local half_page line_number scroll

    line_number=$1
    half_page=$(get_half_page)

    scroll=$(($line_number-$half_page));
    scroll=$(($scroll > 0 ? $scroll : 0));
    echo $scroll
}

get_half_page() {
    local number_of_lines

    number_of_lines=$FZF_PREVIEW_LINES 
    [ -z $number_of_lines ] && number_of_lines=$(tput lines)

    echo $(($number_of_lines / 2))
}

cmd="$1"
option="$2" 

[[ -z $CLI_OPTIONS_CMD ]] && CLI_OPTIONS_CMD="$1 --help"

line_number=$(_get_cli_options $cmd | get_line_number $option)
scroll=$(get_scroll_lines $line_number)
printf '\033[2J'
eval $CLI_OPTIONS_CMD | bat -f -p -H $line_number -r $scroll:
