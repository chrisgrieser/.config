#!/usr/bin/env zsh

# CONFIG
logpath_on_mac="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Backups/backups-to-external-drives.log"

function do_backup {
	backup "$HOME/Library/Mobile Documents/com~apple~CloudDocs/" ./iCloud-Folder
	backup "$HOME/RomComs/" ./Homefolder/RomComs
	backup "$HOME/Documents/" ./Homefolder/Documents # iCloud only has symlinks

	# perma-repos
	while read -r line; do
		repo_path=$(echo "$line" | cut -d, -f1 | sed "s|^~|$HOME|")
		basename="$(basename "$repo_path")"
		backup "$repo_path/" "./perma-repos/$basename"
	done < "$HOME/.config/perma-repos.csv"
}

#───────────────────────────────────────────────────────────────────────────────
# HELPER FUNCTIONS

function _pretty_header() {
	[[ "$2" != "no-line-break" ]] && echo
	defaults read -g AppleInterfaceStyle &> /dev/null && fg="\e[1;30m" || fg="\e[1;37m"
	bg="\e[1;44m"
	print "$fg$bg $1 \e[0m"
}

errors=""
function backup() {
	local bkp_from="$1"
	local bkp_to="$2"
	bkp_from=$(echo "$bkp_from" | sed -E 's|/?$|/|')

	if [[ ! -d "$bkp_from" ]]; then
		errors="$errors\n$bkp_from does not exist."
		return 1
	fi
	echo
	_pretty_header "Backup: ${bkp_from/#$HOME/~}"
	mkdir -p "$bkp_to"

	rsync --archive --delete --recursive --progress --human-readable \
		--exclude="*.Trash" --exclude="*/nvim-data" --exclude=".DS_Store" \
		"$bkp_from" "$bkp_to" ||
		errors="$errors\nProblems occurred for: $bkp_from"
}

#───────────────────────────────────────────────────────────────────────────────
# DETERMINE VOLUME

spinner="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
for i in {1..200}; do
	volume_name="$(df | grep --only-matching " /Volumes/.*" |
		grep -v "/Volumes/Recovery" | cut -c2-)"
	if [[ $(echo "$volume_name" | wc -l) -gt 1 ]]; then
		print "\e[1;33mMore than one volume connected.\e[0m"
		return 1
	elif [[ -n "$volume_name" ]]; then
		break
	fi
	pos=$((i % ${#spinner}))
	printf "\rSearching for volume… %s" "${spinner:$pos:1}"
	sleep 0.2
done

echo
if [[ -z "$volume_name" ]]; then
	print "\e[1;33mTimeout, no volume found.\e[0m"
	return 1
else
	_pretty_header "Backup volume: $volume_name" "no-line-break"
	print "\e[1;38;5;247m─────────────────────────────────────────────────────────────────────────────"
fi

#───────────────────────────────────────────────────────────────────────────────
# DO BACKUP

device_name="$(scutil --get ComputerName)"
backup_dest="$volume_name/Backup_$device_name"
mkdir -p "$backup_dest"
cd "$backup_dest" || return 1
echo -n "Backup: $(date '+%Y-%m-%d %H:%M'), $volume_name -- " >> "$logpath_on_mac"
# do_backup

#───────────────────────────────────────────────────────────────────────────────
# ARCHIVE OLDER BACKUPS
older_backups="$volume_name/older backups"
mkdir -p "$older_backups"
cd "$older_backups" || return 1

# Find oldest backup by parsing directory names
oldest_backup_date=$(command ls | tail -n1 | cut -d_ -f3)

oldest_timestamp=0 # No backups yet
[[ -n "$oldest_backup_date" ]] && oldest_timestamp=$(date -j -f "%Y-%m-%d" "$oldest_backup_date" "+%s")

# Decide if backup is needed
three_months_ago=$(date -v -3m "+%s")
_pretty_header "Archive of backups"
if [[ "$oldest_timestamp" -le "$three_months_ago" ]]; then
	echo "Oldest backup in archive more than 3 months old. Archiving current backup."
	iso_today="$(date "+%Y-%m-%d")"
	archive_path="$older_backups/Backup_${device_name}_$iso_today"
	rsync --archive --progress --copy-dest="$backup_dest" "$backup_dest/" "$archive_path/"
else
	echo "Oldest backup in archive still recent."
fi

#───────────────────────────────────────────────────────────────────────────────
# LOG & NOTIFY

_pretty_header "Report"
if [[ -z "$errors" ]]; then
	print "\e[1;32mBackup on $volume_name completed.\033[0m"
	"$ZDOTDIR/notificator" --title "Backup" --message "✅ completed." --sound "Blow"

	echo "completed: $(date '+%H:%M')" >> "$logpath_on_mac"
	echo "Backup: $(date '+%Y-%m-%d %H:%M')" >> "$backup_dest/last_backup.log"
else
	print "\e[1;31m$errors\033[0m"
	"$ZDOTDIR/notificator" --title "Backup" --message "⚠️ Errors occurred." --sound "Basso"

	echo "had errors: $(date '+%H:%M')" >> "$logpath_on_mac"
fi
