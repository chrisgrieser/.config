#!/usr/bin/env zsh

# CONFIG
bkp_destination="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Backups/My Repos"
max_number_of_bkps=3

# IGNORES PERMA-REPOS (since they are already locally backed up)
ignore_repos=$(cut -d, -f1 "$HOME/.config/perma-repos.csv" |
	xargs basename |
	tr "\n" "|" |
	sed -e "s/.$//") # construct regex pattern for `grep`

_export_github_token # defined in .zshenv

#───────────────────────────────────────────────────────────────────────────────

# GUARD
if [[ -z "$GITHUB_TOKEN" ]]; then
	print "\e[1;31mNo GitHub token found\e[0m"
	return 1
elif [[ ! -x "$(command -v gh)" ]]; then
	print "\e[1;33mgh not installed.\e[0m" 
	return 1
fi

# GET ALL REPOS
# only non-forked, non-archived repos
repos=$(gh repo list --limit=200 --no-archived --source --json="nameWithOwner" --jq=".[].nameWithOwner" |
	grep --extended-regexp --invert-match "$ignore_repos")
repos_count=$(echo "$repos" | wc -l | tr -d " ")
if [[ repos_count -ge 100 ]]; then
	print "\e[1;33mMore than 100 repos. Unclear whether GitHub API allows for so many listings, so need to manually check that all repos are included.\e[0m"
fi

# DOWNLOAD REPOS
mkdir -p "/tmp/repos"
cd "/tmp/repos" || return 1
i=0
echo "$repos" | while read -r repo; do
	((i++))
	print "\e[1;34m$repo ($i/$repos_count)\e[0m"
	git clone --no-progress "git@github.com:$repo.git"
	echo
done

# ARCHIVE THEM
print "\e[1;34mCompressing $repos_count repos…\e[0m"
archive_name="${repos_count} Repos – $(date +%Y-%m-%d).zip"
zip --recurse-paths --symlinks --quiet "$bkp_destination/$archive_name" . || return 1
rm -rf "/tmp/repos"

# RESTRICT NUMBER OF BACKUPS
cd "$bkp_destination" || return 1
# shellcheck disable=2012
ls -t | tail -n +$((max_number_of_bkps + 1)) | tr '\n' '\0' | xargs -0 rm

# NOTIFY
print "\e[1;32mArchived $repos_count repos.\e[0m"
"$ZDOTDIR/notificator" --title "⬇️ Repo Backup" \
	--message "$repos_count repos archived." --sound "Blow"
